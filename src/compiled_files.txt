File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\module-info.java
```
module com.example {
    requires javafx.controls;
    requires javafx.fxml;
    requires transitive javafx.graphics;
    requires javafx.base;
    requires java.sql;
    requires org.kordamp.ikonli.javafx;
    requires me.xdrop.fuzzywuzzy;
    requires com.opencsv;
    requires java.prefs;

    opens com.example to javafx.fxml;
    opens com.example.model to javafx.base;

    exports com.example;
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\ThemeManager.java
```
package com.example;

import javafx.scene.Scene;
import java.util.ArrayList;
import java.util.List;

public class ThemeManager {
    private static String currentTheme = "light"; // Default theme
    private static final List<Scene> registeredScenes = new ArrayList<>();

    public static void registerScene(Scene scene) {
        if (!registeredScenes.contains(scene)) {
            registeredScenes.add(scene);
            applyTheme(scene);
        }
    }

    public static void setTheme(String theme) {
        currentTheme = theme;
        for (Scene scene : registeredScenes) {
            applyTheme(scene);
        }
    }

    public static String getCurrentTheme() {
        return currentTheme;
    }

    private static void applyTheme(Scene scene) {
        scene.getStylesheets().clear();

        // Load common styles
        String commonStyles = ThemeManager.class.getResource("/com/example/css/common.css").toExternalForm();

        // Load theme-specific styles
        String themeStyles = ThemeManager.class.getResource("/com/example/css/" + currentTheme + "-theme.css")
                .toExternalForm();

        scene.getStylesheets().addAll(commonStyles, themeStyles);
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\App.java
```
package com.example;

import com.example.AppStructure.LoginStage;

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.stage.Stage;

public class App extends Application {

    public static void main(String[] args) {
        launch();
    }

    private static Scene scene;

    @Override
    public void start(Stage stage) {

        LoginStage loginStage = new LoginStage();
        loginStage.show();
    }
    
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\views\ServicesView.java
```
package com.example.views;

import java.util.List;
import java.util.function.Consumer;

import com.example.components.general.CustomButton;
import com.example.components.general.CustomSearchBox;
import com.example.components.general.GeneralSearchComponent;
import com.example.components.general.ViewTitle;
import com.example.controller.ServiceController;
import com.example.model.Service;
import com.example.views.Tables.ServiceTableComponent;

import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.scene.control.ScrollPane;
import javafx.scene.layout.Region;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;

public class ServicesView extends ScrollPane {
    private ServiceController serviceController;
    private ServiceTableComponent serviceTableComponent;
    private GeneralSearchComponent serviceSearchComponent;

    public ServicesView() {
        this.serviceController = new ServiceController();
        VBox contentBox = new VBox();
        contentBox.setPadding(new Insets(20));
        contentBox.setSpacing(20);
        contentBox.getStyleClass().add("primary-bg");
        ViewTitle header = new ViewTitle("Services", "Manage service records and details");
        CustomButton export = new CustomButton("Export", "export.png");
        Region spacer = new Region();
        HBox.setHgrow(spacer, Priority.ALWAYS);
        HBox headerBox = new HBox(header, spacer, export);
        headerBox.setSpacing(10);
        setContent(contentBox);
        setFitToWidth(true);
        setPannable(true);
        getStyleClass().add("primary-bg");
        setPadding(new Insets(20));

        serviceTableComponent = new ServiceTableComponent(serviceController);

        // Load all services
        ObservableList<Service> serviceList = serviceController.loadAllServices();
        serviceTableComponent.setData(serviceList);

        List<CustomSearchBox> searchBoxes = serviceController.getSearchBoxes();

        Consumer<List<CustomSearchBox>> filterAction = searchBoxesList -> serviceController
                .filterServices(searchBoxesList);

        serviceSearchComponent = new GeneralSearchComponent(searchBoxes, filterAction);

        export.setOnAction(event -> {
            serviceController.handleExport();
        });

        contentBox.getChildren().addAll(headerBox, serviceSearchComponent, serviceTableComponent);
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\views\ReportsView.java
```
package com.example.views;

import com.example.controller.ReportsController;
import com.example.components.general.ViewTitle;
import javafx.geometry.Insets;
import javafx.scene.Node;
import javafx.scene.control.ScrollPane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.Region;
import javafx.scene.layout.VBox;

/**
 * View component for displaying reports.
 */
public class ReportsView extends ScrollPane {

    private ReportsController reportsController;

    public ReportsView() {
        reportsController = new ReportsController();

        VBox contentBox = new VBox();
        contentBox.setPadding(new Insets(20));
        contentBox.setSpacing(30);
        contentBox.getStyleClass().add("primary-bg");

        // Header
        ViewTitle header = new ViewTitle("Reports", "Generate insightful reports to manage your tasks effectively.");
        Region spacer = new Region();
        VBox.setVgrow(spacer, Priority.ALWAYS);
        contentBox.getChildren().addAll(header);

        // 1. Service Frequency Report (Consolidated)
        Node serviceFrequencyReport = reportsController.generateServiceFrequencyReport();
        contentBox.getChildren().add(serviceFrequencyReport);

        // 2. Revenue Report
        Node revenueReport = reportsController.generateRevenueReport();
        contentBox.getChildren().add(revenueReport);

        // Set the content of the ScrollPane
        setContent(contentBox);
        setFitToWidth(true);
        setPannable(true);
        getStyleClass().add("primary-bg");
        setPadding(new Insets(20));
    }

    /**
     * Call this method to perform cleanup when ReportsView is no longer needed.
     */
    public void cleanup() {
        reportsController.cleanup();
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\views\PaymentsView.java
```
package com.example.views;

import java.util.List;
import java.util.function.Consumer;

import com.example.components.general.CustomButton;
import com.example.components.general.CustomSearchBox;
import com.example.components.general.GeneralSearchComponent;
import com.example.components.general.ViewTitle;
import com.example.controller.PaymentController;
import com.example.model.Payment;
import com.example.views.Tables.PaymentTableComponent;

import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.scene.control.ScrollPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Priority;
import javafx.scene.layout.Region;
import javafx.scene.layout.VBox;

public class PaymentsView extends ScrollPane {
    private PaymentController paymentController;
    private PaymentTableComponent paymentTableComponent;
    private GeneralSearchComponent paymentSearchComponent;

    public PaymentsView() {
        this.paymentController = new PaymentController();
        VBox contentBox = new VBox();
        contentBox.setPadding(new Insets(20));
        contentBox.setSpacing(20);
        contentBox.getStyleClass().add("primary-bg");
        ViewTitle header = new ViewTitle("Payments", "Manage payment transactions and details");
        CustomButton export = new CustomButton("Export", "export.png");
        Region spacer = new Region();
        HBox.setHgrow(spacer, Priority.ALWAYS);
        HBox headerBox = new HBox(header, spacer, export);
        headerBox.setSpacing(10);
        setContent(contentBox);
        setFitToWidth(true);
        setPannable(true);
        getStyleClass().add("primary-bg");
        setPadding(new Insets(20));

        paymentTableComponent = new PaymentTableComponent(paymentController);

        // Load all payments
        ObservableList<Payment> paymentList = paymentController.loadAllPayments();
        paymentTableComponent.setData(paymentList);

        List<CustomSearchBox> searchBoxes = paymentController.getSearchBoxes();

        Consumer<List<CustomSearchBox>> filterAction = searchBoxesList -> paymentController
                .filterPayments(searchBoxesList);

        paymentSearchComponent = new GeneralSearchComponent(searchBoxes, filterAction);

        export.setOnAction(event -> {
            paymentController.handleExport();
        });

        contentBox.getChildren().addAll(headerBox, paymentSearchComponent, paymentTableComponent);
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\views\OrdersView.java
```
package com.example.views;

import java.util.List;
import java.util.function.Consumer;

import com.example.components.general.CustomButton;
import com.example.components.general.CustomSearchBox;
import com.example.components.general.GeneralSearchComponent;
import com.example.components.general.ViewTitle;
import com.example.controller.OrderController;
import com.example.model.Order;
import com.example.views.Tables.OrderTableComponent;

import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.scene.control.ScrollPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Priority;
import javafx.scene.layout.Region;
import javafx.scene.layout.VBox;

public class OrdersView extends ScrollPane {
    private OrderController orderController;
    private OrderTableComponent orderTableComponent;
    private GeneralSearchComponent orderSearchComponent;

    public OrdersView() {
        this.orderController = new OrderController();
        VBox contentBox = new VBox();
        contentBox.setPadding(new Insets(20));
        contentBox.setSpacing(20);
        contentBox.getStyleClass().add("primary-bg");
        ViewTitle header = new ViewTitle("Orders", "Manage order information and transactions");
        CustomButton export = new CustomButton("Export", "export.png");
        Region spacer = new Region();
        HBox.setHgrow(spacer, Priority.ALWAYS);
        HBox headerBox = new HBox(header, spacer, export);
        headerBox.setSpacing(10);
        setContent(contentBox);
        setFitToWidth(true);
        setPannable(true);
        getStyleClass().add("primary-bg");
        setPadding(new Insets(20));

        orderTableComponent = new OrderTableComponent(orderController);

        // Load all orders
        ObservableList<Order> orderList = orderController.loadAllOrders();
        orderTableComponent.setData(orderList);

        List<CustomSearchBox> searchBoxes = orderController.getSearchBoxes();

        Consumer<List<CustomSearchBox>> filterAction = searchBoxesList -> orderController
                .filterOrders(searchBoxesList);

        orderSearchComponent = new GeneralSearchComponent(searchBoxes, filterAction);

        export.setOnAction(event -> {
            orderController.handleExport();
        });

        contentBox.getChildren().addAll(headerBox, orderSearchComponent, orderTableComponent);
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\views\HomeView.java
```
package com.example.views;

import javafx.geometry.Insets;
import javafx.scene.control.ScrollPane;
import javafx.scene.layout.VBox;

import com.example.AppStructure.main.home.LatestOrders;
import com.example.AppStructure.main.home.LatestServices;
import com.example.AppStructure.main.home.Records;
import com.example.components.general.ViewTitle;
import com.example.controller.HomeController;
import com.example.model.home.HomeStats;
import com.example.model.home.LatestOrder;
import com.example.model.home.LatestService;

import java.util.List;

public class HomeView extends ScrollPane {
    private HomeController homeController;

    public HomeView() {
        this.homeController = new HomeController();

        VBox contentBox = new VBox();
        contentBox.setPadding(new Insets(20));
        contentBox.setSpacing(20);
        ViewTitle header = new ViewTitle("Home", "This is the home page to help me manage tasks");
        setContent(contentBox);
        setFitToWidth(true);
        setPannable(true);
        contentBox.getStyleClass().add("primary-bg");
        getStyleClass().add("primary-bg");
        setPadding(new Insets(20));

        // Load dynamic data
        HomeStats stats = homeController.loadHomeStats();
        List<LatestOrder> latestOrders = homeController.loadLatestOrders();
        List<LatestService> latestServices = homeController.loadLatestServices();

        Records recordsView = new Records(stats);
        LatestOrders latestOrdersView = new LatestOrders(latestOrders);
        LatestServices latestServicesView = new LatestServices(latestServices);

        contentBox.getChildren().addAll(header, recordsView, latestOrdersView, latestServicesView);
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\views\EmployeesView.java
```
package com.example.views;

import java.util.List;
import java.util.function.Consumer;

import com.example.components.general.CustomButton;
import com.example.components.general.CustomSearchBox;
import com.example.components.general.GeneralSearchComponent;
import com.example.components.general.ViewTitle;
import com.example.controller.EmployeeController;
import com.example.model.Employee;
import com.example.views.Tables.EmployeeTableComponent;

import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.scene.control.ScrollPane;
import javafx.scene.layout.Region;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;

public class EmployeesView extends ScrollPane {
    private EmployeeController employeeController;
    private EmployeeTableComponent employeeTableComponent;
    private GeneralSearchComponent employeeSearchComponent;

    public EmployeesView() {
        this.employeeController = new EmployeeController();
        VBox contentBox = new VBox();
        contentBox.setPadding(new Insets(20));
        contentBox.setSpacing(20);
        contentBox.getStyleClass().add("primary-bg"); // Ensure you have a CSS class named 'primary-bg'
        ViewTitle header = new ViewTitle("Employees", "Manage employee records");
        CustomButton export = new CustomButton("Export", "export.png"); // Ensure 'export.png' exists in your resources
        Region spacer = new Region();
        HBox.setHgrow(spacer, Priority.ALWAYS);
        HBox headerBox = new HBox(header, spacer, export);
        headerBox.setSpacing(10);
        setContent(contentBox);
        setFitToWidth(true);
        setPannable(true);
        getStyleClass().add("primary-bg");
        setPadding(new Insets(20));

        employeeTableComponent = new EmployeeTableComponent(employeeController);

        // Load all employees
        ObservableList<Employee> employeeList = employeeController.loadAllEmployees();
        employeeTableComponent.setData(employeeList);

        List<CustomSearchBox> searchBoxes = employeeController.getSearchBoxes();

        Consumer<List<CustomSearchBox>> filterAction = searchBoxesList -> employeeController
                .filterEmployees(searchBoxesList);

        employeeSearchComponent = new GeneralSearchComponent(searchBoxes, filterAction);

        export.setOnAction(event -> {
            employeeController.handleExport();
        });

        contentBox.getChildren().addAll(headerBox, employeeSearchComponent, employeeTableComponent);
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\views\CustomersView.java
```
package com.example.views;

import java.util.List;
import java.util.function.Consumer;

import com.example.components.general.CustomButton;
import com.example.components.general.CustomSearchBox;
import com.example.components.general.GeneralSearchComponent;
import com.example.components.general.ViewTitle;
import com.example.controller.CustomerController;
import com.example.model.Customer;
import com.example.views.Tables.CustomerTableComponent;

import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.scene.control.ScrollPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Priority;
import javafx.scene.layout.Region;
import javafx.scene.layout.VBox;

public class CustomersView extends ScrollPane {
    private CustomerController customerController;
    private CustomerTableComponent customerTableComponent;
    private GeneralSearchComponent customerSearchComponent;

    public CustomersView() {
        this.customerController = new CustomerController();
        VBox contentBox = new VBox();
        contentBox.setPadding(new Insets(20));
        contentBox.setSpacing(20);
        contentBox.getStyleClass().add("primary-bg");
        ViewTitle header = new ViewTitle("Customers", "Manage customer information and interactions");
        CustomButton export = new CustomButton("Export", "export.png");
        Region spacer = new Region();
        HBox.setHgrow(spacer, Priority.ALWAYS);
        HBox headerBox = new HBox(header, spacer, export);
        headerBox.setSpacing(10);
        setContent(contentBox);
        setFitToWidth(true);
        setPannable(true);
        getStyleClass().add("primary-bg");
        setPadding(new Insets(20));

        customerTableComponent = new CustomerTableComponent(customerController);

        // Load all customers
        ObservableList<Customer> customerList = customerController.loadAllCustomers();
        customerTableComponent.setData(customerList);

        List<CustomSearchBox> searchBoxes = customerController.getSearchBoxes();

        Consumer<List<CustomSearchBox>> filterAction = searchBoxesList -> customerController
                .filterCustomers(searchBoxesList);

        customerSearchComponent = new GeneralSearchComponent(searchBoxes, filterAction);

        export.setOnAction(event -> {
            customerController.handleExport();
        });

        contentBox.getChildren().addAll(headerBox, customerSearchComponent, customerTableComponent);
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\views\CarsView.java
```
package com.example.views;

import java.util.List;
import java.util.function.Consumer;

import com.example.components.general.CustomButton;
import com.example.components.general.CustomSearchBox;
import com.example.components.general.GeneralSearchComponent;
import com.example.components.general.ViewTitle;
import com.example.controller.CarController;
import com.example.model.Car;
import com.example.views.Tables.CarTableComponent;

import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.scene.control.ScrollPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Priority;
import javafx.scene.layout.Region;
import javafx.scene.layout.VBox;

public class CarsView extends ScrollPane {
        private CarController carController;
        private CarTableComponent carTableComponent;
        private GeneralSearchComponent carSearchComponent;

        public CarsView() {
                this.carController = new CarController();
                VBox contentBox = new VBox();
                contentBox.setPadding(new Insets(20));
                contentBox.setSpacing(20);
                contentBox.getStyleClass().add("primary-bg");
                ViewTitle header = new ViewTitle("Cars", "This is the home page to help me manage tasks");
                CustomButton export = new CustomButton("Export", "export.png");
                Region spacer = new Region();
                HBox.setHgrow(spacer, Priority.ALWAYS);
                HBox headerBox = new HBox(header, spacer, export);
                headerBox.setSpacing(10);
                setContent(contentBox);
                setFitToWidth(true);
                setPannable(true);
                getStyleClass().add("primary-bg");
                setPadding(new Insets(20));

                carTableComponent = new CarTableComponent(carController);

                // Load all cars
                ObservableList<Car> carList = carController.loadAllCars();
                carTableComponent.setData(carList);

                List<CustomSearchBox> searchBoxes = carController.getSearchBoxes();

                Consumer<List<CustomSearchBox>> filterAction = searchBoxesList -> carController
                                .filterCars(searchBoxesList);

                carSearchComponent = new GeneralSearchComponent(searchBoxes, filterAction);

                export.setOnAction(event -> {
                        carController.handleExport();
                });
                contentBox.getChildren().addAll(headerBox, carSearchComponent, carTableComponent);
        }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\views\Tables\ServiceTableComponent.java
```
package com.example.views.Tables;

import com.example.model.Service;
import com.example.components.general.StyledTableComponent;
import com.example.controller.ServiceController;
import javafx.collections.ObservableList;
import javafx.scene.control.TableColumn;

public class ServiceTableComponent extends StyledTableComponent<Service> {
    private ServiceController serviceController;

    public ServiceTableComponent(ServiceController serviceController) {
        super("Service List");
        this.serviceController = serviceController;
        initializeColumns();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected void initializeColumns() {
        TableColumn<Service, Number> serviceIDColumn = createColumn("Service ID", "serviceID", 100);
        TableColumn<Service, Number> carIDColumn = createColumn("Car ID", "carID", 80);
        TableColumn<Service, Number> customerIDColumn = createColumn("Customer ID", "customerID", 100);
        TableColumn<Service, String> serviceDateColumn = createColumn("Service Date", "serviceDate", 150);
        TableColumn<Service, String> serviceDescColumn = createColumn("Description", "serviceDescription", 200);
        TableColumn<Service, Number> costColumn = createColumn("Cost", "cost", 100);

        table.getColumns().addAll(
                serviceIDColumn,
                carIDColumn,
                customerIDColumn,
                serviceDateColumn,
                serviceDescColumn,
                costColumn,
                createActionColumn());
    }

    public void setData(ObservableList<Service> serviceList) {
        table.setItems(serviceList);
    }

    @Override
    protected void onEdit(Service service) {
        serviceController.handleEdit(service);
    }

    @Override
    protected void onDetails(Service service) {
        serviceController.handleDetails(service);
    }

    @Override
    protected void onInsert() {
        serviceController.handleInsert();
    }

    public void exportToCSV() {
        serviceController.handleExport();
    }

    public void refreshTable() {
        table.refresh();
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\views\Tables\PaymentTableComponent.java
```
package com.example.views.Tables;

import com.example.model.Payment;
import com.example.components.general.StyledTableComponent;
import com.example.controller.PaymentController;
import javafx.collections.ObservableList;
import javafx.scene.control.TableColumn;

public class PaymentTableComponent extends StyledTableComponent<Payment> {
    private PaymentController paymentController;

    public PaymentTableComponent(PaymentController paymentController) {
        super("Payment List");
        this.paymentController = paymentController;
        initializeColumns();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected void initializeColumns() {
        TableColumn<Payment, Number> paymentIDColumn = createColumn("Payment ID", "paymentID", 100);
        TableColumn<Payment, String> paymentDateColumn = createColumn("Payment Date", "paymentDate", 150);
        TableColumn<Payment, String> paymentMethodColumn = createColumn("Payment Method", "paymentMethod", 150);
        TableColumn<Payment, Number> amountColumn = createColumn("Amount", "amount", 100);
        TableColumn<Payment, Number> orderIDColumn = createColumn("Order ID", "orderID", 100);

        table.getColumns().addAll(
                paymentIDColumn,
                paymentDateColumn,
                paymentMethodColumn,
                amountColumn,
                orderIDColumn,
                createActionColumn());
    }

    public void setData(ObservableList<Payment> paymentList) {
        table.setItems(paymentList);
    }

    @Override
    protected void onEdit(Payment payment) {
        paymentController.handleEdit(payment);
    }

    @Override
    protected void onDetails(Payment payment) {
        paymentController.handleDetails(payment);
    }

    @Override
    protected void onInsert() {
        paymentController.handleInsert();
    }

    public void exportToCSV() {
        paymentController.handleExport();
    }

    public void refreshTable() {
        table.refresh();
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\views\Tables\OrderTableComponent.java
```
package com.example.views.Tables;

import com.example.model.Order;
import com.example.components.general.StyledTableComponent;
import com.example.controller.OrderController;
import javafx.collections.ObservableList;
import javafx.scene.control.TableColumn;

public class OrderTableComponent extends StyledTableComponent<Order> {
    private OrderController orderController;

    public OrderTableComponent(OrderController orderController) {
        super("Order List");
        this.orderController = orderController;
        initializeColumns();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected void initializeColumns() {
        TableColumn<Order, Number> orderIDColumn = createColumn("Order ID", "orderID", 100);
        TableColumn<Order, String> orderDateColumn = createColumn("Order Date", "orderDate", 150);
        TableColumn<Order, Number> carIDColumn = createColumn("Car ID", "carID", 80);
        TableColumn<Order, Number> customerIDColumn = createColumn("Customer ID", "customerID", 100);
        TableColumn<Order, Number> employeeIDColumn = createColumn("Employee ID", "employeeID", 100);
        TableColumn<Order, Number> quantityColumn = createColumn("Quantity", "quantity", 80);
        TableColumn<Order, Number> totalPriceColumn = createColumn("Total Price", "totalPrice", 100);

        table.getColumns().addAll(
                orderIDColumn,
                orderDateColumn,
                carIDColumn,
                customerIDColumn,
                employeeIDColumn,
                quantityColumn,
                totalPriceColumn,
                createActionColumn());
    }

    public void setData(ObservableList<Order> orderList) {
        table.setItems(orderList);
    }

    @Override
    protected void onEdit(Order order) {
        orderController.handleEdit(order);
    }

    @Override
    protected void onDetails(Order order) {
        orderController.handleDetails(order);
    }

    @Override
    protected void onInsert() {
        orderController.handleInsert();
    }

    public void exportToCSV() {
        orderController.handleExport();
    }

    public void refreshTable() {
        table.refresh();
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\views\Tables\EmployeeTableComponent.java
```
package com.example.views.Tables;

import com.example.model.Employee;

import java.sql.Date;

import com.example.components.general.StyledTableComponent;
import com.example.controller.EmployeeController;
import javafx.collections.ObservableList;
import javafx.scene.control.TableColumn;

public class EmployeeTableComponent extends StyledTableComponent<Employee> {
    private EmployeeController employeeController;

    public EmployeeTableComponent(EmployeeController employeeController) {
        super("Employee List");
        this.employeeController = employeeController;
        initializeColumns();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected void initializeColumns() {
        TableColumn<Employee, Number> employeeIDColumn = createColumn("Employee ID", "employeeID", 100);
        TableColumn<Employee, String> firstNameColumn = createColumn("First Name", "firstName", 120);
        TableColumn<Employee, String> lastNameColumn = createColumn("Last Name", "lastName", 120);
        TableColumn<Employee, String> positionColumn = createColumn("Position", "position", 150);
        TableColumn<Employee, Number> salaryColumn = createColumn("Salary", "salary", 100);
        TableColumn<Employee, Date> hireDateColumn = createColumn("Hire Date", "hireDate", 150);

        table.getColumns().addAll(
                employeeIDColumn,
                firstNameColumn,
                lastNameColumn,
                positionColumn,
                salaryColumn,
                hireDateColumn,
                createActionColumn());
    }

    public void setData(ObservableList<Employee> employeeList) {
        table.setItems(employeeList);
    }

    @Override
    protected void onEdit(Employee employee) {
        employeeController.handleEdit(employee);
    }

    @Override
    protected void onDetails(Employee employee) {
        employeeController.handleDetails(employee);
    }

    @Override
    protected void onInsert() {
        employeeController.handleInsert();
    }

    public void exportToCSV() {
        employeeController.handleExport();
    }

    public void refreshTable() {
        table.refresh();
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\views\Tables\CustomerTableComponent.java
```
package com.example.views.Tables;

import com.example.model.Customer;
import com.example.components.general.StyledTableComponent;
import com.example.controller.CustomerController;
import javafx.collections.ObservableList;
import javafx.scene.control.TableColumn;

public class CustomerTableComponent extends StyledTableComponent<Customer> {
    private CustomerController customerController;

    public CustomerTableComponent(CustomerController customerController) {
        super("Customer List");
        this.customerController = customerController;
        initializeColumns();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected void initializeColumns() {
        TableColumn<Customer, Number> customerIDColumn = createColumn("Customer ID", "customerID", 100);
        TableColumn<Customer, String> firstNameColumn = createColumn("First Name", "firstName", 120);
        TableColumn<Customer, String> lastNameColumn = createColumn("Last Name", "lastName", 120);
        TableColumn<Customer, String> emailColumn = createColumn("Email", "email", 200);
        TableColumn<Customer, String> phoneColumn = createColumn("Phone", "phone", 150);
        TableColumn<Customer, String> addressColumn = createColumn("Address", "address", 200);
        TableColumn<Customer, String> cityColumn = createColumn("City", "city", 100);
        TableColumn<Customer, String> stateColumn = createColumn("State", "state", 80);
        TableColumn<Customer, String> zipCodeColumn = createColumn("Zip Code", "zipCode", 100);

        table.getColumns().addAll(
                customerIDColumn,
                firstNameColumn,
                lastNameColumn,
                emailColumn,
                phoneColumn,
                addressColumn,
                cityColumn,
                stateColumn,
                zipCodeColumn,
                createActionColumn());
    }

    public void setData(ObservableList<Customer> customerList) {
        table.setItems(customerList);
    }

    @Override
    protected void onEdit(Customer customer) {
        customerController.handleEdit(customer);
    }

    @Override
    protected void onDetails(Customer customer) {
        customerController.handleDetails(customer);
    }

    @Override
    protected void onInsert() {
        customerController.handleInsert();
    }

    public void exportToCSV() {
        customerController.handleExport();
    }

    public void refreshTable() {
        table.refresh();
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\views\Tables\CarTableComponent.java
```
package com.example.views.Tables;

import com.example.model.Car;
import com.example.components.general.StyledTableComponent;
import com.example.controller.CarController;
import javafx.collections.ObservableList;
import javafx.scene.control.TableColumn;

public class CarTableComponent extends StyledTableComponent<Car> {
    private CarController carController;

    public CarTableComponent(CarController carController) {
        super("Car Inventory");
        this.carController = carController;
        initializeColumns();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected void initializeColumns() {
        TableColumn<Car, Number> carIDColumn = createColumn("Car ID", "carID", 80);
        TableColumn<Car, String> makeColumn = createColumn("Make", "make", 120);
        TableColumn<Car, String> modelColumn = createColumn("Model", "model", 120);
        TableColumn<Car, Number> yearColumn = createColumn("Year", "year", 80);
        TableColumn<Car, Number> priceColumn = createColumn("Price", "price", 100);
        TableColumn<Car, Number> stockColumn = createColumn("Stock", "stock", 80);
        TableColumn<Car, String> vinColumn = createColumn("VIN", "vin", 150);

        table.getColumns().addAll(
                carIDColumn,
                makeColumn,
                modelColumn,
                yearColumn,
                priceColumn,
                stockColumn,
                vinColumn,
                createActionColumn());
    }

    public void setData(ObservableList<Car> carList) {
        table.setItems(carList);
    }

    @Override
    protected void onEdit(Car car) {
        carController.handleEdit(car);
    }

    @Override
    protected void onDetails(Car car) {
        carController.handleDetails(car);
    }

    @Override
    protected void onInsert() {
        carController.handleInsert();
    }

    public void exportToCSV() {
        carController.handleExport();
    }

    public void refreshTable() {
        table.refresh();
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\util\ExportUtil.java
```
package com.example.util;

import com.example.model.*;

import com.opencsv.CSVWriter;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;

public class ExportUtil {

    // Export Cars
    public void exportCarsToCSV(List<Car> cars, File destination) throws IOException {
        try (CSVWriter writer = new CSVWriter(new FileWriter(destination))) {
            String[] header = { "Car ID", "Make", "Model", "Year", "Price", "Stock", "VIN" };
            writer.writeNext(header);

            for (Car car : cars) {
                String[] data = {
                        String.valueOf(car.getCarID()),
                        car.getMake(),
                        car.getModel(),
                        String.valueOf(car.getYear()),
                        String.valueOf(car.getPrice()),
                        String.valueOf(car.getStock()),
                        car.getVin()
                };
                writer.writeNext(data);
            }
        }
    }

    // Export Customers
    public void exportCustomersToCSV(List<Customer> customers, File destination) throws IOException {
        try (CSVWriter writer = new CSVWriter(new FileWriter(destination))) {
            String[] header = { "Customer ID", "First Name", "Last Name", "Email", "Phone", "Address", "City", "State",
                    "Zip Code" };
            writer.writeNext(header);

            for (Customer customer : customers) {
                String[] data = {
                        String.valueOf(customer.getCustomerID()),
                        customer.getFirstName(),
                        customer.getLastName(),
                        customer.getEmail(),
                        customer.getPhone(),
                        customer.getAddress(),
                        customer.getCity(),
                        customer.getState(),
                        customer.getZipCode()
                };
                writer.writeNext(data);
            }
        }
    }

    // Export Employees
    public void exportEmployeesToCSV(List<Employee> employees, File destination) throws IOException {
        try (CSVWriter writer = new CSVWriter(new FileWriter(destination))) {
            String[] header = { "Employee ID", "First Name", "Last Name", "Position", "Salary", "Hire Date" };
            writer.writeNext(header);

            for (Employee employee : employees) {
                String[] data = {
                        String.valueOf(employee.getEmployeeID()),
                        employee.getFirstName(),
                        employee.getLastName(),
                        employee.getPosition(),
                        String.valueOf(employee.getSalary()),
                        String.valueOf(employee.getSimpleDate())
                };
                writer.writeNext(data);
            }
        }
    }

    // Export Orders
    public void exportOrdersToCSV(List<Order> orders, File destination) throws IOException {
        try (CSVWriter writer = new CSVWriter(new FileWriter(destination))) {
            String[] header = { "Order ID", "Order Date", "Car ID", "Customer ID", "Employee ID", "Quantity",
                    "Total Price" };
            writer.writeNext(header);

            for (Order order : orders) {
                String[] data = {
                        String.valueOf(order.getOrderID()),
                        String.valueOf(order.getSimpleDate()),
                        String.valueOf(order.getCarID()),
                        String.valueOf(order.getCustomerID()),
                        String.valueOf(order.getEmployeeID()),
                        String.valueOf(order.getQuantity()),
                        String.valueOf(order.getTotalPrice())
                };
                writer.writeNext(data);
            }
        }
    }

    // Export Payments
    public void exportPaymentsToCSV(List<Payment> payments, File destination) throws IOException {
        try (CSVWriter writer = new CSVWriter(new FileWriter(destination))) {
            String[] header = { "Payment ID", "Payment Date", "Payment Method", "Amount", "Order ID" };
            writer.writeNext(header);

            for (Payment payment : payments) {
                String[] data = {
                        String.valueOf(payment.getPaymentID()),
                        String.valueOf(payment.getSimpleDate()),
                        payment.getPaymentMethod(),
                        String.valueOf(payment.getAmount()),
                        String.valueOf(payment.getOrderID())
                };
                writer.writeNext(data);
            }
        }
    }

    // Export Services
    public void exportServicesToCSV(List<Service> services, File destination) throws IOException {
        try (CSVWriter writer = new CSVWriter(new FileWriter(destination))) {
            String[] header = { "Service ID", "Car ID", "Customer ID", "Service Date", "Service Description", "Cost" };
            writer.writeNext(header);

            for (Service service : services) {
                String[] data = {
                        String.valueOf(service.getServiceID()),
                        String.valueOf(service.getCarID()),
                        String.valueOf(service.getCustomerID()),
                        String.valueOf(service.getServiceDate()),
                        service.getServiceDescription(),
                        String.valueOf(service.getCost())
                };
                writer.writeNext(data);
            }
        }
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\util\DateUtil.java
```
package com.example.util;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

public class DateUtil {

    // Define accepted date formats
    private static final String[] DATE_PATTERNS = {
            "dd-MM-yyyy",
            "dd MM yyyy",
            "dd/MM/yyyy",
            "dd.MM.yyyy",
            "yyyy-MM-dd" // ISO format
            // Add more patterns if needed
    };

    public static Date parseDateFlexible(String dateStr) throws ParseException {
        for (String pattern : DATE_PATTERNS) {
            try {
                SimpleDateFormat sdf = new SimpleDateFormat(pattern);
                sdf.setLenient(false); // Strict parsing
                Date date = sdf.parse(dateStr);

                // Zero out the time components
                Calendar cal = Calendar.getInstance();
                cal.setTime(date);
                cal.set(Calendar.HOUR_OF_DAY, 0);
                cal.set(Calendar.MINUTE, 0);
                cal.set(Calendar.SECOND, 0);
                cal.set(Calendar.MILLISECOND, 0);

                return cal.getTime();
            } catch (ParseException e) {
                // Continue to the next pattern
            }
        }
        // If none of the patterns match, throw ParseException
        throw new ParseException("Invalid date format: " + dateStr, 0);
    }

}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\session\SessionManager.java
```
package com.example.session;

import com.example.model.UserAccount;

public class SessionManager {
    private static SessionManager instance;
    private UserAccount currentUser;

    private SessionManager() {
    }

    public static synchronized SessionManager getInstance() {
        if (instance == null) {
            instance = new SessionManager();
        }
        return instance;
    }

    public void setCurrentUser(UserAccount user) {
        this.currentUser = user;
    }

    public UserAccount getCurrentUser() {
        return currentUser;
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\service\ServiceService.java
```
package com.example.service;

import com.example.dao.ServiceDAO;
import com.example.model.Service;
import com.example.util.ExportUtil;

import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;

public class ServiceService {
    private ServiceDAO serviceDAO;
    private ExportUtil exportUtil;

    public ServiceService() {
        this.serviceDAO = new ServiceDAO();
        this.exportUtil = new ExportUtil();
    }

    public Map<String, String> getColumnNamesAndTypes(String tableName) throws SQLException {
        return serviceDAO.getColumnNamesAndTypes(tableName);
    }

    public List<Service> getAllServices() throws SQLException {
        return serviceDAO.getAllServices();
    }

    public boolean updateService(Service service) throws SQLException {
        return serviceDAO.updateService(service);
    }

    public boolean insertService(Service service) throws SQLException {
        return serviceDAO.insertService(service);
    }

    public boolean deleteService(int serviceID) throws SQLException {
        return serviceDAO.deleteService(serviceID);
    }

    public void exportServicesToCSV(List<Service> services, File destination) throws IOException {
        exportUtil.exportServicesToCSV(services, destination);
    }

    // Additional methods to retrieve related data if needed
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\service\ReportService.java
```
package com.example.service;

import com.example.dao.ReportDAO;
import com.example.dao.CarDAO;

import java.sql.SQLException;
import java.util.List;
import java.util.Map;

/**
 * Service layer for handling report-related operations.
 */
public class ReportService {
    private ReportDAO reportDAO;
    private CarDAO carDAO;

    public ReportService() {
        this.reportDAO = new ReportDAO();
        this.carDAO = new CarDAO();
    }

    /**
     * Retrieves the frequency of each service type across all cars or a specific
     * model.
     *
     * @param model The car model to filter services. If null or empty, fetches for
     *              all models.
     * @return A map with service types as keys and their frequencies as values.
     * @throws SQLException If a database access error occurs.
     */
    public Map<String, Integer> getServiceFrequency(String model) throws SQLException {
        return reportDAO.getServiceFrequency(model);
    }

    /**
     * Retrieves the revenue generated from each service type, aggregated monthly or
     * quarterly for a specific year.
     *
     * @param year        The year to filter revenue data.
     * @param aggregation "MONTH" or "QUARTER" to specify aggregation level.
     * @return A map where the key is the service type and the value is another map
     *         of time period to revenue.
     * @throws SQLException If a database access error occurs.
     */
    public Map<String, Map<String, Double>> getRevenueByServiceType(int year, String aggregation) throws SQLException {
        return reportDAO.getRevenueByServiceType(year, aggregation);
    }

    /**
     * Retrieves all distinct car models from the database.
     *
     * @return A list of car models.
     * @throws SQLException If a database access error occurs.
     */
    public List<String> getAllCarModels() throws SQLException {
        return carDAO.getAllCarModels();
    }

    /**
     * Retrieves distinct years from the services data.
     *
     * @return A list of years.
     * @throws SQLException If a database access error occurs.
     */
    public List<Integer> getDistinctServiceYears() throws SQLException {
        return reportDAO.getDistinctServiceYears();
    }

    /**
     * Closes resources if necessary.
     */
    public void close() {
        // Implement resource cleanup if needed
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\service\PaymentService.java
```
package com.example.service;

import com.example.dao.PaymentDAO;
import com.example.model.Payment;
import com.example.util.ExportUtil;

import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;

public class PaymentService {
    private PaymentDAO paymentDAO;
    private ExportUtil exportUtil;

    public PaymentService() {
        this.paymentDAO = new PaymentDAO();
        this.exportUtil = new ExportUtil();
    }

    public Map<String, String> getColumnNamesAndTypes(String tableName) throws SQLException {
        return paymentDAO.getColumnNamesAndTypes(tableName);
    }

    public List<Payment> getAllPayments() throws SQLException {
        return paymentDAO.getAllPayments();
    }

    public boolean updatePayment(Payment payment) throws SQLException {
        return paymentDAO.updatePayment(payment);
    }

    public boolean insertPayment(Payment payment) throws SQLException {
        return paymentDAO.insertPayment(payment);
    }

    public boolean deletePayment(int paymentID) throws SQLException {
        return paymentDAO.deletePayment(paymentID);
    }

    public void exportPaymentsToCSV(List<Payment> payments, File destination) throws IOException {
        exportUtil.exportPaymentsToCSV(payments, destination);
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\service\OrderService.java
```
package com.example.service;

import com.example.dao.OrderDAO;
import com.example.model.Order;
import com.example.util.ExportUtil;

import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;

public class OrderService {
    private OrderDAO orderDAO;
    private ExportUtil exportUtil;

    public OrderService() {
        this.orderDAO = new OrderDAO();
        this.exportUtil = new ExportUtil();
    }

    public Map<String, String> getColumnNamesAndTypes(String tableName) throws SQLException {
        return orderDAO.getColumnNamesAndTypes(tableName);
    }

    public List<Order> getAllOrders() throws SQLException {
        return orderDAO.getAllOrders();
    }

    public boolean updateOrder(Order order) throws SQLException {
        return orderDAO.updateOrder(order);
    }

    public boolean insertOrder(Order order) throws SQLException {
        return orderDAO.insertOrder(order);
    }

    public boolean deleteOrder(int orderID) throws SQLException {
        return orderDAO.deleteOrder(orderID);
    }

    public void exportOrdersToCSV(List<Order> orders, File destination) throws IOException {
        exportUtil.exportOrdersToCSV(orders, destination);
    }

    public Order getOrderById(int orderID) throws SQLException {
        return orderDAO.getOrderById(orderID);
    }

    public List<Order> getOrdersByEmployeeId(int employeeID) throws SQLException {
        return orderDAO.getOrdersByEmployeeId(employeeID);
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\service\HomeService.java
```
package com.example.service;

import com.example.dao.HomeDAO;
import com.example.model.home.HomeStats;
import com.example.model.home.LatestOrder;
import com.example.model.home.LatestService;

import java.sql.SQLException;
import java.util.List;

public class HomeService {
    private HomeDAO homeDAO;

    public HomeService() {
        this.homeDAO = new HomeDAO();
    }

    public HomeStats getHomeStats() throws SQLException {
        return homeDAO.getHomeStats();
    }

    public List<LatestOrder> getLatestOrders() throws SQLException {
        return homeDAO.getLatestOrders();
    }

    public List<LatestService> getLatestServices() throws SQLException {
        return homeDAO.getLatestServices();
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\service\EmployeeService.java
```
package com.example.service;

import com.example.dao.EmployeeDAO;
import com.example.model.Employee;
import com.example.util.ExportUtil;

import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;

public class EmployeeService {
    private EmployeeDAO employeeDAO;
    private ExportUtil exportUtil;

    public EmployeeService() {
        this.employeeDAO = new EmployeeDAO();
        this.exportUtil = new ExportUtil();
    }

    /**
     * Retrieves column names and their data types for the employees table.
     *
     * @return A map of column names to their data types.
     * @throws SQLException If a database access error occurs.
     */
    public Map<String, String> getColumnNamesAndTypes() throws SQLException {
        return employeeDAO.getColumnNamesAndTypes("employees");
    }

    /**
     * Retrieves all employees from the database.
     *
     * @return List of all Employee objects.
     * @throws SQLException If a database access error occurs.
     */
    public List<Employee> getAllEmployees() throws SQLException {
        return employeeDAO.getAllEmployees();
    }

    /**
     * Updates an existing employee in the database.
     *
     * @param employee The Employee object with updated information.
     * @return True if the update was successful; otherwise, false.
     * @throws SQLException If a database access error occurs.
     */
    public boolean updateEmployee(Employee employee) throws SQLException {
        return employeeDAO.updateEmployee(employee);
    }

    /**
     * Inserts a new employee into the database.
     *
     * @param employee The Employee object to insert.
     * @return True if the insertion was successful; otherwise, false.
     * @throws SQLException If a database access error occurs.
     */
    public boolean insertEmployee(Employee employee) throws SQLException {
        return employeeDAO.insertEmployee(employee);
    }

    /**
     * Deletes an employee from the database by EmployeeID.
     *
     * @param employeeID The ID of the employee to delete.
     * @return True if the deletion was successful; otherwise, false.
     * @throws SQLException If a database access error occurs.
     */
    public boolean deleteEmployee(int employeeID) throws SQLException {
        return employeeDAO.deleteEmployee(employeeID);
    }

    /**
     * Exports a list of employees to a CSV file.
     *
     * @param employees   The list of employees to export.
     * @param destination The destination file to save the CSV.
     * @throws IOException If an I/O error occurs.
     */
    public void exportEmployeesToCSV(List<Employee> employees, File destination) throws IOException {
        exportUtil.exportEmployeesToCSV(employees, destination);
    }

    public Employee getEmployeeById(int employeeID) throws SQLException {
        return employeeDAO.getEmployeeById(employeeID);
    }
    
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\service\CustomerService.java
```
package com.example.service;

import com.example.dao.CustomerDAO;
import com.example.model.Customer;
import com.example.model.Payment;
import com.example.model.Service;
import com.example.util.ExportUtil;

import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;

public class CustomerService {
    private CustomerDAO customerDAO;
    private ExportUtil exportUtil;

    public CustomerService() {
        this.customerDAO = new CustomerDAO();
        this.exportUtil = new ExportUtil();
    }

    public Map<String, String> getColumnNamesAndTypes(String tableName) throws SQLException {
        return customerDAO.getColumnNamesAndTypes(tableName);
    }

    public List<Customer> getAllCustomers() throws SQLException {
        return customerDAO.getAllCustomers();
    }

    public boolean updateCustomer(Customer customer) throws SQLException {
        return customerDAO.updateCustomer(customer);
    }

    public boolean insertCustomer(Customer customer) throws SQLException {
        return customerDAO.insertCustomer(customer);
    }

    public boolean deleteCustomer(int customerID) throws SQLException {
        return customerDAO.deleteCustomer(customerID);
    }

    public List<Service> getServicesForCustomer(int customerID) throws SQLException {
        return customerDAO.getServicesForCustomer(customerID);
    }

    public List<Payment> getPaymentsForCustomer(int customerID) throws SQLException {
        return customerDAO.getPaymentsForCustomer(customerID);
    }

    public void exportCustomersToCSV(List<Customer> customers, File destination) throws IOException {
        exportUtil.exportCustomersToCSV(customers, destination);
    }

    public Customer getCustomerById(int customerID) throws SQLException {
        return customerDAO.getCustomerById(customerID);
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\service\CarService.java
```
//abstract view of dao just needed methods
package com.example.service;

import com.example.dao.CarDAO;
import com.example.model.Car;
import com.example.model.CarServiceRecord;
import com.example.util.ExportUtil;

import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;

public class CarService {
    private CarDAO carDAO;
    private ExportUtil exportUtil;

    public CarService() {
        this.carDAO = new CarDAO();
        this.exportUtil = new ExportUtil();
    }

    public Map<String, String> getColumnNamesAndTypes(String tableName) throws SQLException {
        return carDAO.getColumnNamesAndTypes(tableName);
    }

    public List<Car> getAllCars() throws SQLException {
        return carDAO.getAllCars();
    }

    public boolean updateCar(Car car) throws SQLException {
        return carDAO.updateCar(car);
    }

    public boolean insertCar(Car car) throws SQLException {
        return carDAO.insertCar(car);
    }

    public boolean deleteCar(int carID) throws SQLException {
        return carDAO.deleteCar(carID);
    }

    // from util
    public void exportCarsToCSV(List<Car> cars, File destination) throws IOException {
        exportUtil.exportCarsToCSV(cars, destination);
    }

    public List<CarServiceRecord> getServicesForCar(int carID) throws SQLException {
        return carDAO.getServicesForCar(carID);
    }

    public Car getCarById(int carID) throws SQLException {
        return carDAO.getCarById(carID);
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\model\UserAccount.java
```
package com.example.model;

public class UserAccount {
    private String username;
    private String password;

    // Constructor
    public UserAccount(String username, String password) {
        this.username = username;
        this.password = password;
    }

    // Getters (and setters if needed)
    public String getUsername() {
        return username;
    }

    public String getPassword() {
        return password;
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\model\Service.java
```
package com.example.model;

import javafx.beans.property.*;

import java.text.SimpleDateFormat;
import java.util.Date;

public class Service {
    private final IntegerProperty serviceID;
    private final IntegerProperty carID;
    private final IntegerProperty customerID;
    private final ObjectProperty<Date> serviceDate;
    private final StringProperty serviceDescription;
    private final DoubleProperty cost;

    public Service(int serviceID, int carID, int customerID, Date serviceDate, String serviceDescription, double cost) {
        this.serviceID = new SimpleIntegerProperty(serviceID);
        this.carID = new SimpleIntegerProperty(carID);
        this.customerID = new SimpleIntegerProperty(customerID);
        this.serviceDate = new SimpleObjectProperty<>(serviceDate);
        this.serviceDescription = new SimpleStringProperty(serviceDescription);
        this.cost = new SimpleDoubleProperty(cost);
    }

    // Getters and Setters

    public int getServiceID() {
        return serviceID.get();
    }

    public void setServiceID(int serviceID) {
        this.serviceID.set(serviceID);
    }

    public IntegerProperty serviceIDProperty() {
        return serviceID;
    }

    public int getCarID() {
        return carID.get();
    }

    public void setCarID(int carID) {
        this.carID.set(carID);
    }

    public IntegerProperty carIDProperty() {
        return carID;
    }

    public int getCustomerID() {
        return customerID.get();
    }

    public void setCustomerID(int customerID) {
        this.customerID.set(customerID);
    }

    public IntegerProperty customerIDProperty() {
        return customerID;
    }

    public Date getServiceDate() {
        return serviceDate.get();
    }

    public String getSimpleDate() {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        return sdf.format(serviceDate.get());
    }

    public void setServiceDate(Date serviceDate) {
        this.serviceDate.set(serviceDate);
    }

    public ObjectProperty<Date> serviceDateProperty() {
        return serviceDate;
    }

    public String getServiceDescription() {
        return serviceDescription.get();
    }

    public void setServiceDescription(String serviceDescription) {
        this.serviceDescription.set(serviceDescription);
    }

    public StringProperty serviceDescriptionProperty() {
        return serviceDescription;
    }

    public double getCost() {
        return cost.get();
    }

    public void setCost(double cost) {
        this.cost.set(cost);
    }

    public DoubleProperty costProperty() {
        return cost;
    }

    // Method to get field value by column name
    public String getFieldValue(String columnName) {
        switch (columnName.toLowerCase()) {
            case "serviceid":
                return String.valueOf(getServiceID());
            case "carid":
                return String.valueOf(getCarID());
            case "customerid":
                return String.valueOf(getCustomerID());
            case "servicedate":
                return getServiceDate().toString();
            case "servicedescription":
                return getServiceDescription();
            case "cost":
                return String.valueOf(getCost());
            default:
                throw new IllegalArgumentException("Unknown column: " + columnName);
        }
    }

    @Override
    public String toString() {
        return "Service{" +
                "serviceID=" + getServiceID() +
                ", carID=" + getCarID() +
                ", customerID=" + getCustomerID() +
                ", serviceDate=" + getServiceDate() +
                ", serviceDescription='" + getServiceDescription() + '\'' +
                ", cost=" + getCost() +
                '}';
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\model\Payment.java
```
package com.example.model;

import javafx.beans.property.*;

import java.text.SimpleDateFormat;
import java.util.Date;

public class Payment {
    private final IntegerProperty paymentID;
    private final ObjectProperty<Date> paymentDate;
    private final StringProperty paymentMethod;
    private final DoubleProperty amount;
    private final IntegerProperty orderID;

    public Payment(int paymentID, Date paymentDate, String paymentMethod, double amount, int orderID) {
        this.paymentID = new SimpleIntegerProperty(paymentID);
        this.paymentDate = new SimpleObjectProperty<>(paymentDate);
        this.paymentMethod = new SimpleStringProperty(paymentMethod);
        this.amount = new SimpleDoubleProperty(amount);
        this.orderID = new SimpleIntegerProperty(orderID);
    }

    // Getters and Setters

    public int getPaymentID() {
        return paymentID.get();
    }

    public void setPaymentID(int paymentID) {
        this.paymentID.set(paymentID);
    }

    public IntegerProperty paymentIDProperty() {
        return paymentID;
    }

    public Date getPaymentDate() {
        return paymentDate.get();
    }

    public void setPaymentDate(Date paymentDate) {
        this.paymentDate.set(paymentDate);
    }

    public ObjectProperty<Date> paymentDateProperty() {
        return paymentDate;
    }

    public String getSimpleDate() {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        return sdf.format(paymentDate.get());
    }

    public String getPaymentMethod() {
        return paymentMethod.get();
    }

    public void setPaymentMethod(String paymentMethod) {
        this.paymentMethod.set(paymentMethod);
    }

    public StringProperty paymentMethodProperty() {
        return paymentMethod;
    }

    public double getAmount() {
        return amount.get();
    }

    public void setAmount(double amount) {
        this.amount.set(amount);
    }

    public DoubleProperty amountProperty() {
        return amount;
    }

    public int getOrderID() {
        return orderID.get();
    }

    public void setOrderID(int orderID) {
        this.orderID.set(orderID);
    }

    public IntegerProperty orderIDProperty() {
        return orderID;
    }

    // Method to get field value by column name
    public String getFieldValue(String columnName) {
        switch (columnName.toLowerCase()) {
            case "paymentid":
                return String.valueOf(getPaymentID());
            case "paymentdate":
                return getSimpleDate().toString();
            case "paymentmethod":
                return getPaymentMethod();
            case "amount":
                return String.valueOf(getAmount());
            case "orderid":
                return String.valueOf(getOrderID());
            default:
                throw new IllegalArgumentException("Unknown column: " + columnName);
        }
    }

    @Override
    public String toString() {
        return "Payment{" +
                "paymentID=" + getPaymentID() +
                ", paymentDate=" + getSimpleDate() +
                ", paymentMethod='" + getPaymentMethod() + '\'' +
                ", amount=" + getAmount() +
                ", orderID=" + getOrderID() +
                '}';
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\model\Order.java
```
package com.example.model;

import javafx.beans.property.*;

import java.text.SimpleDateFormat;
import java.util.Date;

public class Order {
    private final IntegerProperty orderID;
    private final ObjectProperty<Date> orderDate;
    private final IntegerProperty carID;
    private final IntegerProperty customerID;
    private final IntegerProperty employeeID;
    private final IntegerProperty quantity;
    private final DoubleProperty totalPrice;

    public Order(int orderID, Date orderDate, int carID, int customerID, int employeeID, int quantity,
            double totalPrice) {
        this.orderID = new SimpleIntegerProperty(orderID);
        this.orderDate = new SimpleObjectProperty<>(orderDate);
        this.carID = new SimpleIntegerProperty(carID);
        this.customerID = new SimpleIntegerProperty(customerID);
        this.employeeID = new SimpleIntegerProperty(employeeID);
        this.quantity = new SimpleIntegerProperty(quantity);
        this.totalPrice = new SimpleDoubleProperty(totalPrice);
    }

    // Getters and Setters

    public int getOrderID() {
        return orderID.get();
    }

    public void setOrderID(int orderID) {
        this.orderID.set(orderID);
    }

    public IntegerProperty orderIDProperty() {
        return orderID;
    }

    public Date getOrderDate() {
        return orderDate.get();
    }

    public String getSimpleDate() {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        return sdf.format(orderDate.get());
    }

    public void setOrderDate(Date orderDate) {
        this.orderDate.set(orderDate);
    }

    public ObjectProperty<Date> orderDateProperty() {
        return orderDate;
    }

    public int getCarID() {
        return carID.get();
    }

    public void setCarID(int carID) {
        this.carID.set(carID);
    }

    public IntegerProperty carIDProperty() {
        return carID;
    }

    public int getCustomerID() {
        return customerID.get();
    }

    public void setCustomerID(int customerID) {
        this.customerID.set(customerID);
    }

    public IntegerProperty customerIDProperty() {
        return customerID;
    }

    public int getEmployeeID() {
        return employeeID.get();
    }

    public void setEmployeeID(int employeeID) {
        this.employeeID.set(employeeID);
    }

    public IntegerProperty employeeIDProperty() {
        return employeeID;
    }

    public int getQuantity() {
        return quantity.get();
    }

    public void setQuantity(int quantity) {
        this.quantity.set(quantity);
    }

    public IntegerProperty quantityProperty() {
        return quantity;
    }

    public double getTotalPrice() {
        return totalPrice.get();
    }

    public void setTotalPrice(double totalPrice) {
        this.totalPrice.set(totalPrice);
    }

    public DoubleProperty totalPriceProperty() {
        return totalPrice;
    }

    // Method to get field value by column name
    public String getFieldValue(String columnName) {
        switch (columnName.toLowerCase()) {
            case "orderid":
                return String.valueOf(getOrderID());
            case "orderdate":
                return getSimpleDate();
            case "carid":
                return String.valueOf(getCarID());
            case "customerid":
                return String.valueOf(getCustomerID());
            case "employeeid":
                return String.valueOf(getEmployeeID());
            case "quantity":
                return String.valueOf(getQuantity());
            case "totalprice":
                return String.valueOf(getTotalPrice());
            default:
                throw new IllegalArgumentException("Unknown column: " + columnName);
        }
    }

    @Override
    public String toString() {
        return "Order{" +
                "orderID=" + getOrderID() +
                ", orderDate=" + getSimpleDate() +
                ", carID=" + getCarID() +
                ", customerID=" + getCustomerID() +
                ", employeeID=" + getEmployeeID() +
                ", quantity=" + getQuantity() +
                ", totalPrice=" + getTotalPrice() +
                '}';
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\model\Employee.java
```
package com.example.model;

import javafx.beans.property.*;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.text.ParseException;
import com.example.util.DateUtil;

public class Employee {
    private final IntegerProperty employeeID;
    private final StringProperty firstName;
    private final StringProperty lastName;
    private final StringProperty position;
    private final DoubleProperty salary;
    private final ObjectProperty<Date> hireDate;

    public Employee(int employeeID, String firstName, String lastName, String position, double salary, Date hireDate) {
        this.employeeID = new SimpleIntegerProperty(employeeID);
        this.firstName = new SimpleStringProperty(firstName);
        this.lastName = new SimpleStringProperty(lastName);
        this.position = new SimpleStringProperty(position);
        this.salary = new SimpleDoubleProperty(salary);
        this.hireDate = new SimpleObjectProperty<>(hireDate);
    }

    // Getters and Setters

    public int getEmployeeID() {
        return employeeID.get();
    }

    public void setEmployeeID(int employeeID) {
        this.employeeID.set(employeeID);
    }

    public IntegerProperty employeeIDProperty() {
        return employeeID;
    }

    public String getFirstName() {
        return firstName.get();
    }

    public void setFirstName(String firstName) {
        this.firstName.set(firstName);
    }

    public StringProperty firstNameProperty() {
        return firstName;
    }

    public String getLastName() {
        return lastName.get();
    }

    public void setLastName(String lastName) {
        this.lastName.set(lastName);
    }

    public StringProperty lastNameProperty() {
        return lastName;
    }

    public String getPosition() {
        return position.get();
    }

    public void setPosition(String position) {
        this.position.set(position);
    }

    public StringProperty positionProperty() {
        return position;
    }

    public double getSalary() {
        return salary.get();
    }

    public void setSalary(double salary) {
        this.salary.set(salary);
    }

    public DoubleProperty salaryProperty() {
        return salary;
    }

    public Date getHireDate() {
        return hireDate.get();
    }

    public void setHireDate(Date hireDate) {
        this.hireDate.set(hireDate);
    }

    public ObjectProperty<Date> hireDateProperty() {
        return hireDate;
    }

    /**
     * Retrieves the hire date as a formatted String.
     *
     * @return The hire date in "dd-MM-yyyy" format, or an empty string if hireDate
     *         is null.
     */
    public String getHireDateString() {
        if (getHireDate() == null) {
            return "";
        }
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy"); // Default format
        return sdf.format(getHireDate());
    }

    /**
     * Sets the hire date from a String, parsing it using multiple date formats.
     *
     * @param dateStr The date string entered by the user.
     * @throws ParseException If the date string doesn't match any accepted formats.
     */
    public void setHireDateFromString(String dateStr) throws ParseException {
        Date parsedDate = DateUtil.parseDateFlexible(dateStr);
        setHireDate(parsedDate);
    }

    public String getSimpleDate() {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        return sdf.format(hireDate.get());
    }

    // Method to get field value by column name
    public String getFieldValue(String columnName) {
        switch (columnName.toLowerCase()) {
            case "employeeid":
                return String.valueOf(getEmployeeID());
            case "firstname":
                return getFirstName();
            case "lastname":
                return getLastName();
            case "position":
                return getPosition();
            case "salary":
                return String.valueOf(getSalary());
            case "hiredate":
                return getHireDateString();
            default:
                throw new IllegalArgumentException("Unknown column: " + columnName);
        }
    }

    @Override
    public String toString() {
        return "Employee{" +
                "employeeID=" + getEmployeeID() +
                ", firstName='" + getFirstName() + '\'' +
                ", lastName='" + getLastName() + '\'' +
                ", position='" + getPosition() + '\'' +
                ", salary=" + getSalary() +
                ", hireDate=" + getHireDateString() +
                '}';
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\model\Customer.java
```
package com.example.model;

import javafx.beans.property.*;

public class Customer {
    private final IntegerProperty customerID;
    private final StringProperty firstName;
    private final StringProperty lastName;
    private final StringProperty email;
    private final StringProperty phone;
    private final StringProperty address;
    private final StringProperty city;
    private final StringProperty state;
    private final StringProperty zipCode;

    public Customer(int customerID, String firstName, String lastName, String email, String phone,
            String address, String city, String state, String zipCode) {
        this.customerID = new SimpleIntegerProperty(customerID);
        this.firstName = new SimpleStringProperty(firstName);
        this.lastName = new SimpleStringProperty(lastName);
        this.email = new SimpleStringProperty(email);
        this.phone = new SimpleStringProperty(phone);
        this.address = new SimpleStringProperty(address);
        this.city = new SimpleStringProperty(city);
        this.state = new SimpleStringProperty(state);
        this.zipCode = new SimpleStringProperty(zipCode);
    }

    // Getters and Setters

    public int getCustomerID() {
        return customerID.get();
    }

    public void setCustomerID(int customerID) {
        this.customerID.set(customerID);
    }

    public IntegerProperty customerIDProperty() {
        return customerID;
    }

    public String getFirstName() {
        return firstName.get();
    }

    public void setFirstName(String firstName) {
        this.firstName.set(firstName);
    }

    public StringProperty firstNameProperty() {
        return firstName;
    }

    public String getLastName() {
        return lastName.get();
    }

    public void setLastName(String lastName) {
        this.lastName.set(lastName);
    }

    public StringProperty lastNameProperty() {
        return lastName;
    }

    public String getEmail() {
        return email.get();
    }

    public void setEmail(String email) {
        this.email.set(email);
    }

    public StringProperty emailProperty() {
        return email;
    }

    public String getPhone() {
        return phone.get();
    }

    public void setPhone(String phone) {
        this.phone.set(phone);
    }

    public StringProperty phoneProperty() {
        return phone;
    }

    public String getAddress() {
        return address.get();
    }

    public void setAddress(String address) {
        this.address.set(address);
    }

    public StringProperty addressProperty() {
        return address;
    }

    public String getCity() {
        return city.get();
    }

    public void setCity(String city) {
        this.city.set(city);
    }

    public StringProperty cityProperty() {
        return city;
    }

    public String getState() {
        return state.get();
    }

    public void setState(String state) {
        this.state.set(state);
    }

    public StringProperty stateProperty() {
        return state;
    }

    public String getZipCode() {
        return zipCode.get();
    }

    public void setZipCode(String zipCode) {
        this.zipCode.set(zipCode);
    }

    public StringProperty zipCodeProperty() {
        return zipCode;
    }

    // Method to get field value by column name
    public String getFieldValue(String columnName) {
        switch (columnName.toLowerCase()) {
            case "customerid":
                return String.valueOf(getCustomerID());
            case "firstname":
                return getFirstName();
            case "lastname":
                return getLastName();
            case "email":
                return getEmail();
            case "phone":
                return getPhone();
            case "address":
                return getAddress();
            case "city":
                return getCity();
            case "state":
                return getState();
            case "zipcode":
                return getZipCode();
            default:
                throw new IllegalArgumentException("Unknown column: " + columnName);
        }
    }

    @Override
    public String toString() {
        return "Customer{" +
                "customerID=" + getCustomerID() +
                ", firstName='" + getFirstName() + '\'' +
                ", lastName='" + getLastName() + '\'' +
                ", email='" + getEmail() + '\'' +
                ", phone='" + getPhone() + '\'' +
                ", address='" + getAddress() + '\'' +
                ", city='" + getCity() + '\'' +
                ", state='" + getState() + '\'' +
                ", zipCode='" + getZipCode() + '\'' +
                '}';
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\model\CarServiceRecord.java
```
package com.example.model;

import javafx.beans.property.*;
import java.time.LocalDate;

public class CarServiceRecord {
    private final IntegerProperty serviceID;
    private final ObjectProperty<LocalDate> serviceDate;
    private final StringProperty description;
    private final DoubleProperty cost;

    public CarServiceRecord(int serviceID, LocalDate serviceDate, String description, double cost) {
        this.serviceID = new SimpleIntegerProperty(serviceID);
        this.serviceDate = new SimpleObjectProperty<>(serviceDate);
        this.description = new SimpleStringProperty(description);
        this.cost = new SimpleDoubleProperty(cost);
    }

    public int getServiceID() {
        return serviceID.get();
    }

    public IntegerProperty serviceIDProperty() {
        return serviceID;
    }

    public LocalDate getServiceDate() {
        return serviceDate.get();
    }

    public ObjectProperty<LocalDate> serviceDateProperty() {
        return serviceDate;
    }

    public String getDescription() {
        return description.get();
    }

    public StringProperty descriptionProperty() {
        return description;
    }

    public double getCost() {
        return cost.get();
    }

    public DoubleProperty costProperty() {
        return cost;
    }

    @Override
    public String toString() {
        return "CarServiceRecord{" +
                "serviceID=" + getServiceID() +
                ", serviceDate=" + getServiceDate() +
                ", description='" + getDescription() + '\'' +
                ", cost=" + getCost() +
                '}';
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\model\Car.java
```
package com.example.model;

import javafx.beans.property.*;

public class Car {
    private final IntegerProperty carID;
    private final StringProperty make;
    private final StringProperty model;
    private final IntegerProperty year;
    private final DoubleProperty price;
    private final IntegerProperty stock;
    private final StringProperty vin;

    public Car() {
        this(0, null, null, 0, 0, 0, null);
    }

    public Car(int carID, String make, String model, int year, double price, int stock, String vin) {
        this.carID = new SimpleIntegerProperty(carID);
        this.make = new SimpleStringProperty(make);
        this.model = new SimpleStringProperty(model);
        this.year = new SimpleIntegerProperty(year);
        this.price = new SimpleDoubleProperty(price);
        this.stock = new SimpleIntegerProperty(stock);
        this.vin = new SimpleStringProperty(vin);
    }

    public int getCarID() {
        return carID.get();
    }

    public void setCarID(int value) {
        carID.set(value);
    }

    public IntegerProperty carIDProperty() {
        return carID;
    }

    public String getMake() {
        return make.get();
    }

    public void setMake(String value) {
        make.set(value);
    }

    public StringProperty makeProperty() {
        return make;
    }

    public String getModel() {
        return model.get();
    }

    public void setModel(String value) {
        model.set(value);
    }

    public StringProperty modelProperty() {
        return model;
    }

    public int getYear() {
        return year.get();
    }

    public void setYear(int value) {
        year.set(value);
    }

    public IntegerProperty yearProperty() {
        return year;
    }

    public double getPrice() {
        return price.get();
    }

    public void setPrice(double value) {
        price.set(value);
    }

    public DoubleProperty priceProperty() {
        return price;
    }

    public int getStock() {
        return stock.get();
    }

    public void setStock(int value) {
        stock.set(value);
    }

    public IntegerProperty stockProperty() {
        return stock;
    }

    public String getVin() {
        return vin.get();
    }

    public void setVin(String value) {
        vin.set(value);
    }

    public StringProperty vinProperty() {
        return vin;
    }

    /*
     * returns the value of a specified field as a string based on the column name
     * used in filtering in searches and in export
     * if i search in make searchbox for "ford", the method should return the value
     * of the make property
     */
    public String getFieldValue(String columnName) {
        switch (columnName.toLowerCase()) {
            case "carid":
                return String.valueOf(getCarID());
            case "make":
                return getMake();
            case "model":
                return getModel();
            case "year":
                return String.valueOf(getYear());
            case "price":
                return String.valueOf(getPrice());
            case "stock":
                return String.valueOf(getStock());
            case "vin":
                return getVin();
            default:
                throw new IllegalArgumentException("Unknown column: " + columnName);
        }
    }

    @Override
    public String toString() {
        return "Car{" +
                "carID=" + getCarID() +
                ", make='" + getMake() + '\'' +
                ", model='" + getModel() + '\'' +
                ", year=" + getYear() +
                ", price=" + getPrice() +
                ", stock=" + getStock() +
                ", vin='" + getVin() + '\'' +
                '}';
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\model\home\LatestService.java
```
package com.example.model.home;

import java.time.LocalDate;

public class LatestService {
    private String carName;
    private String customerName;
    private double cost;
    private String serviceDescription;
    private LocalDate serviceDate;
    private final String imageName;

    public LatestService(String carName, String customerName, double cost, String serviceDescription,
            LocalDate serviceDate) {
        this.carName = carName;
        this.customerName = customerName;
        this.cost = cost;
        this.serviceDescription = serviceDescription;
        this.serviceDate = serviceDate;

        // Assign a random image once.
        int randomNumber = (int) (Math.random() * 4) + 1;
        this.imageName = "car" + randomNumber + "-small.png";
    }

    public String getCarName() {
        return carName;
    }

    public String getCustomerName() {
        return customerName;
    }

    public double getCost() {
        return cost;
    }

    public String getServiceDescription() {
        return serviceDescription;
    }

    public LocalDate getServiceDate() {
        return serviceDate;
    }

    public String getImageName() {
        return imageName;
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\model\home\LatestOrder.java
```
package com.example.model.home;

import java.time.LocalDate;

public class LatestOrder {
    private String carName;
    private String customerName;
    private LocalDate orderDate;
    private double totalPrice;
    private String imageName;

    public LatestOrder(String carName, String customerName, LocalDate orderDate, double totalPrice) {
        this.carName = carName;
        this.customerName = customerName;
        this.orderDate = orderDate;
        this.totalPrice = totalPrice;

        // Assign a random image here, once.
        int randomNumber = (int) (Math.random() * 4) + 1;
        this.imageName = "car" + randomNumber + "-l.png";
    }

    public String getCarName() {
        return carName;
    }

    public String getCustomerName() {
        return customerName;
    }

    public LocalDate getOrderDate() {
        return orderDate;
    }

    public double getTotalPrice() {
        return totalPrice;
    }

    public String getImageName() {
        return imageName;
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\model\home\HomeStats.java
```
package com.example.model.home;

public class HomeStats {
    private int totalCars;
    private int totalCustomers;
    private int totalOrders;
    private int totalEmployees;

    public HomeStats(int totalCars, int totalCustomers, int totalOrders, int totalEmployees) {
        this.totalCars = totalCars;
        this.totalCustomers = totalCustomers;
        this.totalOrders = totalOrders;
        this.totalEmployees = totalEmployees;
    }

    public int getTotalCars() {
        return totalCars;
    }

    public int getTotalCustomers() {
        return totalCustomers;
    }

    public int getTotalOrders() {
        return totalOrders;
    }

    public int getTotalEmployees() {
        return totalEmployees;
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\dao\UserDAO.java
```
package com.example.dao;

import java.sql.ResultSet;
import java.sql.SQLException;

import com.example.model.UserAccount;

public class UserDAO extends AbstractDAO<UserAccount> {

    @Override
    protected UserAccount mapRowToObject(ResultSet resultSet) throws SQLException {
        return new UserAccount(
                resultSet.getString("username"),
                resultSet.getString("password"));
    }

    public UserAccount getUserByUsernameAndPassword(String username, String password) {
        String query = "SELECT * FROM user_account WHERE username = ? AND password = ?";
        return getOne(query, username, password);
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\dao\ServiceDAO.java
```
package com.example.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.example.model.Service;

public class ServiceDAO extends AbstractDAO<Service> {

    @Override
    protected Service mapRowToObject(ResultSet resultSet) throws Exception {
        return new Service(
                resultSet.getInt("ServiceID"),
                resultSet.getInt("CarID"),
                resultSet.getInt("CustomerID"),
                resultSet.getDate("ServiceDate"),
                resultSet.getString("ServiceDescription"),
                resultSet.getDouble("Cost"));
    }

    public List<Service> getAllServices() {
        return getAll("SELECT * FROM services");
    }

    public boolean updateService(Service service) throws SQLException {
        String sql = "UPDATE services SET CarID = ?, CustomerID = ?, ServiceDate = ?, ServiceDescription = ?, Cost = ? WHERE ServiceID = ?";
        try (Connection connection = DatabaseUtil.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql)) {

            statement.setInt(1, service.getCarID());
            statement.setInt(2, service.getCustomerID());
            statement.setDate(3, new java.sql.Date(service.getServiceDate().getTime()));
            statement.setString(4, service.getServiceDescription());
            statement.setDouble(5, service.getCost());
            statement.setInt(6, service.getServiceID());

            int rowsAffected = statement.executeUpdate();
            return rowsAffected > 0;
        }
    }

    public boolean insertService(Service service) throws SQLException {
        String sql = "INSERT INTO services (CarID, CustomerID, ServiceDate, ServiceDescription, Cost) VALUES (?, ?, ?, ?, ?)";
        try (Connection connection = DatabaseUtil.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql,
                        PreparedStatement.RETURN_GENERATED_KEYS)) {

            statement.setInt(1, service.getCarID());
            statement.setInt(2, service.getCustomerID());
            statement.setDate(3, new java.sql.Date(service.getServiceDate().getTime()));
            statement.setString(4, service.getServiceDescription());
            statement.setDouble(5, service.getCost());

            int rowsAffected = statement.executeUpdate();
            if (rowsAffected > 0) {
                try (ResultSet generatedKeys = statement.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        int generatedServiceID = generatedKeys.getInt(1);
                        service.setServiceID(generatedServiceID);
                    }
                }
                return true;
            }
            return false;
        }
    }

    public boolean deleteService(int serviceID) throws SQLException {
        String sql = "DELETE FROM services WHERE ServiceID = ?";
        try (Connection connection = DatabaseUtil.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql)) {

            statement.setInt(1, serviceID);
            int rowsAffected = statement.executeUpdate();
            return rowsAffected > 0;
        }
    }

    public Map<String, String> getColumnNamesAndTypes(String tableName) throws SQLException {
        String sql = "SELECT COLUMN_NAME, DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = ?";
        Map<String, String> columns = new HashMap<>();
        try (Connection connection = DatabaseUtil.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setString(1, tableName);
            ResultSet rs = statement.executeQuery();
            while (rs.next()) {
                columns.put(rs.getString("COLUMN_NAME"), rs.getString("DATA_TYPE"));
            }
        }
        return columns;
    }

    public List<String> getAllServiceIDs() throws SQLException {
        String sql = "SELECT DISTINCT ServiceID FROM services ORDER BY ServiceID ASC";
        List<String> serviceIDs = new ArrayList<>();

        try (Connection connection = DatabaseUtil.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql);
                ResultSet rs = statement.executeQuery()) {

            while (rs.next()) {
                serviceIDs.add(String.valueOf(rs.getInt("ServiceID")));
            }
        }

        return serviceIDs;
    }

    // Additional methods to retrieve related data if needed
    // For example, getCarDetails, getCustomerDetails
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\dao\ReportDAO.java
```
package com.example.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.*;

/**
 * Data Access Object for generating reports.
 */
public class ReportDAO extends AbstractDAO<Object> {

    /**
     * Retrieves the frequency of each service type across all cars or a specific
     * model.
     *
     * @param model The car model to filter services. If null or empty, fetches for
     *              all models.
     * @return A map with service types as keys and their frequencies as values.
     * @throws SQLException If a database access error occurs.
     */
    public Map<String, Integer> getServiceFrequency(String model) throws SQLException {
        String sql;
        if (model == null || model.isEmpty()) {
            sql = "SELECT ServiceDescription AS service_type, COUNT(*) AS frequency FROM services GROUP BY ServiceDescription";
        } else {
            sql = "SELECT s.ServiceDescription AS service_type, COUNT(*) AS frequency " +
                    "FROM services s " +
                    "JOIN cars c ON s.CarID = c.CarID " +
                    "WHERE c.Model = ? " +
                    "GROUP BY s.ServiceDescription";
        }

        Map<String, Integer> frequencyMap = new HashMap<>();

        try (Connection connection = DatabaseUtil.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql)) {

            if (model != null && !model.isEmpty()) {
                statement.setString(1, model);
            }

            try (ResultSet rs = statement.executeQuery()) {
                while (rs.next()) {
                    String serviceType = rs.getString("service_type");
                    int frequency = rs.getInt("frequency");
                    frequencyMap.put(serviceType, frequency);
                }
            }
        }

        return frequencyMap;
    }

    /**
     * Retrieves the revenue generated from each service type, aggregated monthly or
     * quarterly for a specific year.
     *
     * @param year        The year to filter revenue data.
     * @param aggregation "MONTH" or "QUARTER" to specify aggregation level.
     * @return A map where the key is the service type and the value is another map
     *         of time period to revenue.
     * @throws SQLException If a database access error occurs.
     */
    public Map<String, Map<String, Double>> getRevenueByServiceType(int year, String aggregation) throws SQLException {
        if (!aggregation.equalsIgnoreCase("MONTH") && !aggregation.equalsIgnoreCase("QUARTER")) {
            throw new IllegalArgumentException("Aggregation must be either 'MONTH' or 'QUARTER'");
        }

        String sql;
        if (aggregation.equalsIgnoreCase("MONTH")) {
            sql = "SELECT ServiceDescription AS service_type, MONTH(ServiceDate) AS month, YEAR(ServiceDate) AS year, SUM(Cost) AS total_revenue "
                    +
                    "FROM services " +
                    "WHERE YEAR(ServiceDate) = ? " +
                    "GROUP BY ServiceDescription, YEAR(ServiceDate), MONTH(ServiceDate) " +
                    "ORDER BY ServiceDescription, YEAR(ServiceDate), MONTH(ServiceDate)";
        } else { // QUARTER
            sql = "SELECT ServiceDescription AS service_type, QUARTER(ServiceDate) AS quarter, YEAR(ServiceDate) AS year, SUM(Cost) AS total_revenue "
                    +
                    "FROM services " +
                    "WHERE YEAR(ServiceDate) = ? " +
                    "GROUP BY ServiceDescription, YEAR(ServiceDate), QUARTER(ServiceDate) " +
                    "ORDER BY ServiceDescription, YEAR(ServiceDate), QUARTER(ServiceDate)";
        }

        Map<String, Map<String, Double>> revenueMap = new HashMap<>();

        try (Connection connection = DatabaseUtil.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql)) {

            statement.setInt(1, year);
            try (ResultSet rs = statement.executeQuery()) {
                while (rs.next()) {
                    String serviceType = rs.getString("service_type");
                    String period;
                    if (aggregation.equalsIgnoreCase("MONTH")) {
                        int month = rs.getInt("month");
                        period = getMonthName(month);
                    } else { // QUARTER
                        int quarter = rs.getInt("quarter");
                        period = "Q" + quarter;
                    }
                    double revenue = rs.getDouble("total_revenue");

                    revenueMap.computeIfAbsent(serviceType, k -> new HashMap<>()).put(period, revenue);
                }
            }
        }

        return revenueMap;
    }

    /**
     * Retrieves all distinct car models from the database.
     *
     * @return A list of car models.
     * @throws SQLException If a database access error occurs.
     */
    public List<String> getAllCarModels() throws SQLException {
        String sql = "SELECT DISTINCT Model FROM cars ORDER BY Model ASC";
        List<String> models = new ArrayList<>();

        try (Connection connection = DatabaseUtil.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql);
                ResultSet rs = statement.executeQuery()) {

            while (rs.next()) {
                models.add(rs.getString("Model"));
            }
        }

        return models;
    }

    /**
     * Retrieves distinct years from the services data.
     *
     * @return A list of years.
     * @throws SQLException If a database access error occurs.
     */
    public List<Integer> getDistinctServiceYears() throws SQLException {
        String sql = "SELECT DISTINCT YEAR(ServiceDate) AS year FROM services ORDER BY year DESC";
        List<Integer> years = new ArrayList<>();

        try (Connection connection = DatabaseUtil.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql);
                ResultSet rs = statement.executeQuery()) {

            while (rs.next()) {
                years.add(rs.getInt("year"));
            }
        }

        return years;
    }

    /**
     * Helper method to convert month number to month name.
     *
     * @param month Number of the month (1-12).
     * @return Name of the month.
     */
    private String getMonthName(int month) {
        return java.time.Month.of(month).name();
    }

    @Override
    protected Object mapRowToObject(ResultSet resultSet) throws Exception {
        // TODO Auto-generated method stub
        throw new UnsupportedOperationException("Unimplemented method 'mapRowToObject'");
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\dao\PaymentDAO.java
```
package com.example.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.example.model.Payment;

public class PaymentDAO extends AbstractDAO<Payment> {

    @Override
    protected Payment mapRowToObject(ResultSet resultSet) throws Exception {
        return new Payment(
                resultSet.getInt("PaymentID"),
                resultSet.getDate("PaymentDate"),
                resultSet.getString("PaymentMethod"),
                resultSet.getDouble("Amount"),
                resultSet.getInt("OrderID"));
    }

    public List<Payment> getAllPayments() {
        return getAll("SELECT * FROM payments");
    }

    public boolean updatePayment(Payment payment) throws SQLException {
        String sql = "UPDATE payments SET PaymentDate = ?, PaymentMethod = ?, Amount = ?, OrderID = ? WHERE PaymentID = ?";
        try (Connection connection = DatabaseUtil.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql)) {

            statement.setDate(1, new java.sql.Date(payment.getPaymentDate().getTime()));
            statement.setString(2, payment.getPaymentMethod());
            statement.setDouble(3, payment.getAmount());
            statement.setInt(4, payment.getOrderID());
            statement.setInt(5, payment.getPaymentID());

            int rowsAffected = statement.executeUpdate();
            return rowsAffected > 0;
        }
    }

    public boolean insertPayment(Payment payment) throws SQLException {
        String sql = "INSERT INTO payments (PaymentDate, PaymentMethod, Amount, OrderID) VALUES (?, ?, ?, ?)";
        try (Connection connection = DatabaseUtil.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql,
                        PreparedStatement.RETURN_GENERATED_KEYS)) {

            statement.setDate(1, new java.sql.Date(payment.getPaymentDate().getTime()));
            statement.setString(2, payment.getPaymentMethod());
            statement.setDouble(3, payment.getAmount());
            statement.setInt(4, payment.getOrderID());

            int rowsAffected = statement.executeUpdate();
            if (rowsAffected > 0) {
                try (ResultSet generatedKeys = statement.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        int generatedPaymentID = generatedKeys.getInt(1);
                        payment.setPaymentID(generatedPaymentID);
                    }
                }
                return true;
            }
            return false;
        }
    }

    public boolean deletePayment(int paymentID) throws SQLException {
        String sql = "DELETE FROM payments WHERE PaymentID = ?";
        try (Connection connection = DatabaseUtil.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql)) {

            statement.setInt(1, paymentID);
            int rowsAffected = statement.executeUpdate();
            return rowsAffected > 0;
        }
    }

    public Map<String, String> getColumnNamesAndTypes(String tableName) throws SQLException {
        String sql = "SELECT COLUMN_NAME, DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = ?";
        Map<String, String> columns = new HashMap<>();
        try (Connection connection = DatabaseUtil.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setString(1, tableName);
            ResultSet rs = statement.executeQuery();
            while (rs.next()) {
                columns.put(rs.getString("COLUMN_NAME"), rs.getString("DATA_TYPE"));
            }
        }
        return columns;
    }

    public List<String> getAllPaymentIDs() throws SQLException {
        String sql = "SELECT DISTINCT PaymentID FROM payments ORDER BY PaymentID ASC";
        List<String> paymentIDs = new ArrayList<>();

        try (Connection connection = DatabaseUtil.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql);
                ResultSet rs = statement.executeQuery()) {

            while (rs.next()) {
                paymentIDs.add(String.valueOf(rs.getInt("PaymentID")));
            }
        }

        return paymentIDs;
    }

    // Additional methods to retrieve related data if needed
    // For example, getOrderDetails
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\dao\OrderDAO.java
```
package com.example.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.example.model.Order;

public class OrderDAO extends AbstractDAO<Order> {

    @Override
    protected Order mapRowToObject(ResultSet resultSet) throws Exception {
        return new Order(
                resultSet.getInt("OrderID"),
                resultSet.getDate("OrderDate"),
                resultSet.getInt("CarID"),
                resultSet.getInt("CustomerID"),
                resultSet.getInt("EmployeeID"),
                resultSet.getInt("Quantity"),
                resultSet.getDouble("TotalPrice"));
    }

    public List<Order> getAllOrders() {
        return getAll("SELECT * FROM orders");
    }

    public boolean updateOrder(Order order) throws SQLException {
        String sql = "UPDATE orders SET OrderDate = ?, CarID = ?, CustomerID = ?, EmployeeID = ?, Quantity = ?, TotalPrice = ? WHERE OrderID = ?";
        try (Connection connection = DatabaseUtil.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql)) {

            statement.setDate(1, new java.sql.Date(order.getOrderDate().getTime()));
            statement.setInt(2, order.getCarID());
            statement.setInt(3, order.getCustomerID());
            statement.setInt(4, order.getEmployeeID());
            statement.setInt(5, order.getQuantity());
            statement.setDouble(6, order.getTotalPrice());
            statement.setInt(7, order.getOrderID());

            int rowsAffected = statement.executeUpdate();
            return rowsAffected > 0;
        }
    }

    public boolean insertOrder(Order order) throws SQLException {
        String sql = "INSERT INTO orders (OrderDate, CarID, CustomerID, EmployeeID, Quantity, TotalPrice) VALUES (?, ?, ?, ?, ?, ?)";
        try (Connection connection = DatabaseUtil.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql,
                        PreparedStatement.RETURN_GENERATED_KEYS)) {

            statement.setDate(1, new java.sql.Date(order.getOrderDate().getTime()));
            statement.setInt(2, order.getCarID());
            statement.setInt(3, order.getCustomerID());
            statement.setInt(4, order.getEmployeeID());
            statement.setInt(5, order.getQuantity());
            statement.setDouble(6, order.getTotalPrice());

            int rowsAffected = statement.executeUpdate();
            if (rowsAffected > 0) {
                try (ResultSet generatedKeys = statement.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        int generatedOrderID = generatedKeys.getInt(1);
                        order.setOrderID(generatedOrderID);
                    }
                }
                return true;
            }
            return false;
        }
    }

    public boolean deleteOrder(int orderID) throws SQLException {
        String sql = "DELETE FROM orders WHERE OrderID = ?";
        try (Connection connection = DatabaseUtil.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql)) {

            statement.setInt(1, orderID);
            int rowsAffected = statement.executeUpdate();
            return rowsAffected > 0;
        }
    }

    public Map<String, String> getColumnNamesAndTypes(String tableName) throws SQLException {
        String sql = "SELECT COLUMN_NAME, DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = ?";
        Map<String, String> columns = new HashMap<>();
        try (Connection connection = DatabaseUtil.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setString(1, tableName);
            ResultSet rs = statement.executeQuery();
            while (rs.next()) {
                columns.put(rs.getString("COLUMN_NAME"), rs.getString("DATA_TYPE"));
            }
        }
        return columns;
    }

    public List<String> getAllOrderIDs() throws SQLException {
        String sql = "SELECT DISTINCT OrderID FROM orders ORDER BY OrderID ASC";
        List<String> orderIDs = new ArrayList<>();

        try (Connection connection = DatabaseUtil.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql);
                ResultSet rs = statement.executeQuery()) {

            while (rs.next()) {
                orderIDs.add(String.valueOf(rs.getInt("OrderID")));
            }
        }

        return orderIDs;
    }

    public Order getOrderById(int orderID) throws SQLException {
        String sql = "SELECT * FROM orders WHERE OrderID = ?";
        try (Connection connection = DatabaseUtil.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql)) {

            statement.setInt(1, orderID);
            ResultSet rs = statement.executeQuery();
            if (rs.next()) {
                return mapRowToObject(rs);
            }
        } catch (Exception e) {
            e.printStackTrace();
            // Optionally, you can throw a custom exception or handle it as per your
            // application's requirement
        }
        return null;
    }

    public List<Order> getOrdersByEmployeeId(int employeeID) throws SQLException {
        String sql = "SELECT * FROM orders WHERE EmployeeID = ?";
        List<Order> orders = new ArrayList<>();
        try (Connection connection = DatabaseUtil.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql)) {

            statement.setInt(1, employeeID);
            ResultSet rs = statement.executeQuery();
            while (rs.next()) {
                orders.add(mapRowToObject(rs));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return orders;
    }
    // Additional methods to retrieve related data if needed
    // For example, getCarDetails, getCustomerDetails, getEmployeeDetails
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\dao\HomeDAO.java
```
package com.example.dao;


import java.sql.*;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import com.example.model.home.HomeStats;
import com.example.model.home.LatestOrder;
import com.example.model.home.LatestService;

public class HomeDAO {

    public HomeStats getHomeStats() throws SQLException {
        int totalCars = getCount("cars");
        int totalCustomers = getCount("customers");
        int totalOrders = getCount("orders");
        int totalEmployees = getCount("employees");

        return new HomeStats(totalCars, totalCustomers, totalOrders, totalEmployees);
    }

    private int getCount(String tableName) throws SQLException {
        String sql = "SELECT COUNT(*) AS total FROM " + tableName;
        try (Connection conn = DatabaseUtil.getConnection();
                PreparedStatement stmt = conn.prepareStatement(sql);
                ResultSet rs = stmt.executeQuery()) {
            if (rs.next()) {
                return rs.getInt("total");
            }
        }
        return 0;
    }

    public List<LatestOrder> getLatestOrders() throws SQLException {
        String sql = "SELECT car.Make, car.Model, c.FirstName, c.LastName, o.OrderDate, o.TotalPrice " +
                "FROM orders o " +
                "JOIN cars car ON o.CarID = car.CarID " +
                "JOIN customers c ON o.CustomerID = c.CustomerID " +
                "ORDER BY o.OrderDate DESC " +
                "LIMIT 4";

        List<LatestOrder> orders = new ArrayList<>();
        try (Connection conn = DatabaseUtil.getConnection();
                PreparedStatement stmt = conn.prepareStatement(sql);
                ResultSet rs = stmt.executeQuery()) {

            while (rs.next()) {
                String carName = rs.getString("Make") + " " + rs.getString("Model");
                String customerName = rs.getString("FirstName") + " " + rs.getString("LastName");
                LocalDate orderDate = rs.getDate("OrderDate").toLocalDate();
                double totalPrice = rs.getDouble("TotalPrice");

                orders.add(new LatestOrder(carName, customerName, orderDate, totalPrice));
            }
        }
        return orders;
    }

    public List<LatestService> getLatestServices() throws SQLException {
        String sql = "SELECT car.Make, car.Model, c.FirstName, c.LastName, s.ServiceDate, s.Cost, s.ServiceDescription "
                +
                "FROM services s " +
                "JOIN cars car ON s.CarID = car.CarID " +
                "JOIN customers c ON s.CustomerID = c.CustomerID " +
                "ORDER BY s.ServiceDate DESC " +
                "LIMIT 6";

        List<LatestService> services = new ArrayList<>();
        try (Connection conn = DatabaseUtil.getConnection();
                PreparedStatement stmt = conn.prepareStatement(sql);
                ResultSet rs = stmt.executeQuery()) {

            while (rs.next()) {
                String carName = rs.getString("Make") + " " + rs.getString("Model");
                String customerName = rs.getString("FirstName") + " " + rs.getString("LastName");
                LocalDate serviceDate = rs.getDate("ServiceDate").toLocalDate();
                double cost = rs.getDouble("Cost");
                String serviceDescription = rs.getString("ServiceDescription");

                services.add(new LatestService(carName, customerName, cost, serviceDescription, serviceDate));
            }
        }
        return services;
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\dao\EmployeeDAO.java
```
package com.example.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.example.model.Employee;

public class EmployeeDAO extends AbstractDAO<Employee> {

    @Override
    protected Employee mapRowToObject(ResultSet resultSet) throws Exception {
        return new Employee(
                resultSet.getInt("EmployeeID"),
                resultSet.getString("FirstName"),
                resultSet.getString("LastName"),
                resultSet.getString("Position"),
                resultSet.getDouble("Salary"),
                resultSet.getDate("HireDate"));
    }

    /**
     * Retrieves all employees from the database.
     *
     * @return List of all Employee objects.
     */
    public List<Employee> getAllEmployees() {
        return getAll("SELECT * FROM employees");
    }

    /**
     * Updates an existing employee in the database.
     *
     * @param employee The Employee object with updated information.
     * @return True if the update was successful; otherwise, false.
     * @throws SQLException If a database access error occurs.
     */
    public boolean updateEmployee(Employee employee) throws SQLException {
        String sql = "UPDATE employees SET FirstName = ?, LastName = ?, Position = ?, Salary = ?, HireDate = ? WHERE EmployeeID = ?";
        try (Connection connection = DatabaseUtil.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql)) {

            statement.setString(1, employee.getFirstName());
            statement.setString(2, employee.getLastName());
            statement.setString(3, employee.getPosition());
            statement.setDouble(4, employee.getSalary());
            statement.setDate(5, new java.sql.Date(employee.getHireDate().getTime()));
            statement.setInt(6, employee.getEmployeeID());

            int rowsAffected = statement.executeUpdate();
            return rowsAffected > 0;
        }
    }

    /**
     * Inserts a new employee into the database.
     *
     * @param employee The Employee object to insert.
     * @return True if the insertion was successful; otherwise, false.
     * @throws SQLException If a database access error occurs.
     */
    public boolean insertEmployee(Employee employee) throws SQLException {
        String sql = "INSERT INTO employees (FirstName, LastName, Position, Salary, HireDate) VALUES (?, ?, ?, ?, ?)";
        try (Connection connection = DatabaseUtil.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql,
                        PreparedStatement.RETURN_GENERATED_KEYS)) {

            statement.setString(1, employee.getFirstName());
            statement.setString(2, employee.getLastName());
            statement.setString(3, employee.getPosition());
            statement.setDouble(4, employee.getSalary());
            statement.setDate(5, new java.sql.Date(employee.getHireDate().getTime()));

            int rowsAffected = statement.executeUpdate();
            if (rowsAffected > 0) {
                try (ResultSet generatedKeys = statement.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        int generatedEmployeeID = generatedKeys.getInt(1);
                        employee.setEmployeeID(generatedEmployeeID);
                    }
                }
                return true;
            }
            return false;
        }
    }

    /**
     * Deletes an employee from the database by EmployeeID.
     *
     * @param employeeID The ID of the employee to delete.
     * @return True if the deletion was successful; otherwise, false.
     * @throws SQLException If a database access error occurs.
     */
    public boolean deleteEmployee(int employeeID) throws SQLException {
        String sql = "DELETE FROM employees WHERE EmployeeID = ?";
        try (Connection connection = DatabaseUtil.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql)) {

            statement.setInt(1, employeeID);
            int rowsAffected = statement.executeUpdate();
            return rowsAffected > 0;
        }
    }

    /**
     * Retrieves column names and their data types for the specified table.
     *
     * @param tableName The name of the table.
     * @return A map of column names to their data types.
     * @throws SQLException If a database access error occurs.
     */
    public Map<String, String> getColumnNamesAndTypes(String tableName) throws SQLException {
        String sql = "SELECT COLUMN_NAME, DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = ?";
        Map<String, String> columns = new HashMap<>();
        try (Connection connection = DatabaseUtil.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setString(1, tableName);
            ResultSet rs = statement.executeQuery();
            while (rs.next()) {
                columns.put(rs.getString("COLUMN_NAME"), rs.getString("DATA_TYPE"));
            }
        }
        return columns;
    }

    /**
     * Retrieves all unique EmployeeIDs from the employees table.
     *
     * @return List of EmployeeID as Strings.
     * @throws SQLException If a database access error occurs.
     */
    public List<String> getAllEmployeeIDs() throws SQLException {
        String sql = "SELECT DISTINCT EmployeeID FROM employees ORDER BY EmployeeID ASC";
        List<String> employeeIDs = new ArrayList<>();

        try (Connection connection = DatabaseUtil.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql);
                ResultSet rs = statement.executeQuery()) {

            while (rs.next()) {
                employeeIDs.add(String.valueOf(rs.getInt("EmployeeID")));
            }
        }

        return employeeIDs;
    }

    public Employee getEmployeeById(int employeeID) throws SQLException {
        String sql = "SELECT * FROM employees WHERE EmployeeID = ?";
        try (Connection connection = DatabaseUtil.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql)) {

            statement.setInt(1, employeeID);
            ResultSet rs = statement.executeQuery();
            if (rs.next()) {
                return mapRowToObject(rs);
            }
        } catch (Exception e) {
            e.printStackTrace();
            // Optionally, you can throw a custom exception or handle it as per your
            // application's requirement
        }
        return null;
    }
    // Additional methods can be added here if needed
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\dao\DatabaseUtil.java
```
package com.example.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class DatabaseUtil {

    private static final String URL = "jdbc:mysql://localhost:3306/Cars";

    public static Connection getConnection() throws SQLException {
        return DriverManager.getConnection(URL, "root", "");
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\dao\CustomerDAO.java
```
package com.example.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.example.model.Customer;
import com.example.model.Payment;
import com.example.model.Service;

public class CustomerDAO extends AbstractDAO<Customer> {

    @Override
    protected Customer mapRowToObject(ResultSet resultSet) throws Exception {
        return new Customer(
                resultSet.getInt("CustomerID"),
                resultSet.getString("FirstName"),
                resultSet.getString("LastName"),
                resultSet.getString("Email"),
                resultSet.getString("Phone"),
                resultSet.getString("Address"),
                resultSet.getString("City"),
                resultSet.getString("State"),
                resultSet.getString("ZipCode"));
    }

    public List<Customer> getAllCustomers() {
        return getAll("SELECT * FROM customers");
    }

    public boolean updateCustomer(Customer customer) throws SQLException {
        String sql = "UPDATE customers SET FirstName = ?, LastName = ?, Email = ?, Phone = ?, Address = ?, City = ?, State = ?, ZipCode = ? WHERE CustomerID = ?";
        try (Connection connection = DatabaseUtil.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql)) {

            statement.setString(1, customer.getFirstName());
            statement.setString(2, customer.getLastName());
            statement.setString(3, customer.getEmail());
            statement.setString(4, customer.getPhone());
            statement.setString(5, customer.getAddress());
            statement.setString(6, customer.getCity());
            statement.setString(7, customer.getState());
            statement.setString(8, customer.getZipCode());
            statement.setInt(9, customer.getCustomerID());

            int rowsAffected = statement.executeUpdate();
            return rowsAffected > 0;
        }
    }

    public boolean insertCustomer(Customer customer) throws SQLException {
        String sql = "INSERT INTO customers (FirstName, LastName, Email, Phone, Address, City, State, ZipCode) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
        try (Connection connection = DatabaseUtil.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql,
                        PreparedStatement.RETURN_GENERATED_KEYS)) {

            statement.setString(1, customer.getFirstName());
            statement.setString(2, customer.getLastName());
            statement.setString(3, customer.getEmail());
            statement.setString(4, customer.getPhone());
            statement.setString(5, customer.getAddress());
            statement.setString(6, customer.getCity());
            statement.setString(7, customer.getState());
            statement.setString(8, customer.getZipCode());

            int rowsAffected = statement.executeUpdate();
            if (rowsAffected > 0) {
                try (ResultSet generatedKeys = statement.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        int generatedCustomerID = generatedKeys.getInt(1);
                        customer.setCustomerID(generatedCustomerID);
                    }
                }
                return true;
            }
            return false;
        }
    }

    public boolean deleteCustomer(int customerID) throws SQLException {
        String sql = "DELETE FROM customers WHERE CustomerID = ?";
        try (Connection connection = DatabaseUtil.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql)) {

            statement.setInt(1, customerID);
            int rowsAffected = statement.executeUpdate();
            return rowsAffected > 0;
        }
    }

    public List<Service> getServicesForCustomer(int customerID) throws SQLException {
        String sql = "SELECT ServiceID, CarID, ServiceDate, ServiceDescription, Cost FROM services WHERE CustomerID = ? ORDER BY ServiceDate DESC";
        List<Service> services = new ArrayList<>();

        try (Connection connection = DatabaseUtil.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setInt(1, customerID);
            ResultSet rs = statement.executeQuery();
            while (rs.next()) {
                int serviceID = rs.getInt("ServiceID");
                int carID = rs.getInt("CarID");
                java.sql.Date serviceDate = rs.getDate("ServiceDate");
                String description = rs.getString("ServiceDescription");
                double cost = rs.getDouble("Cost");
                services.add(new Service(serviceID, carID, customerID, serviceDate, description, cost));
            }
        }
        return services;
    }

    public List<Payment> getPaymentsForCustomer(int customerID) throws SQLException {
        String sql = "SELECT p.PaymentID, p.PaymentDate, p.PaymentMethod, p.Amount, p.OrderID " +
                "FROM payments p " +
                "JOIN orders o ON p.OrderID = o.OrderID " +
                "WHERE o.CustomerID = ? " +
                "ORDER BY p.PaymentDate DESC";
        List<Payment> payments = new ArrayList<>();

        try (Connection connection = DatabaseUtil.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setInt(1, customerID);
            ResultSet rs = statement.executeQuery();
            while (rs.next()) {
                int paymentID = rs.getInt("PaymentID");
                java.sql.Date paymentDate = rs.getDate("PaymentDate");
                String paymentMethod = rs.getString("PaymentMethod");
                double amount = rs.getDouble("Amount");
                int orderID = rs.getInt("OrderID");
                payments.add(new Payment(paymentID, paymentDate, paymentMethod, amount, orderID));
            }
        }
        return payments;
    }

    public Map<String, String> getColumnNamesAndTypes(String tableName) throws SQLException {
        String sql = "SELECT COLUMN_NAME, DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = ?";
        Map<String, String> columns = new HashMap<>();
        try (Connection connection = DatabaseUtil.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setString(1, tableName);
            ResultSet rs = statement.executeQuery();
            while (rs.next()) {
                columns.put(rs.getString("COLUMN_NAME"), rs.getString("DATA_TYPE"));
            }
        }
        return columns;
    }

    public List<String> getAllCustomerNames() throws SQLException {
        String sql = "SELECT DISTINCT CONCAT(FirstName, ' ', LastName) AS FullName FROM customers ORDER BY FullName ASC";
        List<String> names = new ArrayList<>();

        try (Connection connection = DatabaseUtil.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql);
                ResultSet rs = statement.executeQuery()) {

            while (rs.next()) {
                names.add(rs.getString("FullName"));
            }
        }

        return names;
    }

    public Customer getCustomerById(int customerID) throws SQLException {
        String sql = "SELECT * FROM customers WHERE CustomerID = ?";
        try (Connection connection = DatabaseUtil.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql)) {

            statement.setInt(1, customerID);
            ResultSet rs = statement.executeQuery();
            if (rs.next()) {
                return mapRowToObject(rs);
            }
        } catch (Exception e) {
            e.printStackTrace();
            // Optionally, you can throw a custom exception or handle it as per your
            // application's requirement
        }
        return null;
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\dao\CarDAO.java
```
package com.example.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.example.model.Car;
import com.example.model.CarServiceRecord;

public class CarDAO extends AbstractDAO<Car> {


    //resultSet is like a row in a table
    @Override
    protected Car mapRowToObject(ResultSet resultSet) throws Exception {
        return new Car(
                resultSet.getInt("CarID"),
                resultSet.getString("Make"),
                resultSet.getString("Model"),
                resultSet.getInt("Year"),
                resultSet.getDouble("Price"),
                resultSet.getInt("Stock"),
                resultSet.getString("VIN"));
    }

    public List<Car> getAllCars() {
        return getAll("SELECT * FROM cars");
    }


    //take a exitst car but updated (by setters)
    public boolean updateCar(Car car) throws SQLException {
        String sql = "UPDATE cars SET Make = ?, Model = ?, Year = ?, Price = ?, Stock = ?, VIN = ? WHERE CarID = ?";
        try (Connection connection = DatabaseUtil.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql)) {

            statement.setString(1, car.getMake());
            statement.setString(2, car.getModel());
            statement.setInt(3, car.getYear());
            statement.setDouble(4, car.getPrice());
            statement.setInt(5, car.getStock());
            statement.setString(6, car.getVin());
            statement.setInt(7, car.getCarID());

            int rowsAffected = statement.executeUpdate();
            return rowsAffected > 0;

        }
    }


    //create new car then pass it here to insert it
    public boolean insertCar(Car car) throws SQLException {
        String sql = "INSERT INTO cars (Make, Model, Year, Price, Stock, VIN) VALUES (?, ?, ?, ?, ?, ?)";
        try (Connection connection = DatabaseUtil.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql,
                        PreparedStatement.RETURN_GENERATED_KEYS)) {

            statement.setString(1, car.getMake());
            statement.setString(2, car.getModel());
            statement.setInt(3, car.getYear());
            statement.setDouble(4, car.getPrice());
            statement.setInt(5, car.getStock());
            statement.setString(6, car.getVin());

            int rowsAffected = statement.executeUpdate();
            if (rowsAffected > 0) {
                try (ResultSet generatedKeys = statement.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        int generatedCarID = generatedKeys.getInt(1);
                        car.setCarID(generatedCarID);
                    }
                }
                return true;
            }
            return false;

        }
    }

    public boolean deleteCar(int carID) throws SQLException {
        String sql = "DELETE FROM cars WHERE CarID = ?";
        try (Connection connection = DatabaseUtil.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql)) {

            statement.setInt(1, carID);

            int rowsAffected = statement.executeUpdate();
            return rowsAffected > 0;

        }
    }



    //the carid is in  the services table (ez)
    public List<CarServiceRecord> getServicesForCar(int carID) throws SQLException {
        String sql = "SELECT ServiceID, ServiceDate, ServiceDescription, Cost FROM services WHERE CarID = ? ORDER BY ServiceDate DESC";
        List<CarServiceRecord> records = new ArrayList<>();

        try (Connection connection = DatabaseUtil.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setInt(1, carID);
            ResultSet rs = statement.executeQuery();
            while (rs.next()) {
                int serviceID = rs.getInt("ServiceID");
                LocalDate date = rs.getDate("ServiceDate").toLocalDate();
                String desc = rs.getString("ServiceDescription"); 
                double cost = rs.getDouble("Cost");
                records.add(new CarServiceRecord(serviceID, date, desc, cost));
            }
        }
        return records;
    }

    public Map<String, String> getColumnNamesAndTypes(String tableName) throws SQLException {
        //  يجيب اسم الكولوم ونوعه
        String sql = "SELECT COLUMN_NAME, DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = ?";
        Map<String, String> columns = new HashMap<>();
        try (Connection connection = DatabaseUtil.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setString(1, tableName);
            ResultSet rs = statement.executeQuery();
            while (rs.next()) {
                columns.put(rs.getString("COLUMN_NAME"), rs.getString("DATA_TYPE"));
            }
        }
        return columns;
    }


    //used in reporets
    public List<String> getAllCarModels() throws SQLException {
        String sql = "SELECT DISTINCT Model FROM cars ORDER BY Model ASC";
        List<String> models = new ArrayList<>();

        try (Connection connection = DatabaseUtil.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql);
                ResultSet rs = statement.executeQuery()) {

            while (rs.next()) {
                models.add(rs.getString("Model"));
            }
        }

        return models;
    }

    public Car getCarById(int carID) throws SQLException {
        String sql = "SELECT * FROM cars WHERE CarID = ?";
        try (Connection connection = DatabaseUtil.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql)) {

            statement.setInt(1, carID);
            ResultSet rs = statement.executeQuery();
            if (rs.next()) {
                return mapRowToObject(rs);
            }
        } catch (Exception e) {
            e.printStackTrace();
            
            
        }
        return null;
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\dao\AbstractDAO.java
```
/*generic methods for database operations.*/
package com.example.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public abstract class AbstractDAO<T> {

    // convert resultSet form database to model (like car, user)
    protected abstract T mapRowToObject(ResultSet resultSet) throws Exception;

    public List<T> getAll(String query) {
        List<T> list = new ArrayList<>();
        try (Connection connection = DatabaseUtil.getConnection();
                PreparedStatement statement = connection.prepareStatement(query);
                ResultSet resultSet = statement.executeQuery()) {
            while (resultSet.next()) {
                list.add(mapRowToObject(resultSet));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return list;
    }

    public T getOne(String query, Object... params) {
        try (Connection connection = DatabaseUtil.getConnection();
                PreparedStatement statement = createPreparedStatement(connection, query, params);
                ResultSet resultSet = statement.executeQuery()) {
            if (resultSet.next()) {
                return mapRowToObject(resultSet);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    // for quires
    private PreparedStatement createPreparedStatement(Connection connection, String query, Object... params)
            throws Exception {
        PreparedStatement statement = connection.prepareStatement(query);
        int index = 1;
        for (Object param : params) {
            statement.setObject(index++, param);
        }
        return statement;
    }

    /*
    used in contoller to create dynamic searchboxes
     * output:
     * "CarID": "INT",
     * "Make": "VARCHAR",
     * "Model": "VARCHAR",
     * "Year": "INT",
     * "Price": "DOUBLE",
     * "Stock": "INT",
     * "VIN": "VARCHAR"
     */
    public Map<String, String> getColumnNamesAndTypes(String tableName) throws SQLException {
        Map<String, String> columnData = new HashMap<>();
        String query = "SELECT * FROM " + tableName + " WHERE 1=0";
        try (Connection connection = DatabaseUtil.getConnection();
                PreparedStatement statement = connection.prepareStatement(query);
                ResultSet resultSet = statement.executeQuery()) {

            ResultSetMetaData metaData = resultSet.getMetaData();
            int columnCount = metaData.getColumnCount();
            for (int i = 1; i <= columnCount; i++) {
                String columnName = metaData.getColumnName(i);
                String columnType = metaData.getColumnTypeName(i);
                columnData.put(columnName, columnType);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return columnData;
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\controller\ServiceController.java
```
package com.example.controller;

import com.example.components.general.CustomSearchBox;
import com.example.components.dialog.DetailsDialog;
import com.example.components.dialog.FieldDefinition;
import com.example.components.dialog.MessageDialog;
import com.example.model.Car;
import com.example.model.Customer;
import com.example.model.Service;
import com.example.service.CarService;
import com.example.service.CustomerService;
import com.example.service.ServiceService;
import com.example.AppStructure.AppStage;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.Label;
import javafx.scene.layout.VBox;

import javafx.stage.FileChooser;
import javafx.stage.Stage;

import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.*;
import java.util.stream.Collectors;
import me.xdrop.fuzzywuzzy.FuzzySearch;

public class ServiceController {
    private ServiceService serviceService;
    private ObservableList<Service> serviceList;
    private FilteredList<Service> filteredServiceList;
    private final String regex = ".*[a-zA-Z].*";

    public ServiceController() {
        this.serviceService = new ServiceService();
        this.serviceList = FXCollections.observableArrayList();
        this.filteredServiceList = new FilteredList<>(serviceList, p -> true);
    }

    public void handleEdit(Service service) {
        List<FieldDefinition> fieldDefinitions = new ArrayList<>();
        fieldDefinitions.add(new FieldDefinition("carID", "Car ID", "INT", service.getCarID()));
        fieldDefinitions.add(new FieldDefinition("customerID", "Customer ID", "INT", service.getCustomerID()));
        fieldDefinitions.add(new FieldDefinition("serviceDate", "Service Date", "DATE", service.getSimpleDate()));
        fieldDefinitions.add(new FieldDefinition("serviceDescription", "Service Description", "VARCHAR",
                service.getServiceDescription()));
        fieldDefinitions.add(new FieldDefinition("cost", "Cost", "DOUBLE", service.getCost()));

        AppStage.getInstance().showModal(
                service,
                fieldDefinitions,
                "Edit Service",
                "Update",
                () -> {
                    try {
                        boolean success = serviceService.updateService(service);
                        if (success) {
                            AppStage.getInstance().showMessage("Success", "Service updated successfully.",
                                    MessageDialog.MessageType.INFORMATION);
                        } else {
                            AppStage.getInstance().showMessage("Update Failed", "No changes were made to the service.",
                                    MessageDialog.MessageType.ERROR);
                        }
                    } catch (SQLException e) {
                        e.printStackTrace();
                        AppStage.getInstance().showMessage("Update Failed",
                                "An error occurred while updating the service:\n" + e.getMessage(),
                                MessageDialog.MessageType.ERROR);
                    }
                },
                () -> {
                    // Cancel action
                });
    }

    public void handleDelete(Service service) {
        AppStage.getInstance().showConfirmation("Delete Confirmation",
                "Are you sure you want to delete the following service?\n" + service.toString(),
                () -> {
                    try {
                        boolean success = serviceService.deleteService(service.getServiceID());
                        if (success) {
                            serviceList.remove(service);
                            AppStage.getInstance().showMessage("Success", "Service deleted successfully.",
                                    MessageDialog.MessageType.INFORMATION);
                        } else {
                            AppStage.getInstance().showMessage("Deletion Failed",
                                    "No service found with the specified ID.", MessageDialog.MessageType.ERROR);
                        }
                    } catch (SQLException e) {
                        e.printStackTrace();
                        AppStage.getInstance().showMessage("Deletion Failed",
                                "An error occurred while deleting the service:\n" + e.getMessage(),
                                MessageDialog.MessageType.ERROR);
                    }
                },
                () -> {
                    // Cancel action
                });
    }

    public void handleInsert() {
        Service newService = new Service(0, 0, 0, new Date(), "", 0.0);

        List<FieldDefinition> fieldDefinitions = List.of(
                new FieldDefinition("carID", "Car ID", "INT", newService.getCarID()),
                new FieldDefinition("customerID", "Customer ID", "INT", newService.getCustomerID()),
                new FieldDefinition("serviceDate", "Service Date", "DATE", newService.getSimpleDate()),
                new FieldDefinition("serviceDescription", "Service Description", "VARCHAR",
                        newService.getServiceDescription()),
                new FieldDefinition("cost", "Cost", "DOUBLE", newService.getCost()));

        AppStage.getInstance().showModal(
                newService,
                fieldDefinitions,
                "Add New Service",
                "Add",
                () -> {
                    try {
                        if (serviceService.insertService(newService)) {
                            serviceList.add(newService);
                            AppStage.getInstance().showMessage("Success", "New service added successfully!",
                                    MessageDialog.MessageType.INFORMATION);
                        } else {
                            AppStage.getInstance().showMessage("Insertion Failed", "Unable to add new service.",
                                    MessageDialog.MessageType.ERROR);
                        }
                    } catch (SQLException e) {
                        AppStage.getInstance().showMessage("Error", "Database Error: " + e.getMessage(),
                                MessageDialog.MessageType.ERROR);
                    }
                },
                () -> {
                    System.out.println("Insertion cancelled.");
                });
    }

    public ObservableList<Service> loadAllServices() {
        try {
            List<Service> services = serviceService.getAllServices();
            serviceList.setAll(services);
        } catch (SQLException e) {
            e.printStackTrace();
            AppStage.getInstance().showMessage("Load Failed",
                    "An error occurred while loading services:\n" + e.getMessage(), MessageDialog.MessageType.ERROR);
        }
        return filteredServiceList;
    }

    public List<CustomSearchBox> getSearchBoxes() {
        try {
            Map<String, String> columns = serviceService.getColumnNamesAndTypes("services");
            return columns.entrySet().stream()
                    .map(entry -> new CustomSearchBox(entry.getKey(), entry.getValue()))
                    .collect(Collectors.toList());
        } catch (SQLException e) {
            e.printStackTrace();
            AppStage.getInstance().showMessage("Error",
                    "Failed to load search criteria:\n" + e.getMessage(), MessageDialog.MessageType.ERROR);
            return new ArrayList<>();
        }
    }

    public void resetFilters() {
        filteredServiceList.setPredicate(service -> true);
    }

    public void handleExport() {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Save CSV");
        FileChooser.ExtensionFilter extFilter = new FileChooser.ExtensionFilter("CSV files (*.csv)", "*.csv");
        fileChooser.getExtensionFilters().add(extFilter);
        fileChooser.setInitialFileName("service_report.csv");

        Stage stage = (Stage) AppStage.getInstance().getScene().getWindow();
        File file = fileChooser.showSaveDialog(stage);

        if (file != null) {
            try {
                serviceService.exportServicesToCSV(filteredServiceList, file);
                AppStage.getInstance().showMessage("Export Successful",
                        "Services have been exported successfully to:\n" + file.getAbsolutePath(),
                        MessageDialog.MessageType.INFORMATION);
            } catch (IOException e) {
                e.printStackTrace();
                AppStage.getInstance().showMessage("Export Failed",
                        "An error occurred while exporting services:\n" + e.getMessage(),
                        MessageDialog.MessageType.ERROR);
            }
        }
    }

    public ObservableList<Service> getServiceList() {
        return filteredServiceList;
    }

    public void filterServices(List<CustomSearchBox> searchBoxes) {
        filteredServiceList.setPredicate(service -> {
            for (CustomSearchBox searchBox : searchBoxes) {
                String dataType = searchBox.getDataType().toUpperCase();
                String input = searchBox.getText().trim();

                if (input.isEmpty()) {
                    searchBox.clearValidation();
                    continue;
                }

                boolean inputValid = isInputValid(dataType, input);
                if (!inputValid) {
                    searchBox.setValid(false);
                    return false;
                } else {
                    searchBox.setValid(true);
                    boolean matches = applyFilter(dataType, input, service.getFieldValue(searchBox.getColumnText()));
                    if (!matches) {
                        return false;
                    }
                }
            }
            return true;
        });
    }

    private boolean isInputValid(String dataType, String input) {
        switch (dataType) {
            case "INT":
                return isIntInputValid(input);
            case "DOUBLE":
            case "DECIMAL":
                return isDoubleInputValid(input);
            case "DATE":
                return isDateInputValid(input);
            default:
                return true;
        }
    }

    private boolean applyFilter(String dataType, String input, String fieldValue) {
        switch (dataType) {
            case "INT":
                return safeFilterInt(input, fieldValue);
            case "DOUBLE":
            case "DECIMAL":
                return safeFilterDecimal(input, fieldValue);
            case "DATE":
                return safeFilterDate(input, fieldValue);
            default:
                return fuzzyMatch(fieldValue, input);
        }
    }

    private boolean fuzzyMatch(String fieldValue, String input) {
        return FuzzySearch.ratio(fieldValue.toLowerCase(), input.toLowerCase()) >= 60;
    }

    private boolean safeFilterInt(String input, String fieldValue) {
        try {
            int actualValue = Integer.parseInt(fieldValue);
            return applyIntFilter(input, actualValue);
        } catch (NumberFormatException e) {
            return false;
        }
    }

    private boolean safeFilterDecimal(String input, String fieldValue) {
        try {
            double actualValue = Double.parseDouble(fieldValue);
            return applyDecimalFilter(input, actualValue);
        } catch (NumberFormatException e) {
            return false;
        }
    }

    private boolean safeFilterDate(String input, String fieldValue) {
        try {
            // Assuming input is in format YYYY-MM-DD
            java.time.LocalDate inputDate = java.time.LocalDate.parse(input);
            java.time.LocalDate actualDate = java.time.LocalDate.parse(fieldValue);
            return actualDate.equals(inputDate);
        } catch (Exception e) {
            return false;
        }
    }

    private boolean applyIntFilter(String input, int actualValue) {
        if (input.endsWith("-")) {
            int lowerBound = Integer.parseInt(input.replace("-", "").trim());
            return actualValue >= lowerBound;
        }
        if (input.startsWith("-")) {
            int upperBound = Integer.parseInt(input.replace("-", "").trim());
            return actualValue <= upperBound;
        }
        if (input.contains("-")) {
            String[] range = input.split("-");
            if (range.length != 2)
                return false;
            int lowerBound = Integer.parseInt(range[0].trim());
            int upperBound = Integer.parseInt(range[1].trim());
            return actualValue >= lowerBound && actualValue <= upperBound;
        }
        int exactValue = Integer.parseInt(input.trim());
        return actualValue == exactValue;
    }

    private boolean applyDecimalFilter(String input, double actualValue) {
        if (input.endsWith("-")) {
            double lowerBound = Double.parseDouble(input.replace("-", "").trim());
            return actualValue >= lowerBound;
        }
        if (input.startsWith("-")) {
            double upperBound = Double.parseDouble(input.replace("-", "").trim());
            return actualValue <= upperBound;
        }
        if (input.contains("-")) {
            String[] range = input.split("-");
            if (range.length != 2)
                return false;
            double lowerBound = Double.parseDouble(range[0].trim());
            double upperBound = Double.parseDouble(range[1].trim());
            return actualValue >= lowerBound && actualValue <= upperBound;
        }
        double exactValue = Double.parseDouble(input.trim());
        return actualValue == exactValue;
    }

    private boolean isIntInputValid(String input) {
        if (input.matches(regex))
            return false;
        try {
            if (input.equals("-"))
                return false;
            if (input.endsWith("-")) {
                Integer.parseInt(input.replace("-", "").trim());
                return true;
            }
            if (input.startsWith("-")) {
                if (input.length() == 1)
                    return false;
                Integer.parseInt(input.replace("-", "").trim());
                return true;
            }
            if (input.contains("-")) {
                String[] range = input.split("-");
                if (range.length == 2) {
                    Integer.parseInt(range[0].trim());
                    Integer.parseInt(range[1].trim());
                    return true;
                }
                return false;
            }

            Integer.parseInt(input.trim());
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    private boolean isDoubleInputValid(String input) {
        if (input.matches(regex))
            return false;
        try {
            if (input.equals("-"))
                return false;
            if (input.endsWith("-")) {
                Double.parseDouble(input.replace("-", "").trim());
                return true;
            }
            if (input.startsWith("-")) {
                if (input.length() == 1)
                    return false;
                Double.parseDouble(input.replace("-", "").trim());
                return true;
            }
            if (input.contains("-")) {
                String[] range = input.split("-");
                if (range.length == 2) {
                    Double.parseDouble(range[0].trim());
                    Double.parseDouble(range[1].trim());
                    return true;
                }
                return false;
            }

            Double.parseDouble(input.trim());
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    private boolean isDateInputValid(String input) {
        try {
            // Assuming input is in format YYYY-MM-DD
            java.time.LocalDate.parse(input);
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    public void handleDetails(Service service) {
        try {
            // Assuming you have DAOs or Services to fetch related data
            // For example, show related Car and Customer information

            showServiceDetails(service);
        } catch (Exception e) {
            e.printStackTrace();
            AppStage.getInstance().showMessage("Error",
                    "Failed to load details for service:\n" + e.getMessage(),
                    MessageDialog.MessageType.ERROR);
        }
    }

    /**
     * Displays the DetailsDialog with service information and related entities.
     *
     * @param service The service whose details are to be displayed.
     */
    private void showServiceDetails(Service service) {
        DetailsDialog detailsDialog = AppStage.getInstance().getDetailsDialog();

        detailsDialog.setTitle("Details for Service ID: " + service.getServiceID());

        VBox contentBox = new VBox(10);
        contentBox.setPadding(new Insets(10));
        contentBox.setAlignment(Pos.TOP_LEFT);

        // Service Info
        VBox serviceInfoBox = new VBox(5);
        Label serviceIDLabel = new Label("Service ID: " + service.getServiceID());
        Label carIDLabel = new Label("Car ID: " + service.getCarID());
        Label customerIDLabel = new Label("Customer ID: " + service.getCustomerID());
        Label serviceDateLabel = new Label("Service Date: " + service.getSimpleDate());
        Label serviceDescLabel = new Label("Service Description: " + service.getServiceDescription());
        Label costLabel = new Label(String.format("Cost: $%.2f", service.getCost()));

        serviceInfoBox.getChildren().addAll(serviceIDLabel, carIDLabel, customerIDLabel,
                serviceDateLabel, serviceDescLabel, costLabel);

        // Related Car Info
        VBox carInfoBox = new VBox(5);
        try {
            // Assuming you have a method getCarById in CarService
            CarService carService = new CarService();
            Car car = carService.getCarById(service.getCarID());
            Label carInfoLabel = new Label("Car Details:");
            Label carMakeLabel = new Label("Make: " + car.getMake());
            Label carModelLabel = new Label("Model: " + car.getModel());
            Label carYearLabel = new Label("Year: " + car.getYear());
            Label carPriceLabel = new Label(String.format("Price: $%.2f", car.getPrice()));
            Label carStockLabel = new Label("Stock: " + car.getStock());
            Label carVinLabel = new Label("VIN: " + car.getVin());

            carInfoBox.getChildren().addAll(carInfoLabel, carMakeLabel, carModelLabel, carYearLabel, carPriceLabel,
                    carStockLabel, carVinLabel);
        } catch (SQLException e) {
            carInfoBox.getChildren().add(new Label("Car details not available."));
        }

        // Related Customer Info
        VBox customerInfoBox = new VBox(5);
        try {
            // Assuming you have a method getCustomerById in CustomerService
            CustomerService customerService = new CustomerService();
            Customer customer = customerService.getCustomerById(service.getCustomerID());
            Label customerInfoLabel = new Label("Customer Details:");
            Label customerNameLabel = new Label("Name: " + customer.getFirstName() + " " + customer.getLastName());
            Label customerEmailLabel = new Label("Email: " + customer.getEmail());
            Label customerPhoneLabel = new Label("Phone: " + customer.getPhone());

            customerInfoBox.getChildren().addAll(customerInfoLabel, customerNameLabel, customerEmailLabel,
                    customerPhoneLabel);
        } catch (SQLException e) {
            customerInfoBox.getChildren().add(new Label("Customer details not available."));
        }

        contentBox.getChildren().addAll(serviceInfoBox, new Label("Related Car Details:"), carInfoBox,
                new Label("Related Customer Details:"), customerInfoBox);

        detailsDialog.setCustomContent(contentBox);
        detailsDialog.show();
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\controller\ReportsController.java
```
package com.example.controller;

import com.example.components.dialog.MessageDialog;
import com.example.AppStructure.AppStage;
import com.example.service.ReportService;
import com.example.components.general.CustomComboBox;
import javafx.collections.FXCollections;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Node;
import javafx.scene.chart.*;
import javafx.scene.control.Label;
import javafx.scene.control.Tooltip;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;

import java.sql.SQLException;
import java.util.*;

/**
 * Controller for handling report generation and interactions.
 */
public class ReportsController {

    private final ReportService reportService;

    // Containers to hold charts for easy removal and replacement
    private final VBox serviceFrequencyChartContainer;
    private final VBox revenueChartContainer;

    /**
     * Constructs a ReportsController and initializes the ReportService.
     */
    public ReportsController() {
        this.reportService = new ReportService();
        this.serviceFrequencyChartContainer = new VBox();
        this.revenueChartContainer = new VBox();
    }

    public Node generateServiceFrequencyReport() {
        VBox reportBox = new VBox(10);
        reportBox.setPadding(new Insets(10));
        reportBox.setAlignment(Pos.TOP_LEFT);

        Label titleLabel = new Label("Frequency of Services");
        titleLabel.setFont(Font.font("Poppins", FontWeight.BOLD, 16));

        HBox selectionBox = new HBox(10);
        selectionBox.setAlignment(Pos.CENTER_LEFT);

        CustomComboBox<String> modelComboBox = new CustomComboBox<>("Select Car Model:");

        try {
            List<String> models = reportService.getAllCarModels();
            List<String> allModels = new ArrayList<>();
            allModels.add("All Models"); // Adding the static item
            allModels.addAll(models);
            modelComboBox.setItems(allModels.toArray(new String[0]));
        } catch (SQLException e) {
            e.printStackTrace();
            AppStage.getInstance().showMessage("Error",
                    "Failed to load car models:\n" + e.getMessage(),
                    MessageDialog.MessageType.ERROR);
        }

        selectionBox.getChildren().addAll(modelComboBox);

        serviceFrequencyChartContainer.setAlignment(Pos.CENTER);

        BarChart<String, Number> initialBarChart = createServiceFrequencyChart(null);
        serviceFrequencyChartContainer.getChildren().add(initialBarChart);

        modelComboBox.setOnAction(event -> {
            String selectedModel = modelComboBox.getValue();
            String modelFilter = "All Models".equals(selectedModel) ? null : selectedModel;
            updateServiceFrequencyChart(modelFilter);
        });

        reportBox.getChildren().addAll(titleLabel, selectionBox, serviceFrequencyChartContainer);
        return reportBox;
    }

    private BarChart<String, Number> createServiceFrequencyChart(String modelFilter) {
        CategoryAxis xAxis = new CategoryAxis();
        xAxis.setLabel("Service Type");

        NumberAxis yAxis = new NumberAxis();
        yAxis.setLabel("Frequency");

        BarChart<String, Number> barChart = new BarChart<>(xAxis, yAxis);
        String chartTitle = (modelFilter == null) ? "Service Frequency for All Models"
                : "Service Frequency for Model: " + modelFilter;
        barChart.setTitle(chartTitle);
        barChart.setLegendVisible(false);

        try {
            Map<String, Integer> serviceFrequency = reportService.getServiceFrequency(modelFilter);
            XYChart.Series<String, Number> series = new XYChart.Series<>();
            series.setName("Services");

            int maxFrequency = serviceFrequency.values().stream().max(Integer::compareTo).orElse(1);
            maxFrequency = Math.max(maxFrequency, 5); // Ensure a minimum upper bound for better visuals

            yAxis.setAutoRanging(false);
            yAxis.setLowerBound(0);
            yAxis.setUpperBound(maxFrequency + 1);
            yAxis.setTickUnit(1);
            yAxis.setMinorTickCount(0);

            yAxis.setTickLabelFormatter(new NumberAxis.DefaultFormatter(yAxis) {
                @Override
                public String toString(Number object) {
                    return String.valueOf(object.intValue());
                }
            });

            yAxis.setTickLabelFont(Font.font("Poppins", FontWeight.NORMAL, 12));

            for (Map.Entry<String, Integer> entry : serviceFrequency.entrySet()) {
                XYChart.Data<String, Number> dataPoint = new XYChart.Data<>(entry.getKey(), entry.getValue());
                series.getData().add(dataPoint);

                Tooltip tooltip = new Tooltip("Service: " + entry.getKey() + "\nFrequency: " + entry.getValue());
                dataPoint.nodeProperty().addListener((observable, oldValue, newValue) -> {
                    if (newValue != null) {
                        Tooltip.install(newValue, tooltip);
                    }
                });
            }

            barChart.getData().add(series);
            barChart.lookupAll(".default-color0.chart-bar")
                    .forEach(node -> node.setStyle("-fx-bar-fill:#2954ED"));

        } catch (SQLException e) {
            e.printStackTrace();
            AppStage.getInstance().showMessage("Error",
                    "Failed to load service frequency data:\n" + e.getMessage(),
                    MessageDialog.MessageType.ERROR);
        }

        return barChart;
    }

    private void updateServiceFrequencyChart(String modelFilter) {
        // Remove the existing chart
        serviceFrequencyChartContainer.getChildren().clear();

        // Create a new chart with updated data
        BarChart<String, Number> newBarChart = createServiceFrequencyChart(modelFilter);

        // Add the new chart to the container
        serviceFrequencyChartContainer.getChildren().add(newBarChart);
    }

    public Node generateRevenueReport() {
        VBox reportBox = new VBox(10);
        reportBox.setPadding(new Insets(10));
        reportBox.setAlignment(Pos.TOP_LEFT);

        Label titleLabel = new Label("Revenue from Services");
        titleLabel.setFont(Font.font("Poppins", FontWeight.BOLD, 16));

        HBox selectionBox = new HBox(10);
        selectionBox.setAlignment(Pos.CENTER_LEFT);

        CustomComboBox<Integer> yearComboBox = new CustomComboBox<>("Select Year:");
        CustomComboBox<String> aggregationComboBox = new CustomComboBox<>("Aggregation:");

        // Populate Year ComboBox with distinct years from services data
        try {
            List<Integer> years = reportService.getDistinctServiceYears();
            List<Integer> allYears = new ArrayList<>(years);
            yearComboBox.setItems(allYears.toArray(new Integer[0]));
            if (!allYears.isEmpty()) {
                yearComboBox.getComboBox().getSelectionModel().selectFirst(); // Default to the most recent year
            }
        } catch (SQLException e) {
            e.printStackTrace();
            AppStage.getInstance().showMessage("Error",
                    "Failed to load available years:\n" + e.getMessage(),
                    MessageDialog.MessageType.ERROR);
        }

        // Set Aggregation options
        aggregationComboBox.setItems("Monthly", "Quarterly");
        aggregationComboBox.getComboBox().getSelectionModel().selectFirst(); // Default to Monthly

        selectionBox.getChildren().addAll(yearComboBox, aggregationComboBox);

        // Initialize the chart container
        revenueChartContainer.setAlignment(Pos.CENTER);

        // Create initial chart based on default selections
        Integer defaultYear = yearComboBox.getValue();
        String defaultAggregation = aggregationComboBox.getValue();
        if (defaultYear != null && defaultAggregation != null) {
            StackedBarChart<String, Number> initialStackedBarChart = createRevenueChart(defaultYear,
                    defaultAggregation);
            revenueChartContainer.getChildren().add(initialStackedBarChart);
        }

        // Add listeners to ComboBoxes for live updates
        yearComboBox.setOnAction(event -> {
            Integer selectedYear = yearComboBox.getValue();
            String aggregation = aggregationComboBox.getValue();
            if (selectedYear != null && aggregation != null) {
                updateRevenueChart(selectedYear, aggregation);
            }
        });

        aggregationComboBox.setOnAction(event -> {
            Integer selectedYear = yearComboBox.getValue();
            String aggregation = aggregationComboBox.getValue();
            if (selectedYear != null && aggregation != null) {
                updateRevenueChart(selectedYear, aggregation);
            }
        });

        reportBox.getChildren().addAll(titleLabel, selectionBox, revenueChartContainer);
        return reportBox;
    }

    /**
     * Creates a StackedBarChart for the revenue report based on the selected year
     * and aggregation.
     *
     * @param year        The selected year.
     * @param aggregation "Monthly" or "Quarterly".
     * @return A configured StackedBarChart.
     */
    private StackedBarChart<String, Number> createRevenueChart(int year, String aggregation) {
        CategoryAxis xAxis = new CategoryAxis();
        xAxis.setLabel(aggregation + " Period");

        NumberAxis yAxis = new NumberAxis();
        yAxis.setLabel("Revenue ($)");

        StackedBarChart<String, Number> stackedBarChart = new StackedBarChart<>(xAxis, yAxis);
        String chartTitle = aggregation + " Revenue from Each Service Type in " + year;
        stackedBarChart.setTitle(chartTitle);

        try {
            // Map aggregation to DAO expected values
            String aggregationParam;
            if ("Monthly".equalsIgnoreCase(aggregation)) {
                aggregationParam = "MONTH";
            } else if ("Quarterly".equalsIgnoreCase(aggregation)) {
                aggregationParam = "QUARTER";
            } else {
                // Default or invalid aggregation
                AppStage.getInstance().showMessage("Invalid Aggregation",
                        "Aggregation must be either 'Monthly' or 'Quarterly'.",
                        MessageDialog.MessageType.ERROR);
                return stackedBarChart;
            }

            Map<String, Map<String, Double>> revenueData = reportService.getRevenueByServiceType(year,
                    aggregationParam);

            // Determine all periods (months or quarters)
            Set<String> periods = new TreeSet<>();
            for (Map<String, Double> periodMap : revenueData.values()) {
                periods.addAll(periodMap.keySet());
            }

            // If no data, show a message
            if (periods.isEmpty()) {
                AppStage.getInstance().showMessage("No Data",
                        "No revenue data available for the selected year and aggregation.",
                        MessageDialog.MessageType.INFORMATION);
                return stackedBarChart;
            }

            xAxis.setCategories(FXCollections.observableArrayList(periods));

            // Create a series for each service type
            for (Map.Entry<String, Map<String, Double>> entry : revenueData.entrySet()) {
                String serviceType = entry.getKey();
                Map<String, Double> periodRevenue = entry.getValue();

                XYChart.Series<String, Number> series = new XYChart.Series<>();
                series.setName(serviceType);

                for (String period : periods) {
                    Double revenue = periodRevenue.getOrDefault(period, 0.0);
                    XYChart.Data<String, Number> dataPoint = new XYChart.Data<>(period, revenue);
                    series.getData().add(dataPoint);

                    // Add Tooltip
                    Tooltip tooltip = new Tooltip("Service: " + serviceType + "\nPeriod: " + period + "\nRevenue: $"
                            + String.format("%.2f", revenue));
                    // Delay tooltip installation until the node is rendered
                    dataPoint.nodeProperty().addListener((observable, oldValue, newValue) -> {
                        if (newValue != null) {
                            Tooltip.install(newValue, tooltip);
                        }
                    });
                }

                stackedBarChart.getData().add(series);
            }

        } catch (SQLException e) {
            e.printStackTrace();
            AppStage.getInstance().showMessage("Error",
                    "Failed to load revenue data:\n" + e.getMessage(),
                    MessageDialog.MessageType.ERROR);
        }

        return stackedBarChart;
    }

    /**
     * Updates the revenue StackedBarChart by removing the existing chart and adding
     * a new one.
     *
     * @param year        The selected year.
     * @param aggregation "Monthly" or "Quarterly".
     */
    private void updateRevenueChart(int year, String aggregation) {
        // Remove the existing chart
        revenueChartContainer.getChildren().clear();

        // Create a new chart with updated data
        StackedBarChart<String, Number> newStackedBarChart = createRevenueChart(year, aggregation);

        // Add the new chart to the container
        revenueChartContainer.getChildren().add(newStackedBarChart);
    }

    /**
     * Cleans up resources when the controller is no longer needed.
     */
    public void cleanup() {
        reportService.close();
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\controller\PaymentController.java
```
package com.example.controller;

import com.example.components.general.CustomSearchBox;
import com.example.components.dialog.DetailsDialog;
import com.example.components.dialog.FieldDefinition;
import com.example.components.dialog.MessageDialog;
import com.example.model.Payment;
import com.example.service.OrderService;
import com.example.service.PaymentService;
import com.example.AppStructure.AppStage;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.VBox;

import javafx.stage.FileChooser;
import javafx.stage.Stage;

import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.*;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import me.xdrop.fuzzywuzzy.FuzzySearch;

public class PaymentController {
    private PaymentService paymentService;
    private ObservableList<Payment> paymentList;
    private FilteredList<Payment> filteredPaymentList;
    private final String regex = ".*[a-zA-Z].*";

    public PaymentController() {
        this.paymentService = new PaymentService();
        this.paymentList = FXCollections.observableArrayList();
        this.filteredPaymentList = new FilteredList<>(paymentList, p -> true);
    }

    public void handleEdit(Payment payment) {
        List<FieldDefinition> fieldDefinitions = new ArrayList<>();
        fieldDefinitions.add(new FieldDefinition("paymentDate", "Payment Date", "DATE", payment.getSimpleDate()));
        fieldDefinitions
                .add(new FieldDefinition("paymentMethod", "Payment Method", "VARCHAR", payment.getPaymentMethod()));
        fieldDefinitions.add(new FieldDefinition("amount", "Amount", "DOUBLE", payment.getAmount()));
        fieldDefinitions.add(new FieldDefinition("orderID", "Order ID", "INT", payment.getOrderID()));

        AppStage.getInstance().showModal(
                payment,
                fieldDefinitions,
                "Edit Payment",
                "Update",
                () -> {
                    try {
                        boolean success = paymentService.updatePayment(payment);
                        if (success) {
                            AppStage.getInstance().showMessage("Success", "Payment updated successfully.",
                                    MessageDialog.MessageType.INFORMATION);
                        } else {
                            AppStage.getInstance().showMessage("Update Failed", "No changes were made to the payment.",
                                    MessageDialog.MessageType.ERROR);
                        }
                    } catch (SQLException e) {
                        e.printStackTrace();
                        AppStage.getInstance().showMessage("Update Failed",
                                "An error occurred while updating the payment:\n" + e.getMessage(),
                                MessageDialog.MessageType.ERROR);
                    }
                },
                () -> {
                    // Cancel action
                });
    }

    public void handleDelete(Payment payment) {
        AppStage.getInstance().showConfirmation("Delete Confirmation",
                "Are you sure you want to delete the following payment?\n" + payment.toString(),
                () -> {
                    try {
                        boolean success = paymentService.deletePayment(payment.getPaymentID());
                        if (success) {
                            paymentList.remove(payment);
                            AppStage.getInstance().showMessage("Success", "Payment deleted successfully.",
                                    MessageDialog.MessageType.INFORMATION);
                        } else {
                            AppStage.getInstance().showMessage("Deletion Failed",
                                    "No payment found with the specified ID.", MessageDialog.MessageType.ERROR);
                        }
                    } catch (SQLException e) {
                        e.printStackTrace();
                        AppStage.getInstance().showMessage("Deletion Failed",
                                "An error occurred while deleting the payment:\n" + e.getMessage(),
                                MessageDialog.MessageType.ERROR);
                    }
                },
                () -> {
                    // Cancel action
                });
    }

    public void handleInsert() {
        Payment newPayment = new Payment(0, new Date(), "", 0.0, 0);

        List<FieldDefinition> fieldDefinitions = List.of(
                new FieldDefinition("paymentDate", "Payment Date", "DATE", newPayment.getSimpleDate()),
                new FieldDefinition("paymentMethod", "Payment Method", "VARCHAR", newPayment.getPaymentMethod()),
                new FieldDefinition("amount", "Amount", "DOUBLE", newPayment.getAmount()),
                new FieldDefinition("orderID", "Order ID", "INT", newPayment.getOrderID()));

        AppStage.getInstance().showModal(
                newPayment,
                fieldDefinitions,
                "Add New Payment",
                "Add",
                () -> {
                    try {
                        if (paymentService.insertPayment(newPayment)) {
                            paymentList.add(newPayment);
                            AppStage.getInstance().showMessage("Success", "New payment added successfully!",
                                    MessageDialog.MessageType.INFORMATION);
                        } else {
                            AppStage.getInstance().showMessage("Insertion Failed", "Unable to add new payment.",
                                    MessageDialog.MessageType.ERROR);
                        }
                    } catch (SQLException e) {
                        AppStage.getInstance().showMessage("Error", "Database Error: " + e.getMessage(),
                                MessageDialog.MessageType.ERROR);
                    }
                },
                () -> {
                    System.out.println("Insertion cancelled.");
                });
    }

    public ObservableList<Payment> loadAllPayments() {
        try {
            List<Payment> payments = paymentService.getAllPayments();
            paymentList.setAll(payments);
        } catch (SQLException e) {
            e.printStackTrace();
            AppStage.getInstance().showMessage("Load Failed",
                    "An error occurred while loading payments:\n" + e.getMessage(), MessageDialog.MessageType.ERROR);
        }
        return filteredPaymentList;
    }

    public List<CustomSearchBox> getSearchBoxes() {
        try {
            Map<String, String> columns = paymentService.getColumnNamesAndTypes("payments");
            return columns.entrySet().stream()
                    .map(entry -> new CustomSearchBox(entry.getKey(), entry.getValue()))
                    .collect(Collectors.toList());
        } catch (SQLException e) {
            e.printStackTrace();
            AppStage.getInstance().showMessage("Error",
                    "Failed to load search criteria:\n" + e.getMessage(), MessageDialog.MessageType.ERROR);
            return new ArrayList<>();
        }
    }

    public void resetFilters() {
        filteredPaymentList.setPredicate(payment -> true);
    }

    public void handleExport() {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Save CSV");
        FileChooser.ExtensionFilter extFilter = new FileChooser.ExtensionFilter("CSV files (*.csv)", "*.csv");
        fileChooser.getExtensionFilters().add(extFilter);
        fileChooser.setInitialFileName("payment_report.csv");

        Stage stage = (Stage) AppStage.getInstance().getScene().getWindow();
        File file = fileChooser.showSaveDialog(stage);

        if (file != null) {
            try {
                paymentService.exportPaymentsToCSV(filteredPaymentList, file);
                AppStage.getInstance().showMessage("Export Successful",
                        "Payments have been exported successfully to:\n" + file.getAbsolutePath(),
                        MessageDialog.MessageType.INFORMATION);
            } catch (IOException e) {
                e.printStackTrace();
                AppStage.getInstance().showMessage("Export Failed",
                        "An error occurred while exporting payments:\n" + e.getMessage(),
                        MessageDialog.MessageType.ERROR);
            }
        }
    }

    public ObservableList<Payment> getPaymentList() {
        return filteredPaymentList;
    }

    public void filterPayments(List<CustomSearchBox> searchBoxes) {
        filteredPaymentList.setPredicate(payment -> {
            for (CustomSearchBox searchBox : searchBoxes) {
                String dataType = searchBox.getDataType().toUpperCase();
                String input = searchBox.getText().trim();

                if (input.isEmpty()) {
                    searchBox.clearValidation();
                    continue;
                }

                boolean inputValid = isInputValid(dataType, input);
                if (!inputValid) {
                    searchBox.setValid(false);
                    return false;
                } else {
                    searchBox.setValid(true);
                    boolean matches = applyFilter(dataType, input, payment.getFieldValue(searchBox.getColumnText()));
                    if (!matches) {
                        return false;
                    }
                }
            }
            return true;
        });
    }

    private boolean isInputValid(String dataType, String input) {
        switch (dataType) {
            case "INT":
                return isIntInputValid(input);
            case "DOUBLE":
            case "DECIMAL":
                return isDoubleInputValid(input);
            case "DATE":
                return isDateInputValid(input);
            default:
                return true;
        }
    }

    private boolean applyFilter(String dataType, String input, String fieldValue) {
        switch (dataType) {
            case "INT":
                return safeFilterInt(input, fieldValue);
            case "DOUBLE":
            case "DECIMAL":
                return safeFilterDecimal(input, fieldValue);
            case "DATE":
                return safeFilterDate(input, fieldValue);
            default:
                return fuzzyMatch(fieldValue, input);
        }
    }

    private boolean fuzzyMatch(String fieldValue, String input) {
        return FuzzySearch.ratio(fieldValue.toLowerCase(), input.toLowerCase()) >= 60;
    }

    private boolean safeFilterInt(String input, String fieldValue) {
        try {
            int actualValue = Integer.parseInt(fieldValue);
            return applyIntFilter(input, actualValue);
        } catch (NumberFormatException e) {
            return false;
        }
    }

    private boolean safeFilterDecimal(String input, String fieldValue) {
        try {
            double actualValue = Double.parseDouble(fieldValue);
            return applyDecimalFilter(input, actualValue);
        } catch (NumberFormatException e) {
            return false;
        }
    }

    private boolean safeFilterDate(String input, String fieldValue) {
        try {
            // Assuming input is in format YYYY-MM-DD
            java.time.LocalDate inputDate = java.time.LocalDate.parse(input);
            java.time.LocalDate actualDate = java.time.LocalDate.parse(fieldValue);
            return actualDate.equals(inputDate);
        } catch (Exception e) {
            return false;
        }
    }

    private boolean applyIntFilter(String input, int actualValue) {
        if (input.endsWith("-")) {
            int lowerBound = Integer.parseInt(input.replace("-", "").trim());
            return actualValue >= lowerBound;
        }
        if (input.startsWith("-")) {
            int upperBound = Integer.parseInt(input.replace("-", "").trim());
            return actualValue <= upperBound;
        }
        if (input.contains("-")) {
            String[] range = input.split("-");
            if (range.length != 2)
                return false;
            int lowerBound = Integer.parseInt(range[0].trim());
            int upperBound = Integer.parseInt(range[1].trim());
            return actualValue >= lowerBound && actualValue <= upperBound;
        }
        int exactValue = Integer.parseInt(input.trim());
        return actualValue == exactValue;
    }

    private boolean applyDecimalFilter(String input, double actualValue) {
        if (input.endsWith("-")) {
            double lowerBound = Double.parseDouble(input.replace("-", "").trim());
            return actualValue >= lowerBound;
        }
        if (input.startsWith("-")) {
            double upperBound = Double.parseDouble(input.replace("-", "").trim());
            return actualValue <= upperBound;
        }
        if (input.contains("-")) {
            String[] range = input.split("-");
            if (range.length != 2)
                return false;
            double lowerBound = Double.parseDouble(range[0].trim());
            double upperBound = Double.parseDouble(range[1].trim());
            return actualValue >= lowerBound && actualValue <= upperBound;
        }
        double exactValue = Double.parseDouble(input.trim());
        return actualValue == exactValue;
    }

    private boolean isIntInputValid(String input) {
        if (input.matches(regex))
            return false;
        try {
            if (input.equals("-"))
                return false;
            if (input.endsWith("-")) {
                Integer.parseInt(input.replace("-", "").trim());
                return true;
            }
            if (input.startsWith("-")) {
                if (input.length() == 1)
                    return false;
                Integer.parseInt(input.replace("-", "").trim());
                return true;
            }
            if (input.contains("-")) {
                String[] range = input.split("-");
                if (range.length == 2) {
                    Integer.parseInt(range[0].trim());
                    Integer.parseInt(range[1].trim());
                    return true;
                }
                return false;
            }

            Integer.parseInt(input.trim());
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    private boolean isDoubleInputValid(String input) {
        if (input.matches(regex))
            return false;
        try {
            if (input.equals("-"))
                return false;
            if (input.endsWith("-")) {
                Double.parseDouble(input.replace("-", "").trim());
                return true;
            }
            if (input.startsWith("-")) {
                if (input.length() == 1)
                    return false;
                Double.parseDouble(input.replace("-", "").trim());
                return true;
            }
            if (input.contains("-")) {
                String[] range = input.split("-");
                if (range.length == 2) {
                    Double.parseDouble(range[0].trim());
                    Double.parseDouble(range[1].trim());
                    return true;
                }
                return false;
            }

            Double.parseDouble(input.trim());
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    private boolean isDateInputValid(String input) {
        try {
            // Assuming input is in format YYYY-MM-DD
            java.time.LocalDate.parse(input);
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    public void handleDetails(Payment payment) {
        // Implement details view for Payment
        // For example, show related Order information
        try {
            // Assuming you have DAOs or Services to fetch related data
            // For simplicity, we'll just display payment details here

            showPaymentDetails(payment);
        } catch (Exception e) {
            e.printStackTrace();
            AppStage.getInstance().showMessage("Error",
                    "Failed to load details for payment:\n" + e.getMessage(),
                    MessageDialog.MessageType.ERROR);
        }
    }

    /**
     * Displays the DetailsDialog with payment information and related order
     * details.
     *
     * @param payment The payment whose details are to be displayed.
     */
    private void showPaymentDetails(Payment payment) {
        DetailsDialog detailsDialog = AppStage.getInstance().getDetailsDialog();

        detailsDialog.setTitle("Details for Payment ID: " + payment.getPaymentID());

        VBox contentBox = new VBox(10);
        contentBox.setPadding(new Insets(10));
        contentBox.setAlignment(Pos.TOP_LEFT);

        // Payment Info
        VBox paymentInfoBox = new VBox(5);
        Label paymentIDLabel = new Label("Payment ID: " + payment.getPaymentID());
        Label paymentDateLabel = new Label("Payment Date: " + payment.getSimpleDate());
        Label paymentMethodLabel = new Label("Payment Method: " + payment.getPaymentMethod());
        Label amountLabel = new Label(String.format("Amount: $%.2f", payment.getAmount()));
        Label orderIDLabel = new Label("Order ID: " + payment.getOrderID());

        paymentInfoBox.getChildren().addAll(paymentIDLabel, paymentDateLabel, paymentMethodLabel, amountLabel,
                orderIDLabel);

        // Related Order Info
        VBox orderInfoBox = new VBox(5);
        try {
            // Assuming you have a method getOrderById in OrderService
            OrderService orderService = new OrderService();
            com.example.model.Order order = orderService.getOrderById(payment.getOrderID());

            Label orderIDRelatedLabel = new Label("Order ID: " + order.getOrderID());
            Label orderDateLabel = new Label("Order Date: " + order.getSimpleDate());
            Label carIDLabel = new Label("Car ID: " + order.getCarID());
            Label customerIDLabel = new Label("Customer ID: " + order.getCustomerID());
            Label employeeIDLabel = new Label("Employee ID: " + order.getEmployeeID());
            Label quantityLabel = new Label("Quantity: " + order.getQuantity());
            Label totalPriceLabel = new Label(String.format("Total Price: $%.2f", order.getTotalPrice()));

            orderInfoBox.getChildren().addAll(orderIDRelatedLabel, orderDateLabel, carIDLabel,
                    customerIDLabel, employeeIDLabel, quantityLabel, totalPriceLabel);
        } catch (SQLException e) {
            orderInfoBox.getChildren().add(new Label("Order details not available."));
        }

        contentBox.getChildren().addAll(paymentInfoBox, new Label("Related Order Details:"), orderInfoBox);

        detailsDialog.setCustomContent(contentBox);
        detailsDialog.show();
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\controller\OrderController.java
```
package com.example.controller;

import com.example.components.general.CustomSearchBox;
import com.example.components.dialog.DetailsDialog;
import com.example.components.dialog.FieldDefinition;
import com.example.components.dialog.MessageDialog;
import com.example.model.Order;
import com.example.service.OrderService;
import com.example.AppStructure.AppStage;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.VBox;

import javafx.stage.FileChooser;
import javafx.stage.Stage;

import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.*;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import me.xdrop.fuzzywuzzy.FuzzySearch;

public class OrderController {
    private OrderService orderService;
    private ObservableList<Order> orderList;
    private FilteredList<Order> filteredOrderList;
    private final String regex = ".*[a-zA-Z].*";

    public OrderController() {
        this.orderService = new OrderService();
        this.orderList = FXCollections.observableArrayList();
        this.filteredOrderList = new FilteredList<>(orderList, p -> true);
    }

    public void handleEdit(Order order) {
        List<FieldDefinition> fieldDefinitions = new ArrayList<>();
        fieldDefinitions.add(new FieldDefinition("orderDate", "Order Date", "DATE", order.getSimpleDate()));
        fieldDefinitions.add(new FieldDefinition("carID", "Car ID", "INT", order.getCarID()));
        fieldDefinitions.add(new FieldDefinition("customerID", "Customer ID", "INT", order.getCustomerID()));
        fieldDefinitions.add(new FieldDefinition("employeeID", "Employee ID", "INT", order.getEmployeeID()));
        fieldDefinitions.add(new FieldDefinition("quantity", "Quantity", "INT", order.getQuantity()));
        fieldDefinitions.add(new FieldDefinition("totalPrice", "Total Price", "DOUBLE", order.getTotalPrice()));

        AppStage.getInstance().showModal(
                order,
                fieldDefinitions,
                "Edit Order",
                "Update",
                () -> {
                    try {
                        boolean success = orderService.updateOrder(order);
                        if (success) {
                            AppStage.getInstance().showMessage("Success", "Order updated successfully.",
                                    MessageDialog.MessageType.INFORMATION);
                        } else {
                            AppStage.getInstance().showMessage("Update Failed", "No changes were made to the order.",
                                    MessageDialog.MessageType.ERROR);
                        }
                    } catch (SQLException e) {
                        e.printStackTrace();
                        AppStage.getInstance().showMessage("Update Failed",
                                "An error occurred while updating the order:\n" + e.getMessage(),
                                MessageDialog.MessageType.ERROR);
                    }
                },
                () -> {
                    // Cancel action
                });
    }

    public void handleDelete(Order order) {
        AppStage.getInstance().showConfirmation("Delete Confirmation",
                "Are you sure you want to delete the following order?\n" + order.toString(),
                () -> {
                    try {
                        boolean success = orderService.deleteOrder(order.getOrderID());
                        if (success) {
                            orderList.remove(order);
                            AppStage.getInstance().showMessage("Success", "Order deleted successfully.",
                                    MessageDialog.MessageType.INFORMATION);
                        } else {
                            AppStage.getInstance().showMessage("Deletion Failed",
                                    "No order found with the specified ID.", MessageDialog.MessageType.ERROR);
                        }
                    } catch (SQLException e) {
                        e.printStackTrace();
                        AppStage.getInstance().showMessage("Deletion Failed",
                                "An error occurred while deleting the order:\n" + e.getMessage(),
                                MessageDialog.MessageType.ERROR);
                    }
                },
                () -> {
                    // Cancel action
                });
    }

    public void handleInsert() {
        Order newOrder = new Order(0, new Date(), 0, 0, 0, 0, 0.0);

        List<FieldDefinition> fieldDefinitions = List.of(
                new FieldDefinition("orderDate", "Order Date", "DATE", newOrder.getSimpleDate()),
                new FieldDefinition("carID", "Car ID", "INT", newOrder.getCarID()),
                new FieldDefinition("customerID", "Customer ID", "INT", newOrder.getCustomerID()),
                new FieldDefinition("employeeID", "Employee ID", "INT", newOrder.getEmployeeID()),
                new FieldDefinition("quantity", "Quantity", "INT", newOrder.getQuantity()),
                new FieldDefinition("totalPrice", "Total Price", "DOUBLE", newOrder.getTotalPrice()));

        AppStage.getInstance().showModal(
                newOrder,
                fieldDefinitions,
                "Add New Order",
                "Add",
                () -> {
                    try {
                        if (orderService.insertOrder(newOrder)) {
                            orderList.add(newOrder);
                            AppStage.getInstance().showMessage("Success", "New order added successfully!",
                                    MessageDialog.MessageType.INFORMATION);
                        } else {
                            AppStage.getInstance().showMessage("Insertion Failed", "Unable to add new order.",
                                    MessageDialog.MessageType.ERROR);
                        }
                    } catch (SQLException e) {
                        AppStage.getInstance().showMessage("Error", "Database Error: " + e.getMessage(),
                                MessageDialog.MessageType.ERROR);
                    }
                },
                () -> {
                    System.out.println("Insertion cancelled.");
                });
    }

    public ObservableList<Order> loadAllOrders() {
        try {
            List<Order> orders = orderService.getAllOrders();
            orderList.setAll(orders);
        } catch (SQLException e) {
            e.printStackTrace();
            AppStage.getInstance().showMessage("Load Failed",
                    "An error occurred while loading orders:\n" + e.getMessage(), MessageDialog.MessageType.ERROR);
        }
        return filteredOrderList;
    }

    public List<CustomSearchBox> getSearchBoxes() {
        try {
            Map<String, String> columns = orderService.getColumnNamesAndTypes("orders");
            return columns.entrySet().stream()
                    .map(entry -> new CustomSearchBox(entry.getKey(), entry.getValue()))
                    .collect(Collectors.toList());
        } catch (SQLException e) {
            e.printStackTrace();
            AppStage.getInstance().showMessage("Error",
                    "Failed to load search criteria:\n" + e.getMessage(), MessageDialog.MessageType.ERROR);
            return new ArrayList<>();
        }
    }

    public void resetFilters() {
        filteredOrderList.setPredicate(order -> true);
    }

    public void handleExport() {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Save CSV");
        FileChooser.ExtensionFilter extFilter = new FileChooser.ExtensionFilter("CSV files (*.csv)", "*.csv");
        fileChooser.getExtensionFilters().add(extFilter);
        fileChooser.setInitialFileName("order_report.csv");

        Stage stage = (Stage) AppStage.getInstance().getScene().getWindow();
        File file = fileChooser.showSaveDialog(stage);

        if (file != null) {
            try {
                orderService.exportOrdersToCSV(filteredOrderList, file);
                AppStage.getInstance().showMessage("Export Successful",
                        "Orders have been exported successfully to:\n" + file.getAbsolutePath(),
                        MessageDialog.MessageType.INFORMATION);
            } catch (IOException e) {
                e.printStackTrace();
                AppStage.getInstance().showMessage("Export Failed",
                        "An error occurred while exporting orders:\n" + e.getMessage(),
                        MessageDialog.MessageType.ERROR);
            }
        }
    }

    public ObservableList<Order> getOrderList() {
        return filteredOrderList;
    }

    public void filterOrders(List<CustomSearchBox> searchBoxes) {
        filteredOrderList.setPredicate(order -> {
            for (CustomSearchBox searchBox : searchBoxes) {
                String dataType = searchBox.getDataType().toUpperCase();
                String input = searchBox.getText().trim();

                if (input.isEmpty()) {
                    searchBox.clearValidation();
                    continue;
                }

                boolean inputValid = isInputValid(dataType, input);
                if (!inputValid) {
                    searchBox.setValid(false);
                    return false;
                } else {
                    searchBox.setValid(true);
                    boolean matches = applyFilter(dataType, input, order.getFieldValue(searchBox.getColumnText()));
                    if (!matches) {
                        return false;
                    }
                }
            }
            return true;
        });
    }

    private boolean isInputValid(String dataType, String input) {
        switch (dataType) {
            case "INT":
                return isIntInputValid(input);
            case "DOUBLE":
            case "DECIMAL":
                return isDoubleInputValid(input);
            case "DATE":
                return isDateInputValid(input);
            default:
                return true;
        }
    }

    private boolean applyFilter(String dataType, String input, String fieldValue) {
        switch (dataType) {
            case "INT":
                return safeFilterInt(input, fieldValue);
            case "DOUBLE":
            case "DECIMAL":
                return safeFilterDecimal(input, fieldValue);
            case "DATE":
                return safeFilterDate(input, fieldValue);
            default:
                return fuzzyMatch(fieldValue, input);
        }
    }

    private boolean fuzzyMatch(String fieldValue, String input) {
        return FuzzySearch.ratio(fieldValue.toLowerCase(), input.toLowerCase()) >= 60;
    }

    private boolean safeFilterInt(String input, String fieldValue) {
        try {
            int actualValue = Integer.parseInt(fieldValue);
            return applyIntFilter(input, actualValue);
        } catch (NumberFormatException e) {
            return false;
        }
    }

    private boolean safeFilterDecimal(String input, String fieldValue) {
        try {
            double actualValue = Double.parseDouble(fieldValue);
            return applyDecimalFilter(input, actualValue);
        } catch (NumberFormatException e) {
            return false;
        }
    }

    private boolean safeFilterDate(String input, String fieldValue) {
        try {
            // Assuming input is in format YYYY-MM-DD
            java.time.LocalDate inputDate = java.time.LocalDate.parse(input);
            java.time.LocalDate actualDate = java.time.LocalDate.parse(fieldValue);
            return actualDate.equals(inputDate);
        } catch (Exception e) {
            return false;
        }
    }

    private boolean applyIntFilter(String input, int actualValue) {
        if (input.endsWith("-")) {
            int lowerBound = Integer.parseInt(input.replace("-", "").trim());
            return actualValue >= lowerBound;
        }
        if (input.startsWith("-")) {
            int upperBound = Integer.parseInt(input.replace("-", "").trim());
            return actualValue <= upperBound;
        }
        if (input.contains("-")) {
            String[] range = input.split("-");
            if (range.length != 2)
                return false;
            int lowerBound = Integer.parseInt(range[0].trim());
            int upperBound = Integer.parseInt(range[1].trim());
            return actualValue >= lowerBound && actualValue <= upperBound;
        }
        int exactValue = Integer.parseInt(input.trim());
        return actualValue == exactValue;
    }

    private boolean applyDecimalFilter(String input, double actualValue) {
        if (input.endsWith("-")) {
            double lowerBound = Double.parseDouble(input.replace("-", "").trim());
            return actualValue >= lowerBound;
        }
        if (input.startsWith("-")) {
            double upperBound = Double.parseDouble(input.replace("-", "").trim());
            return actualValue <= upperBound;
        }
        if (input.contains("-")) {
            String[] range = input.split("-");
            if (range.length != 2)
                return false;
            double lowerBound = Double.parseDouble(range[0].trim());
            double upperBound = Double.parseDouble(range[1].trim());
            return actualValue >= lowerBound && actualValue <= upperBound;
        }
        double exactValue = Double.parseDouble(input.trim());
        return actualValue == exactValue;
    }

    private boolean isIntInputValid(String input) {
        if (input.matches(regex))
            return false;
        try {
            if (input.equals("-"))
                return false;
            if (input.endsWith("-")) {
                Integer.parseInt(input.replace("-", "").trim());
                return true;
            }
            if (input.startsWith("-")) {
                if (input.length() == 1)
                    return false;
                Integer.parseInt(input.replace("-", "").trim());
                return true;
            }
            if (input.contains("-")) {
                String[] range = input.split("-");
                if (range.length == 2) {
                    Integer.parseInt(range[0].trim());
                    Integer.parseInt(range[1].trim());
                    return true;
                }
                return false;
            }

            Integer.parseInt(input.trim());
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    private boolean isDoubleInputValid(String input) {
        if (input.matches(regex))
            return false;
        try {
            if (input.equals("-"))
                return false;
            if (input.endsWith("-")) {
                Double.parseDouble(input.replace("-", "").trim());
                return true;
            }
            if (input.startsWith("-")) {
                if (input.length() == 1)
                    return false;
                Double.parseDouble(input.replace("-", "").trim());
                return true;
            }
            if (input.contains("-")) {
                String[] range = input.split("-");
                if (range.length == 2) {
                    Double.parseDouble(range[0].trim());
                    Double.parseDouble(range[1].trim());
                    return true;
                }
                return false;
            }

            Double.parseDouble(input.trim());
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    private boolean isDateInputValid(String input) {
        try {
            // Assuming input is in format YYYY-MM-DD
            java.time.LocalDate.parse(input);
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    public void handleDetails(Order order) {
        // Implement details view for Order
        // For example, show related Car, Customer, and Employee information
        try {
            // Assuming you have DAOs or Services to fetch related data
            // For simplicity, we'll just display order details here

            showOrderDetails(order);
        } catch (Exception e) {
            e.printStackTrace();
            AppStage.getInstance().showMessage("Error",
                    "Failed to load details for order:\n" + e.getMessage(),
                    MessageDialog.MessageType.ERROR);
        }
    }

    /**
     * Displays the DetailsDialog with order information and related entities.
     *
     * @param order The order whose details are to be displayed.
     */
    private void showOrderDetails(Order order) {
        DetailsDialog detailsDialog = AppStage.getInstance().getDetailsDialog();

        detailsDialog.setTitle("Details for Order ID: " + order.getOrderID());

        VBox contentBox = new VBox(10);
        contentBox.setPadding(new Insets(10));
        contentBox.setAlignment(Pos.TOP_LEFT);

        // Order Info
        VBox orderInfoBox = new VBox(5);
        Label orderIDLabel = new Label("Order ID: " + order.getOrderID());
        Label orderDateLabel = new Label("Order Date: " + order.getSimpleDate());
        Label carIDLabel = new Label("Car ID: " + order.getCarID());
        Label customerIDLabel = new Label("Customer ID: " + order.getCustomerID());
        Label employeeIDLabel = new Label("Employee ID: " + order.getEmployeeID());
        Label quantityLabel = new Label("Quantity: " + order.getQuantity());
        Label totalPriceLabel = new Label(String.format("Total Price: $%.2f", order.getTotalPrice()));

        orderInfoBox.getChildren().addAll(orderIDLabel, orderDateLabel, carIDLabel, customerIDLabel,
                employeeIDLabel, quantityLabel, totalPriceLabel);

        // Placeholder for related entities (Car, Customer, Employee)
        // You can fetch and display related data here if you have the necessary
        // DAOs/Services

        // Example:
        // Car car = carService.getCarById(order.getCarID());
        // Customer customer = customerService.getCustomerById(order.getCustomerID());
        // Employee employee = employeeService.getEmployeeById(order.getEmployeeID());

        // For demonstration, we'll add dummy labels
        Label relatedInfoLabel = new Label("Related Information:");
        Label carInfoLabel = new Label("Car Details: [Car Details Here]");
        Label customerInfoLabel = new Label("Customer Details: [Customer Details Here]");
        Label employeeInfoLabel = new Label("Employee Details: [Employee Details Here]");

        contentBox.getChildren().addAll(orderInfoBox, relatedInfoLabel, carInfoLabel, customerInfoLabel,
                employeeInfoLabel);

        detailsDialog.setCustomContent(contentBox);
        detailsDialog.show();
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\controller\HomeController.java
```
package com.example.controller;

import com.example.model.home.HomeStats;
import com.example.model.home.LatestOrder;
import com.example.model.home.LatestService;
import com.example.service.HomeService;

import java.sql.SQLException;
import java.util.List;

public class HomeController {
    private HomeService homeService;

    public HomeController() {
        this.homeService = new HomeService();
    }

    public HomeStats loadHomeStats() {
        try {
            return homeService.getHomeStats();
        } catch (SQLException e) {
            e.printStackTrace();
            return new HomeStats(0, 0, 0, 0);
        }
    }

    public List<LatestOrder> loadLatestOrders() {
        try {
            return homeService.getLatestOrders();
        } catch (SQLException e) {
            e.printStackTrace();
            return List.of();
        }
    }

    public List<LatestService> loadLatestServices() {
        try {
            return homeService.getLatestServices();
        } catch (SQLException e) {
            e.printStackTrace();
            return List.of();
        }
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\controller\EmployeeController.java
```
package com.example.controller;

import com.example.components.general.CustomSearchBox;
import com.example.components.dialog.DetailsDialog;
import com.example.components.dialog.FieldDefinition;
import com.example.components.dialog.MessageDialog;
import com.example.model.Employee;
import com.example.model.Order;
import com.example.service.EmployeeService;
import com.example.service.OrderService;
import com.example.AppStructure.AppStage;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.VBox;

import javafx.stage.FileChooser;
import javafx.stage.Stage;

import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import me.xdrop.fuzzywuzzy.FuzzySearch;

public class EmployeeController {
    private EmployeeService employeeService;
    private OrderService orderService;
    private ObservableList<Employee> employeeList;
    private FilteredList<Employee> filteredEmployeeList;
    private final String regex = ".*[a-zA-Z].*";

    public EmployeeController() {
        this.employeeService = new EmployeeService();
        this.orderService = new OrderService();
        this.employeeList = FXCollections.observableArrayList();
        this.filteredEmployeeList = new FilteredList<>(employeeList, p -> true);
    }

    /**
     * Handles the edit action for an employee.
     *
     * @param employee The Employee object to edit.
     */
    public void handleEdit(Employee employee) {
        List<FieldDefinition> fieldDefinitions = new ArrayList<>();
        fieldDefinitions.add(new FieldDefinition("firstName", "First Name", "VARCHAR", employee.getFirstName()));
        fieldDefinitions.add(new FieldDefinition("lastName", "Last Name", "VARCHAR", employee.getLastName()));
        fieldDefinitions.add(new FieldDefinition("position", "Position", "VARCHAR", employee.getPosition()));
        fieldDefinitions.add(new FieldDefinition("salary", "Salary", "DOUBLE", employee.getSalary()));
        fieldDefinitions.add(new FieldDefinition("hireDate", "Hire Date", "DATE", employee.getSimpleDate()));

        AppStage.getInstance().showModal(
                employee,
                fieldDefinitions,
                "Edit Employee",
                "Update",
                () -> {
                    try {
                        boolean success = employeeService.updateEmployee(employee);
                        if (success) {
                            AppStage.getInstance().showMessage("Success", "Employee updated successfully.",
                                    MessageDialog.MessageType.INFORMATION);
                        } else {
                            AppStage.getInstance().showMessage("Update Failed", "No changes were made to the employee.",
                                    MessageDialog.MessageType.ERROR);
                        }
                    } catch (SQLException e) {
                        e.printStackTrace();
                        AppStage.getInstance().showMessage("Update Failed",
                                "An error occurred while updating the employee:\n" + e.getMessage(),
                                MessageDialog.MessageType.ERROR);
                    }
                },
                () -> {
                    // Cancel action
                });
    }

    /**
     * Handles the delete action for an employee.
     *
     * @param employee The Employee object to delete.
     */
    public void handleDelete(Employee employee) {
        AppStage.getInstance().showConfirmation("Delete Confirmation",
                "Are you sure you want to delete the following employee?\n" + employee.toString(),
                () -> {
                    try {
                        boolean success = employeeService.deleteEmployee(employee.getEmployeeID());
                        if (success) {
                            employeeList.remove(employee);
                            AppStage.getInstance().showMessage("Success", "Employee deleted successfully.",
                                    MessageDialog.MessageType.INFORMATION);
                        } else {
                            AppStage.getInstance().showMessage("Deletion Failed",
                                    "No employee found with the specified ID.", MessageDialog.MessageType.ERROR);
                        }
                    } catch (SQLException e) {
                        e.printStackTrace();
                        AppStage.getInstance().showMessage("Deletion Failed",
                                "An error occurred while deleting the employee:\n" + e.getMessage(),
                                MessageDialog.MessageType.ERROR);
                    }
                },
                () -> {
                    // Cancel action
                });
    }

    /**
     * Handles the insert action for adding a new employee.
     */
    public void handleInsert() {
        Employee newEmployee = new Employee(0, "", "", "", 0.0, new Date());

        List<FieldDefinition> fieldDefinitions = List.of(
                new FieldDefinition("firstName", "First Name", "VARCHAR", newEmployee.getFirstName()),
                new FieldDefinition("lastName", "Last Name", "VARCHAR", newEmployee.getLastName()),
                new FieldDefinition("position", "Position", "VARCHAR", newEmployee.getPosition()),
                new FieldDefinition("salary", "Salary", "DOUBLE", newEmployee.getSalary()),
                new FieldDefinition("hireDate", "Hire Date", "DATE", newEmployee.getSimpleDate()));

        AppStage.getInstance().showModal(
                newEmployee,
                fieldDefinitions,
                "Add New Employee",
                "Add",
                () -> {
                    try {
                        if (employeeService.insertEmployee(newEmployee)) {
                            employeeList.add(newEmployee);
                            AppStage.getInstance().showMessage("Success", "New employee added successfully!",
                                    MessageDialog.MessageType.INFORMATION);
                        } else {
                            AppStage.getInstance().showMessage("Insertion Failed", "Unable to add new employee.",
                                    MessageDialog.MessageType.ERROR);
                        }
                    } catch (SQLException e) {
                        AppStage.getInstance().showMessage("Error", "Database Error: " + e.getMessage(),
                                MessageDialog.MessageType.ERROR);
                    }
                },
                () -> {
                    System.out.println("Insertion cancelled.");
                });
    }

    public ObservableList<Employee> loadAllEmployees() {
        try {
            List<Employee> employees = employeeService.getAllEmployees();
            employeeList.setAll(employees);
        } catch (SQLException e) {
            e.printStackTrace();
            AppStage.getInstance().showMessage("Load Failed",
                    "An error occurred while loading employees:\n" + e.getMessage(), MessageDialog.MessageType.ERROR);
        }
        return filteredEmployeeList;
    }

    /**
     * Retrieves the search boxes for filtering employees.
     *
     * @return A list of CustomSearchBox objects.
     */
    public List<CustomSearchBox> getSearchBoxes() {
        try {
            Map<String, String> columns = employeeService.getColumnNamesAndTypes();
            return columns.entrySet().stream()
                    .map(entry -> new CustomSearchBox(entry.getKey(), entry.getValue()))
                    .collect(Collectors.toList());
        } catch (SQLException e) {
            e.printStackTrace();
            AppStage.getInstance().showMessage("Error",
                    "Failed to load search criteria:\n" + e.getMessage(), MessageDialog.MessageType.ERROR);
            return new ArrayList<>();
        }
    }

    /**
     * Resets all filters applied to the employee list.
     */
    public void resetFilters() {
        filteredEmployeeList.setPredicate(employee -> true);
    }

    /**
     * Handles the export action to save employees as a CSV file.
     */
    public void handleExport() {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Save CSV");
        FileChooser.ExtensionFilter extFilter = new FileChooser.ExtensionFilter("CSV files (*.csv)", "*.csv");
        fileChooser.getExtensionFilters().add(extFilter);
        fileChooser.setInitialFileName("employee_report.csv");

        Stage stage = (Stage) AppStage.getInstance().getScene().getWindow();
        File file = fileChooser.showSaveDialog(stage);

        if (file != null) {
            try {
                employeeService.exportEmployeesToCSV(filteredEmployeeList, file);
                AppStage.getInstance().showMessage("Export Successful",
                        "Employees have been exported successfully to:\n" + file.getAbsolutePath(),
                        MessageDialog.MessageType.INFORMATION);
            } catch (IOException e) {
                e.printStackTrace();
                AppStage.getInstance().showMessage("Export Failed",
                        "An error occurred while exporting employees:\n" + e.getMessage(),
                        MessageDialog.MessageType.ERROR);
            }
        }
    }

    /**
     * Retrieves the ObservableList of employees.
     *
     * @return The filtered list of employees.
     */
    public ObservableList<Employee> getEmployeeList() {
        return filteredEmployeeList;
    }

    /**
     * Applies filters to the employee list based on the provided search criteria.
     *
     * @param searchBoxes The list of search criteria.
     */
    public void filterEmployees(List<CustomSearchBox> searchBoxes) {
        filteredEmployeeList.setPredicate(employee -> {
            for (CustomSearchBox searchBox : searchBoxes) {
                String dataType = searchBox.getDataType().toUpperCase();
                String input = searchBox.getText().trim();

                if (input.isEmpty()) {
                    searchBox.clearValidation();
                    continue;
                }

                boolean inputValid = isInputValid(dataType, input);
                if (!inputValid) {
                    searchBox.setValid(false);
                    return false;
                } else {
                    searchBox.setValid(true);
                    boolean matches = applyFilter(dataType, input, employee.getFieldValue(searchBox.getColumnText()));
                    if (!matches) {
                        return false;
                    }
                }
            }
            return true;
        });
    }

    /**
     * Validates the input based on the data type.
     *
     * @param dataType The data type of the field.
     * @param input    The user input.
     * @return True if valid; otherwise, false.
     */
    private boolean isInputValid(String dataType, String input) {
        switch (dataType) {
            case "INT":
                return isIntInputValid(input);
            case "DOUBLE":
            case "DECIMAL":
                return isDoubleInputValid(input);
            case "DATE":
                return isDateInputValid(input);
            default:
                return true;
        }
    }

    /**
     * Applies the appropriate filter based on the data type.
     *
     * @param dataType   The data type of the field.
     * @param input      The user input.
     * @param fieldValue The value of the field in the Employee object.
     * @return True if the field matches the filter; otherwise, false.
     */
    private boolean applyFilter(String dataType, String input, String fieldValue) {
        switch (dataType) {
            case "INT":
                return safeFilterInt(input, fieldValue);
            case "DOUBLE":
            case "DECIMAL":
                return safeFilterDecimal(input, fieldValue);
            case "DATE":
                return safeFilterDate(input, fieldValue);
            default:
                return fuzzyMatch(fieldValue, input);
        }
    }

    private String getCurrentDate() {
        Date currentDate = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        return sdf.format(currentDate);
    }

    /**
     * Performs a fuzzy match between the field value and the input.
     *
     * @param fieldValue The value of the field in the Employee object.
     * @param input      The user input.
     * @return True if the fuzzy match ratio is >= 60; otherwise, false.
     */
    private boolean fuzzyMatch(String fieldValue, String input) {
        return FuzzySearch.ratio(fieldValue.toLowerCase(), input.toLowerCase()) >= 60;
    }

    /**
     * Safely applies integer-based filters.
     *
     * @param input      The user input.
     * @param fieldValue The value of the field in the Employee object.
     * @return True if the field matches the filter; otherwise, false.
     */
    private boolean safeFilterInt(String input, String fieldValue) {
        try {
            int actualValue = Integer.parseInt(fieldValue);
            return applyIntFilter(input, actualValue);
        } catch (NumberFormatException e) {
            return false;
        }
    }

    /**
     * Safely applies decimal-based filters.
     *
     * @param input      The user input.
     * @param fieldValue The value of the field in the Employee object.
     * @return True if the field matches the filter; otherwise, false.
     */
    private boolean safeFilterDecimal(String input, String fieldValue) {
        try {
            double actualValue = Double.parseDouble(fieldValue);
            return applyDecimalFilter(input, actualValue);
        } catch (NumberFormatException e) {
            return false;
        }
    }

    /**
     * Safely applies date-based filters.
     *
     * @param input      The user input.
     * @param fieldValue The value of the field in the Employee object.
     * @return True if the field matches the filter; otherwise, false.
     */
    private boolean safeFilterDate(String input, String fieldValue) {
        try {
            // Assuming input is in format YYYY-MM-DD
            java.time.LocalDate inputDate = java.time.LocalDate.parse(input);
            java.time.LocalDate actualDate = java.time.LocalDate.parse(fieldValue);
            return actualDate.equals(inputDate);
        } catch (Exception e) {
            return false;
        }
    }

    /**
     * Applies integer-based filtering logic.
     *
     * @param input       The user input.
     * @param actualValue The actual integer value from the Employee object.
     * @return True if the actual value matches the filter criteria; otherwise,
     *         false.
     */
    private boolean applyIntFilter(String input, int actualValue) {
        if (input.endsWith("-")) {
            int lowerBound = Integer.parseInt(input.replace("-", "").trim());
            return actualValue >= lowerBound;
        }
        if (input.startsWith("-")) {
            int upperBound = Integer.parseInt(input.replace("-", "").trim());
            return actualValue <= upperBound;
        }
        if (input.contains("-")) {
            String[] range = input.split("-");
            if (range.length != 2)
                return false;
            int lowerBound = Integer.parseInt(range[0].trim());
            int upperBound = Integer.parseInt(range[1].trim());
            return actualValue >= lowerBound && actualValue <= upperBound;
        }
        int exactValue = Integer.parseInt(input.trim());
        return actualValue == exactValue;
    }

    /**
     * Applies decimal-based filtering logic.
     *
     * @param input       The user input.
     * @param actualValue The actual double value from the Employee object.
     * @return True if the actual value matches the filter criteria; otherwise,
     *         false.
     */
    private boolean applyDecimalFilter(String input, double actualValue) {
        if (input.endsWith("-")) {
            double lowerBound = Double.parseDouble(input.replace("-", "").trim());
            return actualValue >= lowerBound;
        }
        if (input.startsWith("-")) {
            double upperBound = Double.parseDouble(input.replace("-", "").trim());
            return actualValue <= upperBound;
        }
        if (input.contains("-")) {
            String[] range = input.split("-");
            if (range.length != 2)
                return false;
            double lowerBound = Double.parseDouble(range[0].trim());
            double upperBound = Double.parseDouble(range[1].trim());
            return actualValue >= lowerBound && actualValue <= upperBound;
        }
        double exactValue = Double.parseDouble(input.trim());
        return actualValue == exactValue;
    }

    /**
     * Validates integer-based input.
     *
     * @param input The user input.
     * @return True if valid; otherwise, false.
     */
    private boolean isIntInputValid(String input) {
        if (input.matches(regex))
            return false;
        try {
            if (input.equals("-"))
                return false;
            if (input.endsWith("-")) {
                Integer.parseInt(input.replace("-", "").trim());
                return true;
            }
            if (input.startsWith("-")) {
                if (input.length() == 1)
                    return false;
                Integer.parseInt(input.replace("-", "").trim());
                return true;
            }
            if (input.contains("-")) {
                String[] range = input.split("-");
                if (range.length == 2) {
                    Integer.parseInt(range[0].trim());
                    Integer.parseInt(range[1].trim());
                    return true;
                }
                return false;
            }

            Integer.parseInt(input.trim());
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    /**
     * Validates double-based input.
     *
     * @param input The user input.
     * @return True if valid; otherwise, false.
     */
    private boolean isDoubleInputValid(String input) {
        if (input.matches(regex))
            return false;
        try {
            if (input.equals("-"))
                return false;
            if (input.endsWith("-")) {
                Double.parseDouble(input.replace("-", "").trim());
                return true;
            }
            if (input.startsWith("-")) {
                if (input.length() == 1)
                    return false;
                Double.parseDouble(input.replace("-", "").trim());
                return true;
            }
            if (input.contains("-")) {
                String[] range = input.split("-");
                if (range.length == 2) {
                    Double.parseDouble(range[0].trim());
                    Double.parseDouble(range[1].trim());
                    return true;
                }
                return false;
            }

            Double.parseDouble(input.trim());
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    /**
     * Validates date-based input.
     *
     * @param input The user input.
     * @return True if valid; otherwise, false.
     */
    private boolean isDateInputValid(String input) {
        try {
            // Assuming input is in format YYYY-MM-DD
            java.time.LocalDate.parse(input);
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    /**
     * Handles the details action for an employee.
     *
     * @param employee The Employee object whose details are to be displayed.
     */
    public void handleDetails(Employee employee) {
        try {
            // Implement details view for Employee
            // For example, show related Orders if applicable

            showEmployeeDetails(employee);
        } catch (Exception e) {
            e.printStackTrace();
            AppStage.getInstance().showMessage("Error",
                    "Failed to load details for employee:\n" + e.getMessage(),
                    MessageDialog.MessageType.ERROR);
        }
    }

    private void showEmployeeDetails(Employee employee) {
        DetailsDialog detailsDialog = AppStage.getInstance().getDetailsDialog();

        detailsDialog.setTitle("Details for Employee ID: " + employee.getEmployeeID());

        VBox contentBox = new VBox(10);
        contentBox.setPadding(new Insets(10));
        contentBox.setAlignment(Pos.TOP_LEFT);

        // Employee Info
        VBox employeeInfoBox = new VBox(5);
        Label employeeIDLabel = new Label("Employee ID: " + employee.getEmployeeID());
        Label firstNameLabel = new Label("First Name: " + employee.getFirstName());
        Label lastNameLabel = new Label("Last Name: " + employee.getLastName());
        Label positionLabel = new Label("Position: " + employee.getPosition());
        Label salaryLabel = new Label(String.format("Salary: $%.2f", employee.getSalary()));
        Label hireDateLabel = new Label("Hire Date: " + employee.getSimpleDate());

        employeeInfoBox.getChildren().addAll(employeeIDLabel, firstNameLabel, lastNameLabel,
                positionLabel, salaryLabel, hireDateLabel);

        // Related Orders Info
        VBox ordersBox = new VBox(5);
        Label ordersLabel = new Label("Orders Managed:");
        ordersBox.getChildren().add(ordersLabel);

        try {
            List<Order> orders = orderService.getOrdersByEmployeeId(employee.getEmployeeID());

            if (orders.isEmpty()) {
                Label noOrdersLabel = new Label("No orders managed by this employee.");
                ordersBox.getChildren().add(noOrdersLabel);
            } else {
                TableView<Order> ordersTable = createOrdersTableView();
                ObservableList<Order> ordersData = FXCollections.observableArrayList(orders);
                ordersTable.setItems(ordersData);
                ordersTable.setPrefHeight(200); // Adjust height as needed

                ordersBox.getChildren().add(ordersTable);
            }
        } catch (SQLException e) {
            System.out.println("Cannot display orders details for this employee");
            e.printStackTrace();
            Label errorLabel = new Label("Error fetching orders: " + e.getMessage());
            ordersBox.getChildren().add(errorLabel);
        }

        contentBox.getChildren().addAll(employeeInfoBox, ordersBox);

        detailsDialog.setCustomContent(contentBox);
        detailsDialog.show();
    }

    /**
     * Creates and configures a TableView for displaying orders.
     *
     * @return Configured TableView<Order> instance.
     */
    private TableView<Order> createOrdersTableView() {
        TableView<Order> ordersTable = new TableView<>();

        // Define table columns
        TableColumn<Order, Number> orderIDCol = new TableColumn<>("Order ID");
        orderIDCol.setCellValueFactory(new PropertyValueFactory<>("orderID"));
        orderIDCol.setPrefWidth(80);

        TableColumn<Order, Date> orderDateCol = new TableColumn<>("Order Date");
        orderDateCol.setCellValueFactory(new PropertyValueFactory<>("orderDate"));
        orderDateCol.setPrefWidth(120);

        TableColumn<Order, Number> carIDCol = new TableColumn<>("Car ID");
        carIDCol.setCellValueFactory(new PropertyValueFactory<>("carID"));
        carIDCol.setPrefWidth(80);

        TableColumn<Order, Number> customerIDCol = new TableColumn<>("Customer ID");
        customerIDCol.setCellValueFactory(new PropertyValueFactory<>("customerID"));
        customerIDCol.setPrefWidth(100);

        TableColumn<Order, Number> quantityCol = new TableColumn<>("Quantity");
        quantityCol.setCellValueFactory(new PropertyValueFactory<>("quantity"));
        quantityCol.setPrefWidth(80);

        TableColumn<Order, Number> totalPriceCol = new TableColumn<>("Total Price");
        totalPriceCol.setCellValueFactory(new PropertyValueFactory<>("totalPrice"));
        totalPriceCol.setPrefWidth(100);

        // Add columns to the table
        ordersTable.getColumns().addAll(orderIDCol, orderDateCol, carIDCol, customerIDCol, quantityCol, totalPriceCol);

        // Optional: Customize table appearance
        ordersTable.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);
        ordersTable.getStyleClass().add("table-view"); // Ensure your CSS styles this class appropriately

        return ordersTable;
    }

}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\controller\CustomerController.java
```
package com.example.controller;

import com.example.components.general.CustomSearchBox;
import com.example.components.dialog.DetailsDialog;
import com.example.components.dialog.FieldDefinition;
import com.example.components.dialog.MessageDialog;
import com.example.model.Customer;
import com.example.model.Payment;
import com.example.model.Service;
import com.example.service.CustomerService;
import com.example.AppStructure.AppStage;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.VBox;

import javafx.stage.FileChooser;
import javafx.stage.Stage;

import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.*;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import me.xdrop.fuzzywuzzy.FuzzySearch;

public class CustomerController {
    private CustomerService customerService;
    private ObservableList<Customer> customerList;
    private FilteredList<Customer> filteredCustomerList;
    private final String regex = ".*[a-zA-Z].*";

    public CustomerController() {
        this.customerService = new CustomerService();
        this.customerList = FXCollections.observableArrayList();
        this.filteredCustomerList = new FilteredList<>(customerList, p -> true);
    }

    public void handleEdit(Customer customer) {
        List<FieldDefinition> fieldDefinitions = new ArrayList<>();
        fieldDefinitions.add(new FieldDefinition("firstName", "First Name", "VARCHAR", customer.getFirstName()));
        fieldDefinitions.add(new FieldDefinition("lastName", "Last Name", "VARCHAR", customer.getLastName()));
        fieldDefinitions.add(new FieldDefinition("email", "Email", "VARCHAR", customer.getEmail()));
        fieldDefinitions.add(new FieldDefinition("phone", "Phone", "VARCHAR", customer.getPhone()));
        fieldDefinitions.add(new FieldDefinition("address", "Address", "VARCHAR", customer.getAddress()));
        fieldDefinitions.add(new FieldDefinition("city", "City", "VARCHAR", customer.getCity()));
        fieldDefinitions.add(new FieldDefinition("state", "State", "VARCHAR", customer.getState()));
        fieldDefinitions.add(new FieldDefinition("zipCode", "Zip Code", "VARCHAR", customer.getZipCode()));

        AppStage.getInstance().showModal(
                customer,
                fieldDefinitions,
                "Edit Customer",
                "Update",
                () -> {
                    try {
                        boolean success = customerService.updateCustomer(customer);
                        if (success) {
                            AppStage.getInstance().showMessage("Success", "Customer updated successfully.",
                                    MessageDialog.MessageType.INFORMATION);
                        } else {
                            AppStage.getInstance().showMessage("Update Failed", "No changes were made to the customer.",
                                    MessageDialog.MessageType.ERROR);
                        }
                    } catch (SQLException e) {
                        e.printStackTrace();
                        AppStage.getInstance().showMessage("Update Failed",
                                "An error occurred while updating the customer:\n" + e.getMessage(),
                                MessageDialog.MessageType.ERROR);
                    }
                },
                () -> {
                    // Cancel action
                });
    }

    public void handleDelete(Customer customer) {
        AppStage.getInstance().showConfirmation("Delete Confirmation",
                "Are you sure you want to delete the following customer?\n" + customer.toString(),
                () -> {
                    try {
                        boolean success = customerService.deleteCustomer(customer.getCustomerID());
                        if (success) {
                            customerList.remove(customer);
                            AppStage.getInstance().showMessage("Success", "Customer deleted successfully.",
                                    MessageDialog.MessageType.INFORMATION);
                        } else {
                            AppStage.getInstance().showMessage("Deletion Failed",
                                    "No customer found with the specified ID.", MessageDialog.MessageType.ERROR);
                        }
                    } catch (SQLException e) {
                        e.printStackTrace();
                        AppStage.getInstance().showMessage("Deletion Failed",
                                "An error occurred while deleting the customer:\n" + e.getMessage(),
                                MessageDialog.MessageType.ERROR);
                    }
                },
                () -> {
                    // Cancel action
                });
    }

    public void handleInsert() {
        Customer newCustomer = new Customer(0, "", "", "", "", "", "", "", "");

        List<FieldDefinition> fieldDefinitions = List.of(
                new FieldDefinition("firstName", "First Name", "VARCHAR", ""),
                new FieldDefinition("lastName", "Last Name", "VARCHAR", ""),
                new FieldDefinition("email", "Email", "VARCHAR", ""),
                new FieldDefinition("phone", "Phone", "VARCHAR", ""),
                new FieldDefinition("address", "Address", "VARCHAR", ""),
                new FieldDefinition("city", "City", "VARCHAR", ""),
                new FieldDefinition("state", "State", "VARCHAR", ""),
                new FieldDefinition("zipCode", "Zip Code", "VARCHAR", ""));

        AppStage.getInstance().showModal(
                newCustomer,
                fieldDefinitions,
                "Add New Customer",
                "Add",
                () -> {
                    try {
                        if (customerService.insertCustomer(newCustomer)) {
                            customerList.add(newCustomer);
                            AppStage.getInstance().showMessage("Success", "New customer added successfully!",
                                    MessageDialog.MessageType.INFORMATION);
                        } else {
                            AppStage.getInstance().showMessage("Insertion Failed", "Unable to add new customer.",
                                    MessageDialog.MessageType.ERROR);
                        }
                    } catch (SQLException e) {
                        AppStage.getInstance().showMessage("Error", "Database Error: " + e.getMessage(),
                                MessageDialog.MessageType.ERROR);
                    }
                },
                () -> {
                    System.out.println("Insertion cancelled.");
                });
    }

    public ObservableList<Customer> loadAllCustomers() {
        try {
            List<Customer> customers = customerService.getAllCustomers();
            customerList.setAll(customers);
        } catch (SQLException e) {
            e.printStackTrace();
            AppStage.getInstance().showMessage("Load Failed",
                    "An error occurred while loading customers:\n" + e.getMessage(), MessageDialog.MessageType.ERROR);
        }
        return filteredCustomerList;
    }

    public List<CustomSearchBox> getSearchBoxes() {
        try {
            Map<String, String> columns = customerService.getColumnNamesAndTypes("customers");
            return columns.entrySet().stream()
                    .map(entry -> new CustomSearchBox(entry.getKey(), entry.getValue()))
                    .collect(Collectors.toList());
        } catch (SQLException e) {
            e.printStackTrace();
            AppStage.getInstance().showMessage("Error",
                    "Failed to load search criteria:\n" + e.getMessage(), MessageDialog.MessageType.ERROR);
            return new ArrayList<>();
        }
    }

    public void resetFilters() {
        filteredCustomerList.setPredicate(customer -> true);
    }

    public void handleExport() {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Save CSV");
        FileChooser.ExtensionFilter extFilter = new FileChooser.ExtensionFilter("CSV files (*.csv)", "*.csv");
        fileChooser.getExtensionFilters().add(extFilter);
        fileChooser.setInitialFileName("customer_report.csv");

        Stage stage = (Stage) AppStage.getInstance().getScene().getWindow();
        File file = fileChooser.showSaveDialog(stage);

        if (file != null) {
            try {
                customerService.exportCustomersToCSV(filteredCustomerList, file);
                AppStage.getInstance().showMessage("Export Successful",
                        "Customers have been exported successfully to:\n" + file.getAbsolutePath(),
                        MessageDialog.MessageType.INFORMATION);
            } catch (IOException e) {
                e.printStackTrace();
                AppStage.getInstance().showMessage("Export Failed",
                        "An error occurred while exporting customers:\n" + e.getMessage(),
                        MessageDialog.MessageType.ERROR);
            }
        }
    }

    public ObservableList<Customer> getCustomerList() {
        return filteredCustomerList;
    }

    public void filterCustomers(List<CustomSearchBox> searchBoxes) {
        filteredCustomerList.setPredicate(customer -> {
            for (CustomSearchBox searchBox : searchBoxes) {
                String dataType = searchBox.getDataType().toUpperCase();
                String input = searchBox.getText().trim();

                if (input.isEmpty()) {
                    searchBox.clearValidation();
                    continue;
                }

                boolean inputValid = isInputValid(dataType, input);
                if (!inputValid) {
                    searchBox.setValid(false);
                    return false;
                } else {
                    searchBox.setValid(true);
                    boolean matches = applyFilter(dataType, input, customer.getFieldValue(searchBox.getColumnText()));
                    if (!matches) {
                        return false;
                    }
                }
            }
            return true;
        });
    }

    private boolean isInputValid(String dataType, String input) {
        switch (dataType) {
            case "INT":
                return isIntInputValid(input);
            case "DOUBLE":
            case "DECIMAL":
                return isDoubleInputValid(input);
            default:
                return true;
        }
    }

    private boolean applyFilter(String dataType, String input, String fieldValue) {
        switch (dataType) {
            case "INT":
                return safeFilterInt(input, fieldValue);
            case "DOUBLE":
            case "DECIMAL":
                return safeFilterDecimal(input, fieldValue);
            default:
                return fuzzyMatch(fieldValue, input);
        }
    }

    private boolean fuzzyMatch(String fieldValue, String input) {
        return FuzzySearch.ratio(fieldValue.toLowerCase(), input.toLowerCase()) >= 60;
    }

    private boolean safeFilterInt(String input, String fieldValue) {
        try {
            int actualValue = Integer.parseInt(fieldValue);
            return applyIntFilter(input, actualValue);
        } catch (NumberFormatException e) {
            return false;
        }
    }

    private boolean safeFilterDecimal(String input, String fieldValue) {
        try {
            double actualValue = Double.parseDouble(fieldValue);
            return applyDecimalFilter(input, actualValue);
        } catch (NumberFormatException e) {
            return false;
        }
    }

    private boolean applyIntFilter(String input, int actualValue) {
        if (input.endsWith("-")) {
            int lowerBound = Integer.parseInt(input.replace("-", "").trim());
            return actualValue >= lowerBound;
        }
        if (input.startsWith("-")) {
            int upperBound = Integer.parseInt(input.replace("-", "").trim());
            return actualValue <= upperBound;
        }
        if (input.contains("-")) {
            String[] range = input.split("-");
            if (range.length != 2)
                return false;
            int lowerBound = Integer.parseInt(range[0].trim());
            int upperBound = Integer.parseInt(range[1].trim());
            return actualValue >= lowerBound && actualValue <= upperBound;
        }
        int exactValue = Integer.parseInt(input.trim());
        return actualValue == exactValue;
    }

    private boolean applyDecimalFilter(String input, double actualValue) {
        if (input.endsWith("-")) {
            double lowerBound = Double.parseDouble(input.replace("-", "").trim());
            return actualValue >= lowerBound;
        }
        if (input.startsWith("-")) {
            double upperBound = Double.parseDouble(input.replace("-", "").trim());
            return actualValue <= upperBound;
        }
        if (input.contains("-")) {
            String[] range = input.split("-");
            if (range.length != 2)
                return false;
            double lowerBound = Double.parseDouble(range[0].trim());
            double upperBound = Double.parseDouble(range[1].trim());
            return actualValue >= lowerBound && actualValue <= upperBound;
        }
        double exactValue = Double.parseDouble(input.trim());
        return actualValue == exactValue;
    }

    private boolean isIntInputValid(String input) {
        if (input.matches(regex))
            return false;
        try {
            if (input.equals("-"))
                return false;
            if (input.endsWith("-")) {
                Integer.parseInt(input.replace("-", "").trim());
                return true;
            }
            if (input.startsWith("-")) {
                if (input.length() == 1)
                    return false;
                Integer.parseInt(input.replace("-", "").trim());
                return true;
            }
            if (input.contains("-")) {
                String[] range = input.split("-");
                if (range.length == 2) {
                    Integer.parseInt(range[0].trim());
                    Integer.parseInt(range[1].trim());
                    return true;
                }
                return false;
            }

            Integer.parseInt(input.trim());
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    private boolean isDoubleInputValid(String input) {
        if (input.matches(regex))
            return false;
        try {
            if (input.equals("-"))
                return false;
            if (input.endsWith("-")) {
                Double.parseDouble(input.replace("-", "").trim());
                return true;
            }
            if (input.startsWith("-")) {
                if (input.length() == 1)
                    return false;
                Double.parseDouble(input.replace("-", "").trim());
                return true;
            }
            if (input.contains("-")) {
                String[] range = input.split("-");
                if (range.length == 2) {
                    Double.parseDouble(range[0].trim());
                    Double.parseDouble(range[1].trim());
                    return true;
                }
                return false;
            }

            Double.parseDouble(input.trim());
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    public void handleDetails(Customer customer) {
        try {
            List<Service> services = customerService.getServicesForCustomer(customer.getCustomerID());
            List<Payment> payments = customerService.getPaymentsForCustomer(customer.getCustomerID());

            showCustomerDetails(customer, services, payments);
        } catch (SQLException e) {
            e.printStackTrace();
            AppStage.getInstance().showMessage("Error",
                    "Failed to load details for customer:\n" + e.getMessage(),
                    MessageDialog.MessageType.ERROR);
        }
    }

    /**
     * Displays the DetailsDialog with customer information, services performed, and
     * payment records.
     *
     * @param customer The customer whose details are to be displayed.
     * @param services The list of service records for the customer.
     * @param payments The list of payment records for the customer.
     */
    private void showCustomerDetails(Customer customer, List<Service> services, List<Payment> payments) {

        DetailsDialog detailsDialog = AppStage.getInstance().getDetailsDialog();

        detailsDialog.setTitle("Details for Customer: " + customer.getFirstName() + " " + customer.getLastName());

        VBox contentBox = new VBox(10);
        contentBox.setPadding(new Insets(10));
        contentBox.setAlignment(Pos.TOP_LEFT);

        // Customer Info
        VBox customerInfoBox = new VBox(5);
        Label customerIDLabel = new Label("Customer ID: " + customer.getCustomerID());
        Label firstNameLabel = new Label("First Name: " + customer.getFirstName());
        Label lastNameLabel = new Label("Last Name: " + customer.getLastName());
        Label emailLabel = new Label("Email: " + customer.getEmail());
        Label phoneLabel = new Label("Phone: " + customer.getPhone());
        Label addressLabel = new Label("Address: " + customer.getAddress());
        Label cityLabel = new Label("City: " + customer.getCity());
        Label stateLabel = new Label("State: " + customer.getState());
        Label zipCodeLabel = new Label("Zip Code: " + customer.getZipCode());

        customerInfoBox.getChildren().addAll(customerIDLabel, firstNameLabel, lastNameLabel, emailLabel,
                phoneLabel, addressLabel, cityLabel, stateLabel, zipCodeLabel);

        // Services Table
        TableView<Service> servicesTable = new TableView<>();
        servicesTable.setPrefHeight(200);
        servicesTable.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);

        TableColumn<Service, Integer> serviceIDCol = new TableColumn<>("Service ID");
        serviceIDCol.setCellValueFactory(new PropertyValueFactory<>("serviceID"));

        TableColumn<Service, Integer> carIDCol = new TableColumn<>("Car ID");
        carIDCol.setCellValueFactory(new PropertyValueFactory<>("carID"));

        TableColumn<Service, Date> serviceDateCol = new TableColumn<>("Date");
        serviceDateCol.setCellValueFactory(new PropertyValueFactory<>("serviceDate"));

        TableColumn<Service, String> serviceDescCol = new TableColumn<>("Description");
        serviceDescCol.setCellValueFactory(new PropertyValueFactory<>("serviceDescription"));

        TableColumn<Service, Double> costCol = new TableColumn<>("Cost");
        costCol.setCellValueFactory(new PropertyValueFactory<>("cost"));

        servicesTable.getColumns().addAll(serviceIDCol, carIDCol, serviceDateCol, serviceDescCol, costCol);
        servicesTable.getItems().addAll(services);

        // Payments Table
        TableView<Payment> paymentsTable = new TableView<>();
        paymentsTable.setPrefHeight(200);
        paymentsTable.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);

        TableColumn<Payment, Integer> paymentIDCol = new TableColumn<>("Payment ID");
        paymentIDCol.setCellValueFactory(new PropertyValueFactory<>("paymentID"));

        TableColumn<Payment, Date> paymentDateCol = new TableColumn<>("Date");
        paymentDateCol.setCellValueFactory(new PropertyValueFactory<>("paymentDate"));

        TableColumn<Payment, String> paymentMethodCol = new TableColumn<>("Method");
        paymentMethodCol.setCellValueFactory(new PropertyValueFactory<>("paymentMethod"));

        TableColumn<Payment, Double> amountCol = new TableColumn<>("Amount");
        amountCol.setCellValueFactory(new PropertyValueFactory<>("amount"));

        paymentsTable.getColumns().addAll(paymentIDCol, paymentDateCol, paymentMethodCol, amountCol);
        paymentsTable.getItems().addAll(payments);

        // Total Payments
        double totalPayments = payments.stream().mapToDouble(Payment::getAmount).sum();
        Label totalPaymentsLabel = new Label(String.format("Total Payments: $%.2f", totalPayments));
        totalPaymentsLabel.setStyle("-fx-font-size: 14px; -fx-font-weight: bold;");

        contentBox.getChildren().addAll(customerInfoBox,
                new Label("Services Performed:"), servicesTable,
                new Label("Payment Records:"), paymentsTable, totalPaymentsLabel);

        detailsDialog.setCustomContent(contentBox);
        detailsDialog.show();
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\controller\CarController.java
```
package com.example.controller;

import com.example.components.general.CustomSearchBox;
import com.example.components.dialog.FieldDefinition;
import com.example.components.dialog.MessageDialog;
import com.example.components.dialog.DetailsDialog;
import com.example.AppStructure.AppStage;
import com.example.model.Car;
import com.example.model.CarServiceRecord;
import com.example.service.CarService;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.VBox;
import javafx.stage.FileChooser;
import javafx.stage.Stage;

import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.*;
import java.util.stream.Collectors;
import me.xdrop.fuzzywuzzy.FuzzySearch;

public class CarController {
    private CarService carService;
    private ObservableList<Car> carList;
    private FilteredList<Car> filteredCarList;
    private final String regex = ".*[a-zA-Z].*";

    public CarController() {
        this.carService = new CarService();
        this.carList = FXCollections.observableArrayList();
        this.filteredCarList = new FilteredList<>(carList, p -> true);
    }

    public void handleEdit(Car car) {
        List<FieldDefinition> fieldDefinitions = new ArrayList<>();
        fieldDefinitions.add(new FieldDefinition("make", "Make", "VARCHAR", car.getMake()));
        fieldDefinitions.add(new FieldDefinition("model", "Model", "VARCHAR", car.getModel()));
        fieldDefinitions.add(new FieldDefinition("year", "Year", "INT", car.getYear()));
        fieldDefinitions.add(new FieldDefinition("price", "Price", "DOUBLE", car.getPrice()));
        fieldDefinitions.add(new FieldDefinition("stock", "Stock", "INT", car.getStock()));
        fieldDefinitions.add(new FieldDefinition("vin", "VIN", "VARCHAR", car.getVin()));

        AppStage.getInstance().showModal(
                car,
                fieldDefinitions,
                "Edit Car",
                "Update",
                () -> {
                    try {
                        boolean success = carService.updateCar(car);
                        if (success) {
                            AppStage.getInstance().showMessage("Success", "Car updated successfully.",
                                    MessageDialog.MessageType.INFORMATION);
                        } else {
                            AppStage.getInstance().showMessage("Update Failed", "No changes were made to the car.",
                                    MessageDialog.MessageType.ERROR);
                        }
                    } catch (SQLException e) {
                        e.printStackTrace();
                        AppStage.getInstance().showMessage("Update Failed",
                                "An error occurred while updating the car:\n" + e.getMessage(),
                                MessageDialog.MessageType.ERROR);
                    }
                },
                () -> {

                });
    }

    public void handleDelete(Car car) {
        AppStage.getInstance().showConfirmation("Delete Confirmation",
                "Are you sure you want to delete the following car?\n" + car.toString(),
                () -> {
                    try {
                        boolean success = carService.deleteCar(car.getCarID());
                        if (success) {
                            carList.remove(car);
                            AppStage.getInstance().showMessage("Success", "Car deleted successfully.",
                                    MessageDialog.MessageType.INFORMATION);
                        } else {
                            AppStage.getInstance().showMessage("Deletion Failed",
                                    "No car found with the specified ID.", MessageDialog.MessageType.ERROR);
                        }
                    } catch (SQLException e) {
                        e.printStackTrace();
                        AppStage.getInstance().showMessage("Deletion Failed",
                                "An error occurred while deleting the car:\n" + e.getMessage(),
                                MessageDialog.MessageType.ERROR);
                    }
                },
                () -> {

                });
    }

    public void handleInsert() {
        Car newCar = new Car();

        List<FieldDefinition> fieldDefinitions = List.of(
                new FieldDefinition("make", "Make", "VARCHAR", ""),
                new FieldDefinition("model", "Model", "VARCHAR", ""),
                new FieldDefinition("year", "Year", "INT", 0),
                new FieldDefinition("price", "Price", "DOUBLE", 0.0),
                new FieldDefinition("stock", "Stock", "INT", 0),
                new FieldDefinition("vin", "VIN", "VARCHAR", ""));

        AppStage.getInstance().showModal(
                newCar,
                fieldDefinitions,
                "Add New Car",
                "Add",
                () -> {
                    try {
                        if (carService.insertCar(newCar)) {
                            carList.add(newCar);
                            AppStage.getInstance().showMessage("Success", "New car added successfully!",
                                    MessageDialog.MessageType.INFORMATION);
                        } else {
                            AppStage.getInstance().showMessage("Insertion Failed", "Unable to add new car.",
                                    MessageDialog.MessageType.ERROR);
                        }
                    } catch (SQLException e) {
                        AppStage.getInstance().showMessage("Error", "Database Error: " + e.getMessage(),
                                MessageDialog.MessageType.ERROR);
                    }
                },
                () -> {

                    System.out.println("Insertion cancelled.");
                });
    }

    public ObservableList<Car> loadAllCars() {
        try {
            List<Car> cars = carService.getAllCars();
            carList.setAll(cars);
        } catch (SQLException e) {
            e.printStackTrace();
            AppStage.getInstance().showMessage("Load Failed",
                    "An error occurred while loading cars:\n" + e.getMessage(), MessageDialog.MessageType.ERROR);
        }
        return filteredCarList;
    }

    public List<CustomSearchBox> getSearchBoxes() {
        try {
            Map<String, String> columns = carService.getColumnNamesAndTypes("cars");
            return columns.entrySet().stream()
                    .map(entry -> new CustomSearchBox(entry.getKey(), entry.getValue()))
                    .collect(Collectors.toList());
        } catch (SQLException e) {
            e.printStackTrace();
            AppStage.getInstance().showMessage("Error",
                    "Failed to load search criteria:\n" + e.getMessage(), MessageDialog.MessageType.ERROR);
            return new ArrayList<>();
        }
    }

    public void resetFilters() {
        filteredCarList.setPredicate(car -> true);
    }

    public void handleExport() {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Save CSV");
        FileChooser.ExtensionFilter extFilter = new FileChooser.ExtensionFilter("CSV files (*.csv)", "*.csv");
        fileChooser.getExtensionFilters().add(extFilter);
        fileChooser.setInitialFileName("car_report.csv");

        Stage stage = (Stage) AppStage.getInstance().getScene().getWindow();
        File file = fileChooser.showSaveDialog(stage);

        if (file != null) {
            try {
                carService.exportCarsToCSV(filteredCarList, file);
                AppStage.getInstance().showMessage("Export Successful",
                        "Cars have been exported successfully to:\n" + file.getAbsolutePath(),
                        MessageDialog.MessageType.INFORMATION);
            } catch (IOException e) {
                e.printStackTrace();
                AppStage.getInstance().showMessage("Export Failed",
                        "An error occurred while exporting cars:\n" + e.getMessage(), MessageDialog.MessageType.ERROR);
            }
        }
    }

    public ObservableList<Car> getCarList() {
        return filteredCarList;
    }

    // ----------------------------Searching---------------------------------------------
    public void filterCars(List<CustomSearchBox> searchBoxes) {
        filteredCarList.setPredicate(car -> {
            for (CustomSearchBox searchBox : searchBoxes) {
                String dataType = searchBox.getDataType().toUpperCase();
                String input = searchBox.getText().trim();

                if (input.isEmpty()) {
                    searchBox.clearValidation();
                    continue;
                }

                boolean inputValid = isInputValid(dataType, input);
                if (!inputValid) {
                    searchBox.setValid(false);
                    return false;
                } else {
                    searchBox.setValid(true);
                    boolean matches = applyFilter(dataType, input, car.getFieldValue(searchBox.getColumnText()));
                    if (!matches) {
                        return false;
                    }
                }
            }
            return true;
        });
    }

    // helper method for filterCars
    private boolean applyFilter(String dataType, String input, String fieldValue) {
        switch (dataType) {
            case "INT":
                return safeFilterInt(input, fieldValue);
            case "DOUBLE":
            case "DECIMAL":
                return safeFilterDecimal(input, fieldValue);
            default:
                return fuzzyMatch(fieldValue, input);
        }
    }

    // helper method for filterCars
    private boolean fuzzyMatch(String fieldValue, String input) {
        return FuzzySearch.ratio(fieldValue.toLowerCase(), input.toLowerCase()) >= 60;
    }

    // validating the int
    private boolean safeFilterInt(String input, String fieldValue) {
        try {
            int actualValue = Integer.parseInt(fieldValue);
            return applyIntFilter(input, actualValue);
        } catch (NumberFormatException e) {

            return false;
        }
    }

    // validating the decimal
    private boolean safeFilterDecimal(String input, String fieldValue) {
        try {
            double actualValue = Double.parseDouble(fieldValue);
            return applyDecimalFilter(input, actualValue);
        } catch (NumberFormatException e) {

            return false;
        }
    }

    private boolean applyIntFilter(String input, int actualValue) {
        if (input.endsWith("-")) {
            int lowerBound = Integer.parseInt(input.replace("-", "").trim());
            return actualValue >= lowerBound;
        }
        if (input.startsWith("-")) {
            int upperBound = Integer.parseInt(input.replace("-", "").trim());
            return actualValue <= upperBound;
        }
        if (input.contains("-")) {
            String[] range = input.split("-");
            int lowerBound = Integer.parseInt(range[0].trim());
            int upperBound = Integer.parseInt(range[1].trim());
            return actualValue >= lowerBound && actualValue <= upperBound;
        }
        int exactValue = Integer.parseInt(input.trim());
        return actualValue == exactValue;
    }

    private boolean applyDecimalFilter(String input, double actualValue) {
        if (input.endsWith("-")) {
            double lowerBound = Double.parseDouble(input.replace("-", "").trim());
            return actualValue >= lowerBound;
        }
        if (input.startsWith("-")) {
            double upperBound = Double.parseDouble(input.replace("-", "").trim());
            return actualValue <= upperBound;
        }
        if (input.contains("-")) {
            String[] range = input.split("-");
            double lowerBound = Double.parseDouble(range[0].trim());
            double upperBound = Double.parseDouble(range[1].trim());
            return actualValue >= lowerBound && actualValue <= upperBound;
        }
        double exactValue = Double.parseDouble(input.trim());
        return actualValue == exactValue;
    }

    // ---------validating the input----------------
    private boolean isInputValid(String dataType, String input) {
        switch (dataType) {
            case "INT":
                return isIntInputValid(input);
            case "DOUBLE":
            case "DECIMAL":
                return isDoubleInputValid(input);
            default:
                return true;
        }
    }

    private boolean isIntInputValid(String input) {
        if (input.matches(regex))
            return false;
        try {
            if (input.equals("-"))
                return false;
            if (input.endsWith("-")) {
                Integer.parseInt(input.replace("-", "").trim());
                return true;
            }
            if (input.startsWith("-")) {
                if (input.length() == 1)
                    return false;
                Integer.parseInt(input.replace("-", "").trim());
                return true;
            }
            if (input.contains("-")) {
                String[] range = input.split("-");
                if (range.length == 2) {
                    Integer.parseInt(range[0].trim());
                    Integer.parseInt(range[1].trim());
                    return true;
                }
                return false;
            }

            Integer.parseInt(input.trim());
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    private boolean isDoubleInputValid(String input) {
        if (input.matches(regex))
            return false;
        try {
            if (input.equals("-"))
                return false;
            if (input.endsWith("-")) {
                Double.parseDouble(input.replace("-", "").trim());
                return true;
            }
            if (input.startsWith("-")) {
                if (input.length() == 1)
                    return false;
                Double.parseDouble(input.replace("-", "").trim());
                return true;
            }
            if (input.contains("-")) {
                String[] range = input.split("-");
                if (range.length == 2) {
                    Double.parseDouble(range[0].trim());
                    Double.parseDouble(range[1].trim());
                    return true;
                }
                return false;
            }

            Double.parseDouble(input.trim());
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }
    // ---------validating the input----------------
    // ----------------------------__Searching__---------------------------------------------

    public void handleDetails(Car car) {
        try {
            List<CarServiceRecord> services = carService.getServicesForCar(car.getCarID());

            showCarServicesDetails(car, services);
        } catch (SQLException e) {
            e.printStackTrace();
            AppStage.getInstance().showMessage("Error",
                    "Failed to load services for car:\n" + e.getMessage(),
                    MessageDialog.MessageType.ERROR);
        }
    }

    // helper for handelDetails create table and show
    @SuppressWarnings("unchecked")
    private void showCarServicesDetails(Car car, List<CarServiceRecord> services) {

        DetailsDialog detailsDialog = AppStage.getInstance().getDetailsDialog();

        detailsDialog.setTitle("Services for Car: " + car.getMake() + " " + car.getModel());

        VBox contentBox = new VBox(10);
        contentBox.setPadding(new Insets(10));
        contentBox.setAlignment(Pos.TOP_LEFT);

        VBox carInfoBox = new VBox(5);
        Label carIDLabel = new Label("Car ID: " + car.getCarID());
        Label makeLabel = new Label("Make: " + car.getMake());
        Label modelLabel = new Label("Model: " + car.getModel());
        Label yearLabel = new Label("Year: " + car.getYear());
        Label priceLabel = new Label(String.format("Price: $%.2f", car.getPrice()));
        Label stockLabel = new Label("Stock: " + car.getStock());
        Label vinLabel = new Label("VIN: " + car.getVin());

        carInfoBox.getChildren().addAll(carIDLabel, makeLabel, modelLabel, yearLabel, priceLabel, stockLabel, vinLabel);

        TableView<CarServiceRecord> serviceTable = new TableView<>();
        serviceTable.setPrefHeight(200);
        serviceTable.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);

        TableColumn<CarServiceRecord, Integer> serviceIDCol = new TableColumn<>("Service ID");
        serviceIDCol.setCellValueFactory(new PropertyValueFactory<>("serviceID"));

        TableColumn<CarServiceRecord, LocalDate> serviceDateCol = new TableColumn<>("Date");
        serviceDateCol.setCellValueFactory(new PropertyValueFactory<>("serviceDate"));

        TableColumn<CarServiceRecord, String> serviceDescCol = new TableColumn<>("Description");
        serviceDescCol.setCellValueFactory(new PropertyValueFactory<>("description"));

        TableColumn<CarServiceRecord, Double> serviceCostCol = new TableColumn<>("Cost");
        serviceCostCol.setCellValueFactory(new PropertyValueFactory<>("cost"));

        serviceTable.getColumns().addAll(serviceIDCol, serviceDateCol, serviceDescCol, serviceCostCol);

        serviceTable.getItems().addAll(services);

        double totalCost = services.stream().mapToDouble(CarServiceRecord::getCost).sum();
        Label totalCostLabel = new Label(String.format("Total Cost of Services: $%.2f", totalCost));
        totalCostLabel.setStyle("-fx-font-size: 14px; -fx-font-weight: bold;");

        contentBox.getChildren().addAll(carInfoBox, serviceTable, totalCostLabel);

        detailsDialog.setCustomContent(contentBox);
        detailsDialog.show();
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\components\Theme.java
```
package com.example.components;

import javafx.scene.effect.DropShadow;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;

public class Theme {
    // Define colors
    public static Color BACKGROUND_COLOR = Color.web("#F8F8F8");
    public static final Color NAVY_COLOR = Color.web("#171926");
    public static final Color LIGHT_NAVY_COLOR = Color.web("#24293C");
    public static final Color WHITE_COLOR = Color.web("#FFFFFF");
    public static final Color BORDER_COLOR = Color.web("#DEE5F0");
    public static final Color BLUE_COLOR = Color.web("#2954ED");
    public static final Color GRAY_COLOR = Color.web("#C1C5CD");

    private static final String FONT_PATH = "/com/example/fonts/";

    public static Font getPoppinsFont(int weight, double size) {
        String fontFileName = mapWeightToFontFile(weight);
        return loadFont(FONT_PATH + fontFileName, size);
    }

    private static String mapWeightToFontFile(int weight) {
        switch (weight) {
            case 100:
                return "Poppins-Thin.ttf";
            case 200:
                return "Poppins-ExtraLight.ttf";
            case 300:
                return "Poppins-Light.ttf";
            case 400:
                return "Poppins-Regular.ttf";
            case 500:
                return "Poppins-Medium.ttf";
            case 600:
                return "Poppins-SemiBold.ttf";
            case 700:
                return "Poppins-Bold.ttf";
            case 800:
                return "Poppins-ExtraBold.ttf";
            case 900:
                return "Poppins-Black.ttf";
            default:
                return null;
        }
    }

    private static Font loadFont(String path, double size) {
        return Font.loadFont(Theme.class.getResourceAsStream(path), size);
    }

    public static DropShadow createShadow() {
        DropShadow shadow = new DropShadow();
        shadow.setColor(Color.rgb(149, 157, 165, 0.2));
        shadow.setRadius(24);
        shadow.setOffsetY(8);
        shadow.setOffsetX(0);
        return shadow;
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\components\general\ViewTitle.java
```
package com.example.components.general;

import com.example.components.Theme;

import javafx.scene.control.Label;
import javafx.scene.layout.VBox;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;

public class ViewTitle extends VBox {

    public ViewTitle(String titleText, String subtitleText) {
        Label titleLabel = new Label(titleText);
        titleLabel.setFont(Theme.getPoppinsFont(600, 26));

        Label subtitleLabel = new Label(subtitleText);
        subtitleLabel.setFont(Font.font("Poppins", FontWeight.NORMAL, 14));
        setSpacing(5);
        getChildren().addAll(titleLabel, subtitleLabel);

        titleLabel.getStyleClass().add("view-title");
        subtitleLabel.getStyleClass().add("view-subtitle");

    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\components\general\StyledTableComponent.java
```
package com.example.components.general;

import com.example.components.Theme;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Cursor;
import javafx.scene.control.Button;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.layout.*;
import javafx.util.Callback;
import javafx.scene.control.cell.PropertyValueFactory;

public abstract class StyledTableComponent<T> extends VBox {

    protected TableView<T> table;

    public StyledTableComponent(String title) {
        setSpacing(15);
        setPadding(new Insets(20));
        setBackground(new Background(new BackgroundFill(Theme.WHITE_COLOR, new CornerRadii(15), Insets.EMPTY)));
        setEffect(Theme.createShadow());
        setMinHeight(620);

        table = new TableView<>();
        table.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);
        getStyleClass().add("table-container");
        table.setMinHeight(550);

        CustomButton addButton = new CustomButton("Insert", "fa-plus");
        Region spacer = new Region();
        HBox.setHgrow(spacer, Priority.ALWAYS);
        HBox headerBox = new HBox(new SectionTitle(title), spacer, addButton);
        headerBox.setAlignment(Pos.CENTER_LEFT);

        
        addButton.setOnAction(event -> onInsert());

        getChildren().addAll(headerBox, table);
    }

    protected <V> TableColumn<T, V> createColumn(String title, String property, int minWidth) {
        TableColumn<T, V> column = new TableColumn<>(title);
        column.setMinWidth(minWidth);
        column.setCellValueFactory(new PropertyValueFactory<>(property));
        return column;
    }

    protected TableColumn<T, Void> createActionColumn() {
        TableColumn<T, Void> actionColumn = new TableColumn<>("Actions");
        actionColumn.setMinWidth(200);

        Callback<TableColumn<T, Void>, TableCell<T, Void>> cellFactory = new Callback<>() {
            @Override
            public TableCell<T, Void> call(final TableColumn<T, Void> param) {
                return new TableCell<>() {
                    private final Button editButton = new Button();
                    private final Button detailsButton = new Button();

                    {
                        editButton.setGraphic(new Icons("fa-edit"));
                        detailsButton.setGraphic(new Icons("fa-info-circle"));

                        editButton.setOnAction(event -> {
                            T item = getTableView().getItems().get(getIndex());
                            onEdit(item);
                        });

                        detailsButton.setOnAction(event -> {
                            T item = getTableView().getItems().get(getIndex());
                            onDetails(item);
                        });

                        editButton.setStyle("-fx-background-color: #4CAF50; -fx-text-fill: white;");
                        detailsButton.setStyle("-fx-background-color: #616161; -fx-text-fill: white;");
                        editButton.setMinWidth(50);
                        detailsButton.setMinWidth(50);
                        editButton.setCursor(Cursor.HAND);
                        detailsButton.setCursor(Cursor.HAND);
                    }

                    private final HBox buttonsBox = new HBox(10, editButton, detailsButton);

                    {
                        buttonsBox.setAlignment(Pos.CENTER);
                    }

                    @Override
                    public void updateItem(Void item, boolean empty) {
                        super.updateItem(item, empty);
                        if (empty) {
                            setGraphic(null);
                        } else {
                            setGraphic(buttonsBox);
                        }
                    }
                };
            }
        };

        actionColumn.setCellFactory(cellFactory);
        return actionColumn;
    }

    public void setData(ObservableList<T> dataList) {
        table.setItems(dataList);
    }

    public TableView<T> getTableView() {
        return table;
    }

    protected abstract void initializeColumns();

    protected abstract void onEdit(T item);

    protected abstract void onDetails(T item);

    protected abstract void onInsert();
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\components\general\SectionTitle.java
```
package com.example.components.general;

import com.example.components.Theme;

import javafx.scene.control.Label;

public class SectionTitle extends Label {
    public SectionTitle(String title) {
        setText(title);
        setFont(Theme.getPoppinsFont(600, 18));
        setTextFill(Theme.NAVY_COLOR);
        getStyleClass().add("section-title");

    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\components\general\Icons.java
```
package com.example.components.general;

import org.kordamp.ikonli.javafx.FontIcon;

import com.example.components.Theme;

public class Icons extends FontIcon {
    public Icons(String iconCode) {
        super(iconCode);
        setFill(Theme.WHITE_COLOR);
    }
}
```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\components\general\GeneralSearchComponent.java
```
package com.example.components.general;

import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import java.util.List;
import java.util.function.Consumer;

public class GeneralSearchComponent extends VBox {
    private List<CustomSearchBox> searchBoxes;
    private Consumer<List<CustomSearchBox>> filterAction;

    public GeneralSearchComponent(List<CustomSearchBox> searchBoxes, Consumer<List<CustomSearchBox>> filterAction) {
        this.searchBoxes = searchBoxes;
        this.filterAction = filterAction;
        initializeSearchBoxes();
    }

    private void initializeSearchBoxes() {
        HBox filters = new HBox(10);
        filters.setAlignment(Pos.CENTER);
        this.setSpacing(10);
        this.setPadding(new Insets(20));
        searchBoxes.forEach(searchBox -> filters.getChildren().add(searchBox));
        Runnable filter = () -> filterAction.accept(searchBoxes);
        searchBoxes.forEach(searchBox -> {
            searchBox.getSearchField().textProperty().addListener((observable, oldValue, newValue) -> filter.run());
        });
        this.getChildren().add(filters);
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\components\general\CustomSearchBox.java
```
package com.example.components.general;

import com.example.components.Theme;
import javafx.scene.control.Label;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;

public class CustomSearchBox extends VBox {
    private String dataType = "VARCHAR";
    private CustomInput searchField;
    private String columnText;

    public CustomSearchBox(String labelText, String type) {
        setSpacing(5);

        Label label = new Label(labelText);
        columnText = labelText;
        label.setFont(Theme.getPoppinsFont(400, 12));
        label.setTextFill(Color.web("#888888"));

        searchField = new CustomInput("");
        searchField.setPrefWidth(150);
        dataType = type;
        switch (type.toUpperCase()) {
            case "DECIMAL":
            case "DOUBLE":
            case "INT":
                searchField.setPromptText("Number or Range (e.g. 10, 10-20, -20, 20-)");
                break;
            case "VARCHAR":
                searchField.setPromptText("Enter Text");
                break;
            case "DATE":
                searchField.setPromptText("Date (e.g. 2024-12-31)");
                break;
            default:
                searchField.setPromptText("Data");
                break;
        }

        getChildren().addAll(label, searchField);
    }

    public String getText() {
        return searchField.getText();
    }

    public void setText(String text) {
        searchField.setText(text);
    }

    public String getDataType() {
        return this.dataType;
    }

    public String getColumnText() {
        return columnText;
    }

    public CustomInput getSearchField() {
        return searchField;
    }

    // Clear validation feedback
    public void clearValidation() {
        searchField.getStyleClass().removeAll("valid", "invalid");
    }

    // Apply validation feedback
    public void setValid(boolean valid) {
        searchField.getStyleClass().removeAll("valid", "invalid");
        if (valid) {
            if (!searchField.getStyleClass().contains("valid")) {
                searchField.getStyleClass().add("valid");
            }
            searchField.setTooltip(null); // Clear any error tooltip on valid input
        } else {
            if (!searchField.getStyleClass().contains("invalid")) {
                searchField.getStyleClass().add("invalid");
            }
        }
    }

}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\components\general\CustomPassword.java
```
package com.example.components.general;

import com.example.components.Theme;

import javafx.scene.control.PasswordField;

public class CustomPassword extends PasswordField {
    public CustomPassword(String text) {
        setPrefWidth(150);
        setPromptText(text);
        setEffect(Theme.createShadow());
        getStyleClass().add("text-field");

    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\components\general\CustomInput.java
```
package com.example.components.general;

import com.example.components.Theme;

import javafx.scene.control.TextField;

public class CustomInput extends TextField {
    public CustomInput(String text) {
        setPrefWidth(150);
        setPromptText(text);
        setEffect(Theme.createShadow());
        getStyleClass().add("text-field");
    }


    public void clearValidation() {
        getStyleClass().removeAll("valid", "invalid");
    }

    public void setValid(boolean valid) {
        getStyleClass().removeAll("valid", "invalid");
        if (valid) {
            getStyleClass().add("valid");
        } else {
            getStyleClass().add("invalid");
        }
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\components\general\CustomComboBox.java
```
package com.example.components.general;

import com.example.components.Theme;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;

/**
 * A customizable ComboBox with an associated label.
 *
 * @param <T> The type of the items in the ComboBox.
 */
public class CustomComboBox<T> extends VBox {
    private final ComboBox<T> comboBox;

    /**
     * Constructs a CustomComboBox with a specified label.
     *
     * @param labelText The text for the label associated with the ComboBox.
     */
    public CustomComboBox(String labelText) {
        setSpacing(5);
        Label label = new Label(labelText);
        label.setFont(Font.font("Poppins", FontWeight.NORMAL, 12));
        label.setTextFill(Color.web("#888888"));
        comboBox = new ComboBox<>();
        comboBox.setMinWidth(150); // Increased width for better visibility
        comboBox.setPromptText("Select");
        comboBox.setEffect(Theme.createShadow());
        comboBox.getStylesheets().add(getClass().getResource("/com/example/css/comboBoxStyle.css").toExternalForm());
        getChildren().addAll(label, comboBox);
    }

    /**
     * Adds multiple items to the ComboBox.
     *
     * @param items The items to add.
     */
    @SafeVarargs
    public final void setItems(T... items) {
        comboBox.getItems().addAll(items);
    }

    /**
     * Retrieves the selected value from the ComboBox.
     *
     * @return The selected value of type T.
     */
    public T getValue() {
        return comboBox.getValue();
    }

    /**
     * Sets an event handler for action events on the ComboBox.
     *
     * @param handler The event handler to set.
     */
    public void setOnAction(EventHandler<ActionEvent> handler) {
        comboBox.setOnAction(handler);
    }

    /**
     * Provides access to the internal ComboBox for advanced configurations.
     *
     * @return The internal ComboBox instance.
     */
    public ComboBox<T> getComboBox() {
        return comboBox;
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\components\general\CustomButton.java
```
package com.example.components.general;

import javafx.geometry.Insets;
import javafx.scene.Cursor;
import javafx.scene.control.Button;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;

public class CustomButton extends Button {

    public CustomButton(String text) {
        this(text, null, false);
    }

    public CustomButton(String text, String iconName) {
        this(text, iconName, false);
    }

    public CustomButton(String text, boolean isOutlined) {
        this(text, null, isOutlined);
    }

    public CustomButton(String text, String iconName, boolean isOutlined) {
        super(text);
        setCursor(Cursor.HAND);
        setPadding(new Insets(10));

        if (isOutlined) {
            getStyleClass().addAll("custom-button", "outlined");
        } else {
            getStyleClass().add("custom-button");
        }

        if (iconName != null) {
            if (iconName.startsWith("fa-")) {
                setGraphic(new Icons(iconName));
            } else {
                try {
                    Image icon = new Image(getClass().getResourceAsStream("/com/example/images/" + iconName));
                    if (icon.isError()) {
                        throw new IllegalArgumentException("Error loading icon: " + iconName);
                    }
                    ImageView iconView = new ImageView(icon);
                    iconView.setFitHeight(16);
                    iconView.setFitWidth(16);
                    setGraphic(iconView);
                    setGraphicTextGap(8);
                } catch (Exception e) {
                    System.out.println("Icon not found or error loading icon: " + iconName);
                    e.printStackTrace();
                }
            }
        }
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\components\dialog\ModalDialog.java
```
package com.example.components.dialog;

import com.example.AppStructure.AppStage;
import com.example.components.Theme;
import com.example.components.general.CustomButton;
import com.example.components.general.CustomSearchBox;
import com.example.util.DateUtil;

import javafx.animation.FadeTransition;
import javafx.animation.ParallelTransition;
import javafx.animation.ScaleTransition;
import javafx.animation.SequentialTransition;
import javafx.animation.TranslateTransition;
import javafx.beans.property.Property;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.Label;
import javafx.scene.control.Tooltip;
import javafx.scene.effect.BoxBlur;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.util.Duration;
import java.lang.reflect.Field;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ModalDialog extends StackPane {

    private VBox modalContent; // Container for dialog content
    private Map<String, CustomSearchBox> customSearchBoxMap; // Map of fields to CustomSearchBox
    private Object entity; // The entity to insert
    private Runnable onConfirm; // Action on confirmation
    private Runnable onCancel; // Action on cancellation
    private Label errorLabel; // Label to display validation or SQL errors

    public ModalDialog() {
        // Modal background styling
        this.setStyle("-fx-background-color: rgba(0, 0, 0, 0.5);");
        this.setPickOnBounds(true);
        this.setVisible(false);
        this.setAlignment(Pos.CENTER);

        // Main content container
        modalContent = new VBox(10);
        modalContent.setStyle("-fx-background-color: white; "
                + "-fx-padding: 20; "
                + "-fx-border-radius: 10; "
                + "-fx-background-radius: 10; "
                + "-fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.25), 10, 0.5, 0, 0);");
        modalContent.setMaxSize(400, Region.USE_PREF_SIZE);
        modalContent.setAlignment(Pos.TOP_LEFT);

        // Error label for validation or SQL errors
        errorLabel = new Label();
        errorLabel.setTextFill(Color.RED);
        errorLabel.setWrapText(true);
        errorLabel.setVisible(false);

        this.getChildren().add(modalContent);
        StackPane.setAlignment(modalContent, Pos.CENTER);
    }

    public void setContent(
            Object entity,
            List<FieldDefinition> fieldDefinitions,
            String dialogTitle, // New parameter for title
            String confirmButtonText, // New parameter for confirm button text
            Runnable onConfirm,
            Runnable onCancel) {

        this.entity = entity;
        this.onConfirm = onConfirm;
        this.onCancel = onCancel;

        modalContent.getChildren().clear();

        // Modal Header
        VBox modalHeader = new VBox(5);
        Label modalTitle = new Label(dialogTitle); // Use the custom title
        Region spacer = new Region();
        spacer.setPrefHeight(3);
        spacer.setBackground(new Background(new BackgroundFill(Theme.GRAY_COLOR, new CornerRadii(10), Insets.EMPTY)));
        modalTitle.setFont(Theme.getPoppinsFont(600, 20));
        modalTitle.setTextFill(Theme.BLUE_COLOR);

        modalHeader.getChildren().addAll(modalTitle, spacer);
        modalContent.getChildren().add(modalHeader);

        // Initialize errorLabel
        errorLabel.setText("");
        errorLabel.setVisible(false);
        modalContent.getChildren().add(errorLabel);

        customSearchBoxMap = new HashMap<>();

        // Create form fields dynamically based on FieldDefinitions
        for (FieldDefinition fieldDef : fieldDefinitions) {
            String fieldName = fieldDef.getFieldName();
            String displayName = fieldDef.getDisplayName();
            String dataType = fieldDef.getDataType();
            Object value = fieldDef.getValue();

            CustomSearchBox customSearchBox = new CustomSearchBox(displayName, dataType);
            customSearchBox.setText(value != null ? value.toString() : ""); // Default to empty if null
            modalContent.getChildren().add(customSearchBox);
            customSearchBoxMap.put(fieldName, customSearchBox);
        }

        // Buttons
        CustomButton confirmButton = new CustomButton(confirmButtonText); // Use custom button text
        CustomButton cancelButton = new CustomButton("Cancel", true);

        HBox buttonsBox = new HBox(10);
        buttonsBox.getChildren().addAll(confirmButton, cancelButton);
        buttonsBox.setAlignment(Pos.CENTER_RIGHT);

        // Confirm Button Action
        confirmButton.setOnAction(event -> handleInsert(fieldDefinitions));

        // Cancel Button Action
        cancelButton.setOnAction(event -> handleCancel());

        modalContent.getChildren().addAll(buttonsBox);
    }

    /**
     * Handles the insert operation when the user clicks "Add".
     */
    private void handleInsert(List<FieldDefinition> fieldDefinitions) {
        boolean hasError = false;
        errorLabel.setText("");
        errorLabel.setVisible(false);

        for (FieldDefinition fieldDef : fieldDefinitions) {
            String fieldName = fieldDef.getFieldName();
            CustomSearchBox customSearchBox = customSearchBoxMap.get(fieldName);
            String newValue = customSearchBox.getText();

            try {
                // Validate and convert input
                Object convertedValue = validateAndConvert(fieldDef.getDataType(), newValue, fieldDef.getDisplayName());

                // Update entity field dynamically using reflection
                updateEntityField(entity, fieldName, convertedValue);

                // Mark field as valid
                customSearchBox.setValid(true);
                customSearchBox.getSearchField().setTooltip(null); // Clear tooltip

            } catch (ValidationException ve) {
                // Validation error
                hasError = true;
                customSearchBox.setValid(false);
                customSearchBox.getSearchField().setTooltip(new Tooltip(ve.getMessage()));
            } catch (Exception e) {
                // General error
                hasError = true;
                errorLabel.setText("An unexpected error occurred: " + simplifyErrorMessage(e.getMessage()));
                errorLabel.setVisible(true);
                e.printStackTrace(); // Optional: Log full error for debugging
            }
        }

        if (!hasError) {
            // If no errors, run confirm action
            if (onConfirm != null) {
                onConfirm.run();
            }
            this.setVisible(false);
        }
    }

    private void handleCancel() {
        // Clear all errors
        errorLabel.setText("");
        errorLabel.setVisible(false);
        customSearchBoxMap.values().forEach(CustomSearchBox::clearValidation);

        if (onCancel != null) {
            onCancel.run();
        }
        this.hideWithAnimation();
    }

    private Object validateAndConvert(String dataType, String value, String displayName) throws ValidationException {
        if (value == null || value.trim().isEmpty()) {
            throw new ValidationException(displayName + " cannot be empty.");
        }

        try {
            switch (dataType.toUpperCase()) {
                case "INT":
                    return Integer.parseInt(value);
                case "DOUBLE":
                    return Double.parseDouble(value);
                case "BOOLEAN":
                    return Boolean.parseBoolean(value);
                case "VARCHAR":
                case "STRING":
                    return value;
                case "DATE":
                    return parseDateFlexible(value, displayName);
                default:
                    throw new ValidationException("Unsupported data type for " + displayName + ".");
            }
        } catch (NumberFormatException e) {
            throw new ValidationException(displayName + " has an invalid format.");
        }
    }

    private void updateEntityField(Object entity, String fieldName, Object value) throws Exception {
        Field field = entity.getClass().getDeclaredField(fieldName);
        field.setAccessible(true);

        // If the field is a JavaFX Property, use its setValue() method
        if (Property.class.isAssignableFrom(field.getType()) || field.getType().getName().contains("Property")) {
            Object property = field.get(entity);
            if (property instanceof Property) {
                ((Property<Object>) property).setValue(value);
            } else {
                throw new IllegalArgumentException(
                        "Unsupported property type for field: " + fieldName);
            }
        } else {
            // For non-property fields, directly set the value
            field.set(entity, value);
        }
    }

    private String simplifyErrorMessage(String message) {
        if (message.contains(":")) {
            return message.substring(message.lastIndexOf(":") + 1).trim();
        }
        return message;
    }

    public void showWithAnimation() {
        // Ensure modalContent's visibility and position are reset
        modalContent.setOpacity(1.0); // Ensure it's visible
        modalContent.setTranslateY(0); // Reset position in case it was moved
        modalContent.setScaleX(1.0); // Ensure it's full scale
        modalContent.setScaleY(1.0);

        this.setVisible(true); // Make the entire modal visible

        // Animation: Fade in the background
        FadeTransition fadeIn = new FadeTransition(Duration.millis(300), this);
        fadeIn.setFromValue(0.0);
        fadeIn.setToValue(1.0);

        // Animation: Slide and scale the modalContent
        TranslateTransition slideIn = new TranslateTransition(Duration.millis(300), modalContent);
        slideIn.setFromY(-100); // Start above its normal position
        slideIn.setToY(0); // End at its normal position

        ScaleTransition scaleIn = new ScaleTransition(Duration.millis(300), modalContent);
        scaleIn.setFromX(0.9);
        scaleIn.setFromY(0.9);
        scaleIn.setToX(1.0);
        scaleIn.setToY(1.0);

        // Apply BoxBlur to the background (exclude modalContent itself)
        // AppStage.getRoot().getChildren().stream()
                // .filter(node -> node != this) // Exclude the current modal dialog
                // .forEach(node -> node.setEffect(new BoxBlur(5, 5, 3)));

        // Play the animations together
        ParallelTransition showTransition = new ParallelTransition(fadeIn, slideIn, scaleIn);
        showTransition.play();
    }

    public void hideWithAnimation() {
        FadeTransition fadeOut = new FadeTransition(Duration.millis(300), this);
        fadeOut.setFromValue(1.0);
        fadeOut.setToValue(0.0);

        TranslateTransition slideOut = new TranslateTransition(Duration.millis(300), modalContent);
        slideOut.setFromY(0);
        slideOut.setToY(-20);

        ScaleTransition scaleOut = new ScaleTransition(Duration.millis(300), modalContent);
        scaleOut.setFromX(1.0);
        scaleOut.setFromY(1.0);
        scaleOut.setToX(0.9);
        scaleOut.setToY(0.9);

        ParallelTransition hideTransition = new ParallelTransition(fadeOut, slideOut, scaleOut);

        hideTransition.setOnFinished(event -> {
            this.setVisible(false); // Hide the modal after animation

            // // Clear the blur effect from the background
            // AppStage.getRoot().getChildren().forEach(node -> node.setEffect(null));
            // AppStage.getRoot().setEffect(null);
        });

        hideTransition.play();
    }

    public void show() {
        showWithAnimation();
    }

    public void hide() {
        hideWithAnimation();
    }

    /**
     * Custom exception for validation errors.
     */
    private static class ValidationException extends Exception {
        public ValidationException(String message) {
            super(message);
        }
    }

    private Date parseDateFlexible(String dateStr, String displayName) throws ValidationException {
        try {
            return DateUtil.parseDateFlexible(dateStr);
        } catch (ParseException e) {
            throw new ValidationException("Invalid date format for " + displayName
                    + ". Accepted formats: dd-MM-yyyy, dd MM yyyy, dd/MM/yyyy, dd.MM.yyyy.");
        }
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\components\dialog\MessageDialog.java
```
package com.example.components.dialog;

import com.example.components.Theme;
import com.example.components.general.CustomButton;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.Label;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.scene.text.TextAlignment;

public class MessageDialog extends StackPane {

    private VBox modalContent;
    private Label titleLabel;
    private Label messageLabel;
    private CustomButton okButton;

    public enum MessageType {
        INFORMATION,
        ERROR
    }

    public MessageDialog() {
        // Semi-transparent background
        this.setStyle("-fx-background-color: rgba(0, 0, 0, 0.5);");
        this.setPickOnBounds(true);
        this.setVisible(false);
        this.setAlignment(Pos.CENTER);

        // Modal content container
        modalContent = new VBox(15);
        modalContent.setAlignment(Pos.CENTER);
        modalContent.setPadding(new Insets(20));
        modalContent.setMaxWidth(400);
        modalContent.setBackground(new Background(new BackgroundFill(Color.WHITE, new CornerRadii(10), Insets.EMPTY)));
        modalContent.setEffect(Theme.createShadow());

        // Prevent VBox from growing vertically
        modalContent.setMaxHeight(Region.USE_PREF_SIZE);
        modalContent.setPrefHeight(Region.USE_COMPUTED_SIZE);

        // Title label
        titleLabel = new Label();
        titleLabel.setFont(Font.font("Poppins", FontWeight.BOLD, 20));
        titleLabel.setTextFill(Theme.BLUE_COLOR);
        titleLabel.setTextAlignment(TextAlignment.CENTER);
        titleLabel.setWrapText(true); // Ensure long titles wrap appropriately

        // Message label
        messageLabel = new Label();
        messageLabel.setWrapText(true);
        messageLabel.setFont(Font.font("Poppins", 16));
        messageLabel.setTextAlignment(TextAlignment.CENTER);
        messageLabel.setTextFill(Color.BLACK);

        // OK Button
        okButton = new CustomButton("OK");
        okButton.setMinWidth(80);
        okButton.setOnAction(event -> hide());

        // Arrange components
        modalContent.getChildren().addAll(titleLabel, messageLabel, okButton);
        this.getChildren().add(modalContent);
    }

    /**
     * Displays the dialog with the specified title, message, and type.
     *
     * @param title   The title of the dialog.
     * @param message The message to display.
     * @param type    The type of the message (INFORMATION or ERROR).
     */
    public void show(String title, String message, MessageType type) {
        titleLabel.setText(title);
        messageLabel.setText(message);

        // Adjust styles based on message type
        switch (type) {
            case INFORMATION:
                titleLabel.setTextFill(Theme.BLUE_COLOR);
                break;
            case ERROR:
                titleLabel.setTextFill(Color.RED);
                break;
        }

        this.setVisible(true);
    }

    /**
     * Hides the dialog.
     */
    public void hide() {
        this.setVisible(false);
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\components\dialog\FieldDefinition.java
```
package com.example.components.dialog;

public class FieldDefinition {
    private String fieldName;
    private String displayName;
    private String dataType;
    private Object value;

    public FieldDefinition(String fieldName, String displayName, String dataType, Object value) {
        this.fieldName = fieldName;
        this.displayName = displayName;
        this.dataType = dataType;
        this.value = value;
    }

    public String getFieldName() {
        return fieldName;
    }

    public String getDisplayName() {
        return displayName;
    }

    public String getDataType() {
        return dataType;
    }

    public Object getValue() {
        return value;
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\components\dialog\DetailsDialog.java
```
package com.example.components.dialog;

import com.example.AppStructure.AppStage;
import com.example.components.Theme;
import com.example.components.general.CustomButton;

import javafx.animation.FadeTransition;
import javafx.animation.ParallelTransition;
import javafx.animation.ScaleTransition;
import javafx.animation.TranslateTransition;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.Label;
// import javafx.scene.effect.BoxBlur;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.util.Duration;

public class DetailsDialog extends StackPane {

    private VBox modalContent;
    private Label titleLabel;
    private Pane customContent;
    private CustomButton closeButton;

    public DetailsDialog() {

        this.setStyle("-fx-background-color: rgba(0, 0, 0, 0.5);");
        this.setPickOnBounds(true);
        this.setVisible(false);
        this.setAlignment(Pos.CENTER);

        modalContent = new VBox(15);
        modalContent.setAlignment(Pos.CENTER);
        modalContent.setPadding(new Insets(20));
        modalContent.setMaxWidth(600);
        modalContent.setBackground(new Background(new BackgroundFill(Color.WHITE, new CornerRadii(10), Insets.EMPTY)));
        modalContent.setEffect(Theme.createShadow());

        modalContent.setMaxHeight(Region.USE_PREF_SIZE);
        modalContent.setPrefHeight(Region.USE_COMPUTED_SIZE);

        titleLabel = new Label("Details");
        titleLabel.setFont(Theme.getPoppinsFont(500, 20));
        titleLabel.setTextFill(Theme.BLUE_COLOR);
        titleLabel.setAlignment(Pos.CENTER);
        titleLabel.setWrapText(true);

        customContent = new Pane();
        customContent.setMinHeight(100);

        closeButton = new CustomButton("Close");
        closeButton.setMinWidth(80);
        closeButton.setOnAction(event -> hideWithAnimation());

        modalContent.getChildren().addAll(titleLabel, customContent, closeButton);
        this.getChildren().add(modalContent);
    }

    public void setTitle(String title) {
        titleLabel.setText(title);
    }

    public void setCustomContent(Pane content) {
        customContent = content;

        modalContent.getChildren().set(1, customContent);
    }

    public void showWithAnimation() {
        modalContent.setOpacity(1.0);
        modalContent.setTranslateY(0);
        modalContent.setScaleX(1.0);
        modalContent.setScaleY(1.0);

        this.setVisible(true);

        FadeTransition fadeIn = new FadeTransition(Duration.millis(300), this);
        fadeIn.setFromValue(0.0);
        fadeIn.setToValue(1.0);

        TranslateTransition slideIn = new TranslateTransition(Duration.millis(300), modalContent);
        slideIn.setFromY(-100);
        slideIn.setToY(0);

        ScaleTransition scaleIn = new ScaleTransition(Duration.millis(300), modalContent);
        scaleIn.setFromX(0.9);
        scaleIn.setFromY(0.9);
        scaleIn.setToX(1.0);
        scaleIn.setToY(1.0);

        // AppStage.getRoot().getChildren().stream()
                // .filter(node -> node != this)
                // .forEach(node -> node.setEffect(new BoxBlur(5, 5, 3)));

        ParallelTransition showTransition = new ParallelTransition(fadeIn, slideIn, scaleIn);
        showTransition.play();
    }

    public void hideWithAnimation() {
        FadeTransition fadeOut = new FadeTransition(Duration.millis(300), this);
        fadeOut.setFromValue(1.0);
        fadeOut.setToValue(0.0);

        TranslateTransition slideOut = new TranslateTransition(Duration.millis(300), modalContent);
        slideOut.setFromY(0);
        slideOut.setToY(-20);

        ScaleTransition scaleOut = new ScaleTransition(Duration.millis(300), modalContent);
        scaleOut.setFromX(1.0);
        scaleOut.setFromY(1.0);
        scaleOut.setToX(0.9);
        scaleOut.setToY(0.9);

        ParallelTransition hideTransition = new ParallelTransition(fadeOut, slideOut, scaleOut);

        hideTransition.setOnFinished(event -> {
            this.setVisible(false);

            AppStage.getRoot().getChildren().forEach(node -> node.setEffect(null));
            AppStage.getRoot().setEffect(null);
        });

        hideTransition.play();
    }

    public void show() {
        showWithAnimation();
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\components\dialog\ConfirmationDialog.java
```
package com.example.components.dialog;

import com.example.components.Theme;
import com.example.components.general.CustomButton;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.Label;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.scene.text.TextAlignment;

public class ConfirmationDialog extends StackPane {

    private VBox modalContent;
    private Label titleLabel;
    private Label messageLabel;
    private CustomButton yesButton;
    private CustomButton noButton;

    public ConfirmationDialog() {
        // Semi-transparent background
        this.setStyle("-fx-background-color: rgba(0, 0, 0, 0.5);");
        this.setPickOnBounds(true);
        this.setVisible(false);
        this.setAlignment(Pos.CENTER);

        // Modal content container
        modalContent = new VBox(15);
        modalContent.setAlignment(Pos.CENTER);
        modalContent.setPadding(new Insets(20));
        modalContent.setMaxWidth(400);
        modalContent.setBackground(new Background(new BackgroundFill(Color.WHITE, new CornerRadii(10), Insets.EMPTY)));
        modalContent.setEffect(Theme.createShadow());

        // Prevent VBox from growing vertically
        modalContent.setMaxHeight(Region.USE_PREF_SIZE);
        modalContent.setPrefHeight(Region.USE_COMPUTED_SIZE);

        // Title label
        titleLabel = new Label();
        titleLabel.setFont(Font.font("Poppins", FontWeight.BOLD, 20));
        titleLabel.setTextFill(Theme.BLUE_COLOR);
        titleLabel.setTextAlignment(TextAlignment.CENTER);
        titleLabel.setWrapText(true); // Ensure long titles wrap appropriately

        // Message label
        messageLabel = new Label();
        messageLabel.setWrapText(true);
        messageLabel.setFont(Font.font("Poppins", 16));
        messageLabel.setTextAlignment(TextAlignment.CENTER);
        messageLabel.setTextFill(Color.BLACK);

        // Yes and No Buttons
        yesButton = new CustomButton("Yes");
        noButton = new CustomButton("No", true);
        yesButton.setMinWidth(80);
        noButton.setMinWidth(80);

        // Arrange buttons
        HBox buttonsBox = new HBox(10, yesButton, noButton);
        buttonsBox.setAlignment(Pos.CENTER);

        // Arrange components
        modalContent.getChildren().addAll(titleLabel, messageLabel, buttonsBox);
        this.getChildren().add(modalContent);
    }

    /**
     * Displays the confirmation dialog with the specified title and message.
     *
     * @param title   The title of the dialog.
     * @param message The message to display.
     * @param onYes   Action to perform if the user clicks "Yes".
     * @param onNo    Action to perform if the user clicks "No".
     */
    public void show(String title, String message, Runnable onYes, Runnable onNo) {
        titleLabel.setText(title);
        messageLabel.setText(message);

        yesButton.setOnAction(event -> {
            if (onYes != null) {
                onYes.run();
            }
            hide();
        });

        noButton.setOnAction(event -> {
            if (onNo != null) {
                onNo.run();
            }
            hide();
        });

        this.setVisible(true);
    }

    /**
     * Hides the dialog.
     */
    public void hide() {
        this.setVisible(false);
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\AppStructure\LoginStage.java
```
package com.example.AppStructure;

import com.example.AppStructure.aside.Logo;
import com.example.components.Theme;
import com.example.components.general.CustomButton;
import com.example.components.general.CustomInput;
import com.example.components.general.CustomPassword;
import com.example.components.general.Icons;
import com.example.dao.UserDAO;
import com.example.model.UserAccount;
import com.example.session.SessionManager;
// import com.mysql.cj.log.Log;

import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.image.Image;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;

public class LoginStage extends Stage {
        private static LoginStage instance;

        public LoginStage() {
                instance = this;
                FlowPane sceneContainer = new FlowPane();

                HBox container = new HBox();
                container.setPrefSize(800, 500);

                // Left side setup
                VBox leftSide = new VBox();
                leftSide.setPrefWidth(400);
                leftSide.setPadding(new Insets(40));
                leftSide.setSpacing(35);

                // Image background for leftSide
                leftSide.setBackground(new Background(new BackgroundImage(
                                new Image(getClass().getResource("/com/example/images/loginBackground.png")
                                                .toExternalForm()),
                                BackgroundRepeat.NO_REPEAT,
                                BackgroundRepeat.NO_REPEAT,
                                BackgroundPosition.DEFAULT,
                                new BackgroundSize(
                                                BackgroundSize.AUTO, // Width
                                                BackgroundSize.AUTO, // Height
                                                false, // Absolute width
                                                false, // Absolute height
                                                true, // Cover the region
                                                true // Contain within the region
                                ))));

                // Clip the left side for rounded corners
                Rectangle clip = new Rectangle(400, 500);
                clip.setArcWidth(60);
                clip.setArcHeight(60);
                leftSide.setClip(clip);

                VBox title = new VBox();
                Label hello = new Label("Hello To");
                hello.setFont(Theme.getPoppinsFont(600, 32));
                hello.setTextFill(Color.WHITE);

                Logo logo = new Logo();
                logo.setFill(Theme.WHITE_COLOR);
                logo.setFont(Theme.getPoppinsFont(800, 36));
                title.getChildren().addAll(hello, logo);

                Label description = new Label("BorjCars helps you automate repetitive sales and marketing tasks.\n" +
                                "Get highly productive through automation and save tons of time!");
                description.setFont(Theme.getPoppinsFont(300, 15));
                description.setTextFill(Theme.GRAY_COLOR);
                description.setWrapText(true);

                Label footer = new Label("© 2024 BorjCars. All rights reserved.");
                footer.setFont(Theme.getPoppinsFont(300, 14));
                footer.setTextFill(Color.LIGHTGRAY);

                Label icon = new Label();
                Icons iconGraphic = new Icons("fa-sign-in");
                icon.setFont(Theme.getPoppinsFont(900, 60));
                icon.setGraphic(iconGraphic);
                leftSide.getChildren().addAll(icon, title, description, footer);

                // Right side setup
                VBox rightSide = new VBox();
                rightSide.setAlignment(Pos.CENTER);
                rightSide.setPadding(new Insets(40));
                rightSide.setSpacing(20);
                rightSide.setBackground(
                                new Background(new BackgroundFill(Color.WHITE, new CornerRadii(0, 30, 30, 0, false),
                                                Insets.EMPTY)));

                Label formTitle = new Label("Login to BorjCars");
                formTitle.setFont(Theme.getPoppinsFont(600, 24));
                formTitle.setTextFill(Theme.NAVY_COLOR);

                Label formSubtitle = new Label("Enter the essential information to have the access");
                formSubtitle.setFont(Theme.getPoppinsFont(400, 14));
                formSubtitle.setTextFill(Color.GRAY);

                CustomInput usernameField = new CustomInput("Username");
                usernameField.setPromptText("Email");
                usernameField.setPrefWidth(300);

                CustomPassword passwordField = new CustomPassword("Password");
                passwordField.setPrefWidth(300);

                CustomButton loginButton = new CustomButton("Log in");
                loginButton.setStyle("-fx-padding: 10 20;");
                loginButton.setPrefWidth(350);

                rightSide.getChildren().addAll(formTitle, formSubtitle, usernameField, passwordField, loginButton);

                container.getChildren().addAll(leftSide, rightSide);

                sceneContainer.getChildren().add(container);
                container.setBackground(new Background(new BackgroundFill(
                                Color.TRANSPARENT,
                                new CornerRadii(30),
                                Insets.EMPTY)));
                container.setAlignment(Pos.CENTER);
                container.setEffect(Theme.createShadow());
                sceneContainer.setAlignment(Pos.CENTER);
                sceneContainer.setBackground(
                                new Background(new BackgroundFill(Theme.BACKGROUND_COLOR, new CornerRadii(30),
                                                Insets.EMPTY)));
                Scene scene = new Scene(sceneContainer);
                scene.getStylesheets().add(getClass().getResource("/com/example/css/light-theme.css").toExternalForm());

                // stage properties
                setScene(scene);
                setTitle("BorjCars - Login");
                setMaximized(true);
                // _stage properties

                // Login button event
                loginButton.setOnAction(event -> {
                        String username = usernameField.getText();
                        String password = passwordField.getText();

                        UserDAO userDAO = new UserDAO();
                        UserAccount user = userDAO.getUserByUsernameAndPassword(username, password);

                        if (user != null) {
                                SessionManager.getInstance().setCurrentUser(user);

                                this.close();
                                AppStage appScene = new AppStage();
                                appScene.show();
                        } else {
                                formSubtitle.setText("Invalid username or password. Try again.");
                                formSubtitle.setTextFill(Color.RED);
                        }
                });
                // _Login button event
        }

        public static LoginStage getInstance() {
                return instance;
        }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\AppStructure\AppStage.java
```
package com.example.AppStructure;

import com.example.AppStructure.aside.Aside;
import com.example.AppStructure.main.Main;
import com.example.components.dialog.ConfirmationDialog;
import com.example.components.dialog.FieldDefinition;
import com.example.components.dialog.MessageDialog;
import com.example.components.dialog.ModalDialog;
import com.example.components.dialog.DetailsDialog;
import com.example.session.SessionManager;
import javafx.scene.Scene;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Priority;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;

import java.util.List;
import java.util.prefs.Preferences;

/**
 * The main application stage that manages the primary scene,
 * modals, messages, confirmations, and theme settings.
 */
public class AppStage extends Stage {

    private static AppStage instance;

    private final StackPane root;

    private final ModalDialog modalDialog;
    private final MessageDialog messageDialog;
    private final ConfirmationDialog confirmationDialog;
    private final DetailsDialog detailsDialog;

    private Scene scene;

    private boolean isDarkTheme = false;

    private static final String PREF_THEME = "theme";
    private final Preferences prefs = Preferences.userNodeForPackage(AppStage.class);

    /**
     * Constructor initializes the main stage with all components.
     */
    public AppStage() {

        instance = this;

        root = new StackPane();

        HBox mainContent = new HBox();

        Main main = new Main();
        HBox.setHgrow(main, Priority.ALWAYS);

        mainContent.getChildren().addAll(new Aside(), main);

        modalDialog = new ModalDialog();
        messageDialog = new MessageDialog();
        confirmationDialog = new ConfirmationDialog();
        detailsDialog = new DetailsDialog();

        root.getChildren().addAll(mainContent, modalDialog, messageDialog, confirmationDialog, detailsDialog);

        scene = new Scene(root, 1400, 800);

        scene.getStylesheets().add(getClass().getResource("/com/example/css/light-theme.css").toExternalForm());

        boolean dark = prefs.getBoolean(PREF_THEME, false);
        if (dark) {

            scene.getStylesheets().add(getClass().getResource("/com/example/css/dark-theme.css").toExternalForm());
            isDarkTheme = true;
        } else {
            isDarkTheme = false;
        }

        this.setScene(scene);

        this.setTitle("Main Application - " + SessionManager.getInstance().getCurrentUser().getUsername());
    }

    /**
     * Retrieves the singleton instance of AppStage.
     *
     * @return The AppStage instance.
     */
    public static AppStage getInstance() {
        return instance;
    }

    public static StackPane getRoot() {
        return instance.root;
    }

    public void showModal(
            Object entity,
            List<FieldDefinition> fieldDefinitions,
            String dialogTitle,
            String confirmButtonText,
            Runnable onConfirm,
            Runnable onCancel) {
        modalDialog.setContent(entity, fieldDefinitions, dialogTitle, confirmButtonText, onConfirm, onCancel);
        modalDialog.show();
    }

    public void hideModal() {
        modalDialog.hide();
    }

    public void showMessage(String title, String message, MessageDialog.MessageType type) {
        messageDialog.show(title, message, type);
    }

    public void showConfirmation(String title, String message, Runnable onYes, Runnable onNo) {
        confirmationDialog.show(title, message, onYes, onNo);
    }

    public void toggleTheme() {
        if (isDarkTheme) {

            scene.getStylesheets().remove(getClass().getResource("/com/example/css/dark-theme.css").toExternalForm());
            isDarkTheme = false;
            prefs.putBoolean(PREF_THEME, false);
        } else {

            if (!scene.getStylesheets()
                    .contains(getClass().getResource("/com/example/css/dark-theme.css").toExternalForm())) {
                scene.getStylesheets().add(getClass().getResource("/com/example/css/dark-theme.css").toExternalForm());
            }
            isDarkTheme = true;
            prefs.putBoolean(PREF_THEME, true);
        }
    }

    public void setTheme(boolean dark) {
        if (dark && !isDarkTheme) {
            toggleTheme();
        } else if (!dark && isDarkTheme) {
            toggleTheme();
        }
    }

    public boolean isDarkTheme() {
        return isDarkTheme;
    }

    public ModalDialog getModalDialog() {
        return modalDialog;
    }

    public DetailsDialog getDetailsDialog() {
        return detailsDialog;
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\AppStructure\main\Main.java
```
package com.example.AppStructure.main;

import com.example.AppStructure.header.Header;
import com.example.views.HomeView;

import javafx.application.Platform;
import javafx.scene.Node;
import javafx.scene.control.ProgressIndicator;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;

public class Main extends VBox {

    private static Main instance;
    private final StackPane contentPane;

    public Main() {
        instance = this;

        Header header = new Header();
        contentPane = new StackPane();
        contentPane.getChildren().add(new HomeView());
        // setBackground(new Background(new BackgroundFill(Theme.BLUE_COLOR,
        // CornerRadii.EMPTY, Insets.EMPTY)));
        getChildren().addAll(header, contentPane);
    }

    public static Main getInstance() {
        return instance;
    }

    public void changeView(Node view) {
        StackPane loadingScreen = new StackPane();
        loadingScreen.getStyleClass().add("loading-screen");

        ProgressIndicator loadingIndicator = new ProgressIndicator();
        loadingIndicator.getStyleClass().add("loading-indicator");
        loadingScreen.getChildren().add(loadingIndicator);

        contentPane.getChildren().add(loadingScreen);

        new Thread(() -> {
            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            Platform.runLater(() -> {
                contentPane.getChildren().clear();
                contentPane.getChildren().add(view);
            });
        }).start();
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\AppStructure\main\home\ServiceCard.java
```
package com.example.AppStructure.main.home;

import com.example.components.Theme;

import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.Label;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.Background;
import javafx.scene.layout.BackgroundFill;
import javafx.scene.layout.CornerRadii;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;

public class ServiceCard extends HBox {

    public ServiceCard(String carModel, String customerName, String cost, String description, String carImagePath) {
        setPadding(new Insets(15));
        setSpacing(15);
        setAlignment(Pos.CENTER_LEFT);
        // setBackground(new Background(new BackgroundFill(Theme.BACKGROUND_COLOR, new
        // CornerRadii(15), Insets.EMPTY)));
        getStyleClass().addAll("primary-bg","rounded");

        Image carImage = new Image(getClass().getResourceAsStream("/com/example/images/" + carImagePath));
        ImageView carImageView = new ImageView(carImage);
        carImageView.setFitHeight(60);
        carImageView.setPreserveRatio(true);

        VBox detailsBox = new VBox(5);
        detailsBox.setAlignment(Pos.TOP_LEFT);

        Label modelLabel = new Label(carModel);
        modelLabel.setFont(Theme.getPoppinsFont(500, 17));
        modelLabel.getStyleClass().add("view-title");

        Label customerLabel = new Label("Customer: " + customerName);
        customerLabel.setFont(Theme.getPoppinsFont(400, 14));
        customerLabel.getStyleClass().add("view-subtitle");

        Label descriptionLabel = new Label(description);
        descriptionLabel.setFont(Theme.getPoppinsFont(400, 14));
        descriptionLabel.getStyleClass().add("view-subtitle");

        Label costLabel = new Label(cost);
        costLabel.setFont(Theme.getPoppinsFont(500, 18));
        costLabel.setTextFill(Theme.BLUE_COLOR);

        detailsBox.getChildren().addAll(modelLabel, customerLabel, descriptionLabel, costLabel);
        getChildren().addAll(carImageView, detailsBox);
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\AppStructure\main\home\Records.java
```
package com.example.AppStructure.main.home;

import javafx.scene.layout.HBox;
import javafx.scene.layout.Priority;
import com.example.model.home.HomeStats;

public class Records extends HBox {
    public Records(HomeStats stats) {
        setSpacing(20);
        RecordCard cars = new RecordCard("Total Cars", (stats.getTotalCars()));
        RecordCard customers = new RecordCard("Total Customers", stats.getTotalCustomers());
        RecordCard orders = new RecordCard("Total Orders", (stats.getTotalOrders()));
        RecordCard employees = new RecordCard("Total Employees", (stats.getTotalEmployees()));

        HBox.setHgrow(cars, Priority.ALWAYS);
        HBox.setHgrow(customers, Priority.ALWAYS);
        HBox.setHgrow(orders, Priority.ALWAYS);
        HBox.setHgrow(employees, Priority.ALWAYS);

        getChildren().addAll(cars, customers, orders, employees);
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\AppStructure\main\home\RecordCard.java
```
package com.example.AppStructure.main.home;

import com.example.components.Theme;
import javafx.animation.Animation;
import javafx.animation.KeyFrame;
import javafx.animation.KeyValue;
import javafx.animation.Timeline;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Insets;
import javafx.scene.control.Label;
import javafx.scene.layout.VBox;
import javafx.util.Duration;

public class RecordCard extends VBox {
    private final Label valueLabel;
    private final IntegerProperty currentValue = new SimpleIntegerProperty(0);
    private final int targetValue;

    public RecordCard(String title, int value) {
        this.targetValue = value;

        Label titleLabel = new Label(title);
        titleLabel.setFont(Theme.getPoppinsFont(400, 14));
        titleLabel.getStyleClass().add("view-subtitle");

        valueLabel = new Label("0");
        valueLabel.setFont(Theme.getPoppinsFont(600, 20));
        valueLabel.setTextFill(Theme.BLUE_COLOR);

        currentValue.addListener((observable, oldValue, newValue) -> {
            valueLabel.setText(String.valueOf(newValue.intValue()));
        });

        getStyleClass().addAll("secondary-bg", "rounded");
        setSpacing(10);
        setPadding(new Insets(20));
        getChildren().addAll(titleLabel, valueLabel);
        setEffect(Theme.createShadow());

        initializeCountingAnimation();
    }

    private void initializeCountingAnimation() {
        Duration duration = Duration.seconds(3);
        Duration delay = Duration.seconds(1);
        Timeline timeline = new Timeline(
                new KeyFrame(Duration.ZERO, new KeyValue(currentValue, 0)),
                new KeyFrame(duration, new KeyValue(currentValue, targetValue)));
        timeline.setDelay(delay);
        timeline.setCycleCount(1);
        timeline.play();
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\AppStructure\main\home\OrderCard.java
```
package com.example.AppStructure.main.home;

import com.example.components.Theme;

import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.Label;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.Background;
import javafx.scene.layout.BackgroundFill;
import javafx.scene.layout.CornerRadii;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;

public class OrderCard extends VBox {

    public OrderCard(String carModel, String customerName, String orderDate, String price, String carImagePath) {
        setPadding(new Insets(15));
        setSpacing(10);
        setAlignment(Pos.TOP_LEFT);
        // setBackground(new Background(new BackgroundFill(Theme.BACKGROUND_COLOR, new
        // CornerRadii(15), Insets.EMPTY)));
        getStyleClass().addAll("primary-bg","rounded");

        Image carImage = new Image(getClass().getResourceAsStream("/com/example/images/" + carImagePath));
        ImageView carImageView = new ImageView(carImage);
        carImageView.fitHeightProperty().bind(heightProperty().multiply(0.66));
        carImageView.setPreserveRatio(true);

        HBox carImageBox = new HBox(carImageView);
        carImageBox.setAlignment(Pos.CENTER);

        Label modelLabel = new Label(carModel);
        modelLabel.setFont(Theme.getPoppinsFont(600, 18));
        // modelLabel.setTextFill(Theme.NAVY_COLOR);
        modelLabel.getStyleClass().add("view-title");

        Label infoLabel = new Label("Customer: " + customerName + "      Order Date: " + orderDate);
        infoLabel.setFont(Theme.getPoppinsFont(400, 13));
        // infoLabel.setTextFill(Theme.GRAY_COLOR);
        infoLabel.getStyleClass().add("view-subtitle");

        Label priceLabel = new Label(price);
        priceLabel.setFont(Theme.getPoppinsFont(600, 20));
        priceLabel.setTextFill(Theme.BLUE_COLOR);
        setPadding(new Insets(0, 0, 30, 30));
        getChildren().addAll(carImageView, modelLabel, infoLabel, priceLabel);
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\AppStructure\main\home\LatestServicesContainer.java
```
package com.example.AppStructure.main.home;

import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.layout.Background;
import javafx.scene.layout.BackgroundFill;
import javafx.scene.layout.CornerRadii;
import javafx.scene.layout.FlowPane;
import javafx.scene.layout.VBox;
import javafx.beans.binding.Bindings;
import java.util.List;

import com.example.components.Theme;
import com.example.components.general.SectionTitle;

public class LatestServicesContainer extends VBox {

    public LatestServicesContainer(String title, List<ServiceCard> items) {
        setPadding(new Insets(20));
        setSpacing(15);
        setAlignment(Pos.TOP_LEFT);
        // setBackground(new Background(new BackgroundFill(Theme.WHITE_COLOR, new
        // CornerRadii(15), Insets.EMPTY)));
        getStyleClass().add("service-card");
        setEffect(Theme.createShadow());

        FlowPane flowPane = new FlowPane();
        flowPane.setHgap(15);
        flowPane.setVgap(15);
        flowPane.setPadding(new Insets(10));
        flowPane.setAlignment(Pos.TOP_LEFT);

        items.forEach(item -> {
            item.prefWidthProperty().bind(Bindings.createDoubleBinding(() -> {
                double flowPaneWidth = flowPane.getWidth();
                double cardWidth = (flowPaneWidth) / 2;
                return Math.max(150, cardWidth - 20);
            }, flowPane.widthProperty()));

            flowPane.getChildren().add(item);
        });

        getChildren().addAll(new SectionTitle(title), flowPane);
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\AppStructure\main\home\LatestServices.java
```
package com.example.AppStructure.main.home;

import com.example.model.home.LatestService;
import java.util.List;
import java.util.stream.Collectors;

public class LatestServices extends LatestServicesContainer {
    public LatestServices(List<LatestService> services) {
        super("Latest Services", services.stream()
                .map(s -> new ServiceCard(
                        s.getCarName(),
                        s.getCustomerName(),
                        "$" + String.format("%.2f", s.getCost()),
                        s.getServiceDescription(),
                        s.getImageName()))
                .collect(Collectors.toList()));
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\AppStructure\main\home\LatestOrdersContainer.java
```
package com.example.AppStructure.main.home;

import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.Label;
import javafx.scene.layout.Background;
import javafx.scene.layout.BackgroundFill;
import javafx.scene.layout.CornerRadii;
import javafx.scene.layout.FlowPane;
import javafx.scene.layout.VBox;
import javafx.beans.binding.Bindings;
import java.util.List;

import com.example.components.Theme;
import com.example.components.general.SectionTitle;

public class LatestOrdersContainer extends VBox {

    public LatestOrdersContainer(String title, List<OrderCard> items) {
        setPadding(new Insets(20));
        setSpacing(15);
        setAlignment(Pos.TOP_LEFT);
        getStyleClass().addAll("secondary-bg", "rounded");
        setEffect(Theme.createShadow());

        FlowPane flowPane = new FlowPane();
        flowPane.setHgap(15);
        flowPane.setVgap(15);
        flowPane.setPadding(new Insets(10));
        flowPane.setAlignment(Pos.TOP_LEFT);

        items.forEach(item -> {
            item.prefWidthProperty().bind(Bindings.createDoubleBinding(() -> {
                double flowPaneWidth = flowPane.getWidth();
                double cardWidth = (flowPaneWidth) / 2;
                return Math.max(150, cardWidth - 20);
            }, flowPane.widthProperty()));

            flowPane.getChildren().add(item);
        });

        getChildren().addAll(new SectionTitle(title), flowPane);
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\AppStructure\main\home\LatestOrders.java
```
package com.example.AppStructure.main.home;

import com.example.model.home.LatestOrder;
import java.util.List;
import java.util.stream.Collectors;

public class LatestOrders extends LatestOrdersContainer {
    public LatestOrders(List<LatestOrder> orders) {
        super("Latest Orders", orders.stream()
                .map(o -> new OrderCard(
                        o.getCarName(),
                        o.getCustomerName(),
                        o.getOrderDate().toString(),
                        "$" + String.format("%.2f", o.getTotalPrice()),
                        o.getImageName() // Use the pre-assigned image from LatestOrder
                ))
                .collect(Collectors.toList()));
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\AppStructure\header\ThemeToggle.java
```
package com.example.AppStructure.header;

import java.util.prefs.Preferences;

import com.example.App;
import com.example.AppStructure.AppStage;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Cursor;
import javafx.scene.control.Label;
import javafx.scene.layout.HBox;

public class ThemeToggle extends HBox {
    private Label lightLabel;
    private Label darkLabel;
    private Preferences prefs = Preferences.userNodeForPackage(AppStage.class);

    public ThemeToggle() {
        lightLabel = createLabel("Light");
        darkLabel = createLabel("Dark");
        if (prefs.getBoolean("theme", false)) {
            setSelected(darkLabel);
        } else {
            setSelected(lightLabel);
        }

        lightLabel.setOnMouseClicked(event -> {
            if (!AppStage.getInstance().isDarkTheme()) {
                return;
            }
            AppStage.getInstance().toggleTheme();
            setSelected(lightLabel);
        });

        darkLabel.setOnMouseClicked(event -> {
            if (AppStage.getInstance().isDarkTheme()) {
                return; // Already in dark theme
            }
            AppStage.getInstance().toggleTheme();
            setSelected(darkLabel);
        });

        getChildren().addAll(lightLabel, darkLabel);
        getStyleClass().add("theme-toggle");
        setSpacing(5);
        setAlignment(Pos.CENTER);
        setPadding(new Insets(5, 10, 5, 10));
        setMaxWidth(160);
    }

    private Label createLabel(String text) {
        Label label = new Label(text);
        label.getStyleClass().add("theme-toggle-label");
        label.setCursor(Cursor.HAND);
        return label;
    }

    private void setSelected(Label selectedLabel) {
        lightLabel.getStyleClass().removeAll("selected");
        darkLabel.getStyleClass().removeAll("selected");

        selectedLabel.getStyleClass().add("selected");
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\AppStructure\header\Header.java
```
package com.example.AppStructure.header;

import com.example.components.Theme;
import com.example.model.UserAccount;
import com.example.session.SessionManager;

import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.Label;
import javafx.scene.effect.DropShadow;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Background;
import javafx.scene.layout.BackgroundFill;
import javafx.scene.layout.Border;
import javafx.scene.layout.BorderStroke;
import javafx.scene.layout.BorderStrokeStyle;
import javafx.scene.layout.BorderWidths;
import javafx.scene.layout.CornerRadii;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;

public class Header extends HBox {
    UserAccount user = SessionManager.getInstance().getCurrentUser();
    String username = user.getUsername();

    public Header() {
        getStyleClass().addAll("primary-bg", "border-header");
        setPadding(new Insets(10));
        setSpacing(10);
        setAlignment(Pos.CENTER);
        ThemeToggle themeToggle = new ThemeToggle();

        Label separator = new Label("|");
        separator.setTextFill(Color.web("#DEE5F0"));
        separator.setPadding(new Insets(0, 10, 0, 10));
        separator.setFont(Theme.getPoppinsFont(200, 20));

        HBox userProfile = createUserProfile(username);
        userProfile.setEffect(Theme.createShadow());
        setEffect(Theme.createShadow());
        Label dateLabel = new Label("7 October 2023");
        dateLabel.setPadding(new Insets(5, 10, 5, 10));
        dateLabel.setFont(Theme.getPoppinsFont(500, 14));

        getChildren().addAll(themeToggle, separator, userProfile, dateLabel);
    }

    private HBox createUserProfile(String userName) {
        ImageView profileIcon = new ImageView(
                new Image(getClass().getResourceAsStream("/com/example/images/profile.png")));
        profileIcon.setFitWidth(40);
        profileIcon.setFitHeight(40);
        profileIcon.styleProperty().set("-fx-border-radius: 50%;");

        Label nameLabel = new Label(userName);
        nameLabel.setPadding(new Insets(0, 10, 0, 10));
        nameLabel.setFont(Theme.getPoppinsFont(600, 14));

        HBox userProfile = new HBox(5, profileIcon, nameLabel);
        userProfile.setAlignment(Pos.CENTER);
        userProfile.setPadding(new Insets(5, 15, 5, 15));
        userProfile.getStyleClass().addAll("primary-bg", "rounded");

        return userProfile;
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\AppStructure\aside\Logo.java
```
package com.example.AppStructure.aside;

import com.example.components.Theme;

import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;

public class Logo extends Text {
    public Logo() {
        super("BorjCars");
        setFont(Theme.getPoppinsFont(800, 30));
        setFill(Theme.BLUE_COLOR);
    }

}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\AppStructure\aside\Aside.java
```
package com.example.AppStructure.aside;

import com.example.AppStructure.aside.menu.Menu;
import com.example.components.Theme;

import javafx.geometry.Insets;
import javafx.scene.layout.VBox;
import javafx.scene.layout.Background;
import javafx.scene.layout.BackgroundFill;
import javafx.scene.layout.Border;
import javafx.scene.layout.BorderStroke;
import javafx.scene.layout.BorderStrokeStyle;
import javafx.scene.layout.BorderWidths;
import javafx.scene.layout.CornerRadii;

public class Aside extends VBox {
    public Aside() {
        setSpacing(60);
        setMinWidth(230);
        setPadding(new Insets(20));
        getStyleClass().addAll("primary-bg", "border");

        getChildren().addAll(new Logo(), new Menu());
    }
}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\AppStructure\aside\menu\MenuItem.java
```
package com.example.AppStructure.aside.menu;

import com.example.AppStructure.main.Main;
import com.example.components.Theme;
import com.example.views.CarsView;
import com.example.views.HomeView;

import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Cursor;
import javafx.scene.Node;
import javafx.scene.control.Label;
import javafx.scene.effect.DropShadow;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.Background;
import javafx.scene.layout.BackgroundFill;
import javafx.scene.layout.CornerRadii;
import javafx.scene.layout.HBox;
import javafx.scene.paint.Color;

public class MenuItem extends HBox {

    private final ImageView iconView;
    private final Label label;
    private final String iconName;
    private boolean isSelected;
    private final String text;

    public MenuItem(String iconName, String text, boolean isSelected) {
        this.iconName = iconName;
        this.text = text;
        this.isSelected = isSelected;

        iconView = new ImageView();
        updateIcon();

        cursorProperty().setValue(Cursor.HAND);
        iconView.setFitHeight(22);
        iconView.setFitWidth(22);

        label = new Label(text);
        label.setFont(Theme.getPoppinsFont(500, 16));
        getStyleClass().addAll("rounded", "menu-item-label","menu-item");
        label.getStyleClass().add("menu-item-label");
        setSelected(isSelected);
        setAlignment(Pos.CENTER_LEFT);
        setPadding(new Insets(15));
        setSpacing(30);
        getChildren().addAll(iconView, label);

    }

    public String getText() {
        return text;
    }

    public void setSelected(boolean selected) {
        isSelected = selected;
        updateIcon();
        if (selected) {
            label.setStyle("-fx-text-fill: white");
            label.getStyleClass().add("menu-item-label-selected");
            getStyleClass().add("primary-color-bg");
            setEffect(null);
        } else {
            label.setStyle("-fx-text-fill: inherit");
            label.getStyleClass().remove("menu-item-label-selected");
            getStyleClass().remove("primary-color-bg");
            setOnMouseEntered(e -> applyHoverShadow());
            setOnMouseExited(e -> setEffect(null));
        }
    }

    private void updateIcon() {
        String selectedIconName = isSelected ? iconName.replace(".png", "-selected.png") : iconName;
        Image icon = new Image(getClass().getResourceAsStream("/com/example/images/" + selectedIconName));
        iconView.setImage(icon);
    }

    private void applyHoverShadow() {
        setEffect(Theme.createShadow());
    }

}

```
File: C:\Users\amrbr\OneDrive\Desktop\Car System\Project\demo\src\main\java\com\example\AppStructure\aside\menu\Menu.java
```
package com.example.AppStructure.aside.menu;

import com.example.AppStructure.AppStage;
import com.example.AppStructure.LoginStage;
import com.example.AppStructure.main.Main;
import com.example.session.SessionManager;
import com.example.views.CarsView;
import com.example.views.CustomersView;
import com.example.views.EmployeesView;
import com.example.views.HomeView;
import com.example.views.OrdersView;
import com.example.views.PaymentsView;
import com.example.views.ReportsView;
import com.example.views.ServicesView;
import javafx.geometry.Pos;
import javafx.scene.Node;
import javafx.scene.control.Label;
import javafx.scene.layout.VBox;

import java.util.ArrayList;
import java.util.List;

public class Menu extends VBox {

    public Menu() {
        setSpacing(20);
        setAlignment(Pos.TOP_LEFT);
        MenuItem logout = new MenuItem("logout.png", "Log out", false);

        List<MenuItem> items = new ArrayList<>();
        items.add(new MenuItem("home.png", "Home", true));
        items.add(new MenuItem("car.png", "Cars", false));
        items.add(new MenuItem("customer.png", "Customers", false));
        items.add(new MenuItem("emp.png", "Employees", false));
        items.add(new MenuItem("order.png", "Orders", false));
        items.add(new MenuItem("payment.png", "Payments", false));
        items.add(new MenuItem("service.png", "Services", false));
        items.add(new MenuItem("service.png", "Reports", false));
        items.add(logout);

        items.forEach(item -> {
            item.setOnMouseClicked(e -> {
                items.forEach(i -> i.setSelected(false));
                item.setSelected(true);

                changeView(item.getText());
            });
            getChildren().add(item);
        });
        logout.setOnMouseClicked(e -> {
            AppStage.getInstance().close();
            LoginStage.getInstance().show();
            SessionManager.getInstance().setCurrentUser(null);
        });
    }

    private void changeView(String menuItemText) {
        Main mainInstance = Main.getInstance();
        if (mainInstance != null) {
            Node view;
            switch (menuItemText.toLowerCase()) {
                case "home":
                    view = new HomeView();
                    break;
                case "cars":
                    view = new CarsView();
                    break;
                case "customers":
                    view = new CustomersView();
                    break;
                case "employees":
                    view = new EmployeesView();
                    break;
                case "orders":
                    view = new OrdersView();
                    break;
                case "payments":
                    view = new PaymentsView();
                    break;
                case "services":
                    view = new ServicesView();
                    break;
                case "reports":
                    view = new ReportsView();
                    break;
                // case "log out":
                // // view = new ReportsView();
                // break;
                default:
                    view = new Label("View not implemented: " + menuItemText);
                    break;
            }
            mainInstance.changeView(view);
        }
    }
}

```
